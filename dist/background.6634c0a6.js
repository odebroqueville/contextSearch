(()=>{"use strict";let e,o,t,s,n={},r=[],a="",i="",c="";const l=!1,g="defaultSearchEngines.json",d="https://lens.google.com/uploadbyurl?url=",u="https://www.google.com/searchbyimage?sbisrc=1&safe=off&image_url=",f="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",w=/[\s\S]*/i,b=browser.i18n.getMessage("titleMultipleSearchEngines"),h=browser.i18n.getMessage("titleSiteSearch"),p=browser.i18n.getMessage("exactMatch"),m=browser.i18n.getMessage("titleOptions"),y=browser.i18n.getMessage("windowTitle"),x=browser.i18n.getMessage("omniboxDescription"),v=browser.i18n.getMessage("notifySearchEnginesLoaded"),A=browser.i18n.getMessage("notifySearchEngineAdded"),S=browser.i18n.getMessage("notifyUsage"),k=browser.i18n.getMessage("notifySearchEngineWithKeyword"),M=browser.i18n.getMessage("notifyUnknown"),O=browser.i18n.getMessage("notifySearchEngineUrlRequired");let R=!1,F="bottom",T=!0,E=!1,P=!1,L=!1,N=!1,U=!0,C=!0,I=!1,D=!1,W=!1,q=!1,H="Google",Q="https://www.google.com/search?q=",B=!1,X="multiNewWindow",J=!1,G=!1;const $={exactMatch:R,tabMode:"openNewTab",tabActive:P,lastTab:E,optionsMenuLocation:F,displayFavicons:U,displayExifSummary:C,disableAltClick:I,forceSearchEnginesReload:q,resetPreferences:W,forceFaviconsReload:D,siteSearch:H,siteSearchUrl:Q,useRegex:B,multiMode:X,privateMode:J};async function j(e){let o={},t=await browser.storage.sync.get(null).catch((e=>{l&&(console.error(e),console.log("Failed to retrieve data from storage sync."))}));if(t.options&&(o=t.options,l&&console.log(o),delete t.options),Re(o)||o.resetPreferences?o=$:await browser.storage.sync.clear(),l&&console.log(o),await async function(e,o){Z(e),_(e),oe(e),te(e),function(e){l&&console.log("Setting display EXIF summary preference..");C=e.displayExifSummary}(e),se(e),re(e),ne(e),ae(e),ee(e),o&&(await browser.storage.sync.clear(),await V(e,!0))}(o,!0),!Re(t)&&Object.keys(t).length>1)n=Oe(t),K(),Y(),l&&(console.log("Search engines: \n"),console.log(n)),await browser.storage.local.clear(),await ce(),await ie(!1);else{const o=await browser.storage.local.get(null);void 0===o||Re(o)||e?(await browser.storage.local.clear(),await async function(e){let o=new Headers;o.append("Content-Type","application/json");let t=new Request(e,{method:"GET",headers:o});try{const e=await fetch(t);if(!e.ok){const o=`The search engines could not be loaded. An error has occured: ${e.status}`;throw new Error(o)}const o=await e.json();n=Oe(o),K(),Y(),l&&(console.log("Search engines:\n"),console.log(n)),await browser.storage.local.clear(),await ce(),await ie(!0),fe()}catch(e){l&&console.error(e.message)}}(g).catch((e=>{console.error(e),console.log("Failed to retrieve search enginees from local storage.")}))):(n=Oe(o),K(),Y(),l&&(console.log("Search engines: \n"),console.log(n)))}}function K(){for(let e in n)void 0===n[e].regex&&(l&&console.log(`id: ${e}`),n[e].regex={},n[e].regex.body=w.source,n[e].regex.flags=w.flags,l&&console.log(n[e].regex))}function Y(){for(let e in n)void 0===n[e].keyboardShortcut&&(l&&console.log(`id: ${e}`),n[e].keyboardShortcut="",l&&console.log(`keyboard shortcut: ${n[e].keyboardShortcut}`))}async function z(){const e=(await browser.storage.sync.get(null).catch((e=>(l&&(console.error(e),console.log("Failed to retrieve options from sync storage.")),e)))).options;return l&&console.log(e),e}async function V(e,o){if(l){const o=JSON.stringify(e);console.log(`Options settings:\n${o}`)}await browser.storage.sync.set({options:e}).catch((e=>{l&&(console.error(e),console.log("Failed to save options to storage sync."))})),o&&fe(),l&&console.log("Successfully saved the options to storage sync.")}function Z(e){l&&console.log(`Setting exact match to ${e.exactMatch}`),R=e.exactMatch}function _(e){switch(l&&console.log("Setting tab mode.."),P=e.tabActive,E=e.lastTab,J=e.privateMode,e.tabMode){case"openNewTab":T=!0,L=!1,N=!1;break;case"sameTab":T=!1,L=!1,N=!1;break;case"openNewWindow":L=!0,T=!1,N=!1;break;case"openSidebar":N=!0,T=!1,L=!1}}function ee(e){X=e.multiMode}function oe(e){l&&console.log(`Setting the position of options in the context menu to ${e.optionsMenuLocation}`),F=e.optionsMenuLocation}function te(e){l&&console.log("Setting favicons preference.."),U=e.displayFavicons}function se(e){l&&console.log("Setting option to disable Alt-Click.."),I=e.disableAltClick}function ne(e){l&&console.log("Setting site search option.."),H=e.siteSearch,Q=e.siteSearchUrl}function re(e){l&&console.log("Setting reset options.."),q=e.forceSearchEnginesReload,W=e.resetPreferences,D=e.forceFaviconsReload}function ae(e){l&&console.log("Setting whether to use regular expressions..."),B=e.useRegex}async function ie(e){n=Oe(n),l&&(console.log("Search engines:\n"),console.log(n));try{await browser.storage.local.set(n),G&&e&&ke(v),l&&console.log("Search engines have been successfully saved to local storage.")}catch(e){l&&(console.error(e.message),console.log("Failed to save the search engines to local storage."))}}async function ce(){l&&console.log("Fetching favicons..");let e=[];for(let o in n)if(null===n[o].base64||void 0===n[o].base64||D){let t=n[o].url;l&&console.log("id: "+o),l&&console.log("url: "+t);let s=Me(t);l&&console.log("Getting favicon for "+s),e.push(await le(o,s))}if(e.length>0){const o=await Promise.all(e).catch((e=>{l&&(console.error(e),console.log("Not ALL the favcions could be fetched."))}));if(l&&console.log("ALL promises have completed."),void 0===o)return;for(let e of o)l&&(console.log("================================================"),console.log("id is "+e.id),console.log("------------------------------------------------"),console.log("base64 string is "+e.base64),console.log("================================================")),n[e.id].base64=e.base64;l&&console.log("The favicons have ALL been fetched.")}}async function le(e,o){const n=["32x32","[.]png","[.]ico"];let r=[],a=new DOMParser,i=null,c=new Headers;c.append("Content-Type","text/html; charset=UTF-8"),c.append("x-api-key",s);const g=new Request(t+o,{method:"GET",headers:c});try{const t=await fetch(g);if(!t.ok){const e=`Failed to get domain of search engine. An error has occured: ${t.status}`;throw new Error(e)}l&&console.log(t);const s=await t.text(),c=a.parseFromString(s,"text/html").getElementsByTagName("link");for(let e of c){const t=e.getAttribute("rel");if(/icon/i.test(t)){const t=ge(e.href,o);r.push(t)}}l&&console.log(`Domain: ${o}`),l&&console.log(`Links with favicons: ${r}`);for(let o of n)if(l&&console.log(`Checking if url contains: ${o}`),i=de(r,o),null!==i){l&&console.log(`Best icon url: ${i}`);return{id:e,base64:await ue(i)}}return{id:e,base64:f}}catch(o){return l&&console.error(o.message),l&&console.log("Failed to retrieve new favicon."),{id:e,base64:f}}}function ge(e,o){let t=e,s=o,n=[];if(/^(https?:\/\/)/.test(t))return t;if(t.includes("moz-extension://")){let e=t.lastIndexOf("moz-extension://")+16;t=t.substr(e),n=t.split(/\//),n.shift();for(let e of n)s+="/"+e;return s}if(/^(\/\/)/.test(t))return"https:"+t;/^([.]\/|\/)[^/]/.test(t)?(n=t.split(/\//),n.shift()):/^[^/]/.test(t)&&(n=t.split(/\//));for(let e of n)s+="/"+e;return s}function de(e,o){let t=new RegExp(o,"i");for(let o of e)if(t.test(o))return o;return null}async function ue(e){let o=new Headers;o.append("x-api-key",s);const n=new Request(t+e,{method:"GET",headers:o});try{const e=await fetch(n);if(!e.ok){const o=`Failed to fetch the favicon image. An error has occured: ${e.status}`;throw new Error(o)}const o=await e.text();return l&&console.log(o),o}catch(e){return l&&console.log(e.message),f}}function fe(){l&&console.log("Rebuilding context menu.."),browser.runtime.getBrowserInfo().then((e=>{let o=e.version,t=parseInt(o.slice(0,o.search(".")-1));browser.contextMenus.removeAll(),browser.contextMenus.onClicked.removeListener(he),"top"===F&&we(),browser.contextMenus.create({id:"cs-reverse-image-search",title:"Google Reverse Image Search",contexts:["image"]}),browser.contextMenus.create({id:"cs-google-lens",title:"Google Lens",contexts:["image"]}),r=[];let s=Object.keys(n).length;for(let e=1;e<s+1;e++)for(let o in n)if(n[o].index===e){let s=n[o].base64,a="cs-"+e.toString(),i=n[o].name;r.push(o),be(n[o],a,i,s,t)}"bottom"===F&&we(),browser.contextMenus.onClicked.addListener(he)}))}function we(){"bottom"===F&&browser.contextMenus.create({id:"cs-separator",type:"separator",contexts:["selection"]}),browser.contextMenus.create({id:"cs-match",type:"checkbox",title:p,contexts:["selection"],checked:R}),browser.contextMenus.create({id:"cs-multitab",title:b,contexts:["selection"]}),browser.contextMenus.create({id:"cs-site-search",title:`${h} ${H}`,contexts:["selection"]}),browser.contextMenus.create({id:"cs-options",title:m+"...",contexts:["selection"]}),"top"===F&&browser.contextMenus.create({id:"cs-separator",type:"separator",contexts:["selection"]})}function be(e,o,t,s,n){const r=["selection"],i="data:image/png;base64,"+s,c=e.regex.body,l=e.regex.flags,g=new RegExp(c,l);e.show&&(B&&null===a.match(g)||(n>=56&&!0===U?browser.contextMenus.create({id:o,title:t,contexts:r,icons:{20:i}}):browser.contextMenus.create({id:o,title:t,contexts:r})))}async function he(e,o){let t,s,n=e.menuItemId.replace("cs-","");void 0!==e.selectionText&&(e.selectionText.length<150||e.selectionText.length>150)&&(a=e.selectionText.trim()),N&&"reverse-image-search"!==n&&"google-lens"!==n?(await browser.sidebarAction.open(),await browser.sidebarAction.setPanel({panel:""})):(await browser.sidebarAction.close(),t=o.index+1);const c=await browser.tabs.query({currentWindow:!0});if(s=c[c.length-1].index+1,E&&(t=s),"multiAfterLastTab"!==X&&(s=t+1),"reverse-image-search"===n)return l&&console.log(i),void xe(u+i,t);if("google-lens"===n)return l&&console.log(i),void xe(d+i,t);if("site-search"===n&&!Re(i)){if(l&&console.log(i),N){const e=Me(o.url).replace(/https?:\/\//,""),t=await z();return i=t.siteSearchUrl+Se(`site:https://${e} ${a}`),Fe(i),void browser.sidebarAction.setTitle({title:"Search results"})}return void xe(i,t)}if("options"===n)return void browser.runtime.openOptionsPage().then(null,Ae);if("multitab"===n)return void pe(s);if("match"===n)return void z().then((e=>{let o=e.options;l&&console.log(`Preferences retrieved from sync storage: ${JSON.stringify(o)}`),o.exactMatch=!R,Z(o),V(o,!0)}));let g=parseInt(n);isNaN(g)||ye(r[g-1],t)}async function pe(e){const o=await browser.storage.local.get(null);n=Oe(o);let t=[];for(let e in n)n[e].multitab&&t.push(me(n[e].url,a));if(G&&Re(t))return void ke("Search engines have not been selected for a multi-search.");const s=t.length;if(l&&console.log(t),"multiNewWindow"===X)await browser.windows.create({titlePreface:y+"'"+a+"'",url:t,incognito:J});else for(let o=0;o<s;o++)await browser.tabs.create({index:e+o,url:t[o]})}function me(e,o){let t="";return R&&(t="%22"),e.includes("{searchTerms}")?e.replace(/{searchTerms}/g,Se(o)):e.includes("%s")?e.replace(/%s/g,Se(o)):e+t+Se(o)+t}function ye(e,o){let t=n[e].url;if(i=me(t,a),l&&console.log(`Target url: ${i}`),N)return browser.sidebarAction.setPanel({panel:i}),Fe(i),void browser.sidebarAction.setTitle({title:"Search results"});xe(i,o)}async function xe(e,o){l&&console.log("Tab position: "+o);const t=(await browser.windows.getCurrent({populate:!1})).id;L?(await browser.windows.create({url:e,incognito:J}),P||await browser.windows.update(t,{focused:!0})):T?browser.tabs.create({active:P,index:o,url:e}):(l&&console.log("Opening search results in same tab, url is "+e),browser.tabs.update({url:e}))}function ve(e){let o=[],t="";if(R&&(t="%22"),-1===e.indexOf(" "))return c="",o;let s=e.split(" ")[0],r=e.replace(s,"").trim();l&&console.log(r);let g=!0;if(c==s&&(g=!1),c=s,"!"===s){return a=r,[{content:"",description:"Perform multisearch for "+r}]}if("."===s){return[{content:"",description:"Open options page"}]}if("!b"===s||"bookmarks"===s){return[{content:"",description:"Search bookmarks"}]}if("!h"===s||"history"===s){return[{content:"",description:"Search history"}]}for(let e in n)if(n[e].keyword===s){let s={},a=n[e].url;return i=a.includes("{searchTerms}")?a.replace(/{searchTerms}/g,Se(r)):a.includes("%s")?a.replace(/%s/g,Se(r)):a+t+Se(r)+t,s.content=i,s.description="Search "+n[e].name+" for "+r,l&&console.log(JSON.stringify(s)),o.push(s),o}return G&&g&&ke(k+" "+s+" "+M),o}function Ae(e){l&&console.error(`${e}`)}function Se(e){return function(e){let o="";try{return o=e!==decodeURIComponent(e),o}catch(e){return!1}}(e)?e:encodeURIComponent(e)}function ke(e){browser.notifications.create(e.substring(0,20),{type:"basic",iconUrl:"icons/icon_64.png",title:browser.i18n.getMessage("extensionName"),message:e})}function Me(e){let o="";return o=-1!==e.indexOf("://")?e.split("://")[0]+"://":"https://",o+e.replace("http://","").replace("https://","").split(/[/?#]/)[0]}function Oe(e){let o=JSON.parse(JSON.stringify(e)),t=Object.keys(e).length,s=[],n=[],r=0;l&&console.log(e);for(let o in e)l&&console.log(`id = ${o}`),Re(e[o].index)&&(e[o].index=t+1,t++),s.push(e[o].index),n.push(o);for(let e=1;e<t+1;e++){r=Math.min(...s);let t=s.indexOf(r);s.splice(t,1),o[n.splice(t,1)].index=e}return o}function Re(e){return"number"!=typeof e&&("string"==typeof e?0===e.trim().length:Array.isArray(e)?0===e.length:"object"==typeof e?null===e||0===Object.keys(e).length:"boolean"!=typeof e&&!e)}function Fe(e){browser.sidebarAction.setPanel({panel:e})}browser.pageAction.onClicked.addListener((function(e){!async function(e,o){const t=e.id;await browser.tabs.sendMessage(t,o).catch((t=>{l&&(console.error(t),console.log(`Failed to send message ${JSON.stringify(o)} to:\n`),console.log(`Tab ${e.id}: ${e.title}\n`))})),l&&(console.log("Successfully sent message to:\n"),console.log(`Tab ${e.id}: ${e.title}\n`))}(e,{action:"getSearchEngine",data:""})})),browser.webRequest.onBeforeSendHeaders.addListener((function(e){if(!N)return{};console.log(`Intercepted header: ${e.requestHeaders}`);for(const o of e.requestHeaders)"user-agent"===o.name.toLowerCase()&&(o.value="Mozilla/5.0 (iPhone; CPU iPhone OS 12_0 like Mac OS X) AppleWebKit/604.1.38 (KHTML, like Gecko) Version/12.0 Mobile/15A372 Safari/604.1");return console.log(`Modified header: ${e.requestHeaders}`),{requestHeaders:e.requestHeaders}}),{tabId:-1,types:["main_frame"],urls:["http://*/*","https://*/*"]},["blocking","requestHeaders"]),browser.runtime.onMessage.addListener((async(e,o)=>{let t,s,r,c,g,d,u="",f="";switch(e.action){case"doSearch":if(u=e.data.id,l&&console.log("Search engine id: "+u),l&&console.log(N),t=(await browser.tabs.query({active:!0,currentWindow:!0}))[0],l&&console.log("Active tab url: "+t.url),g=await browser.tabs.query({currentWindow:!0}),l&&console.log(g),s=g[g.length-1],r=t.index,l&&console.log("Active tab index: "+r),c="multiAfterLastTab"===X?s.index+1:r+1,"multisearch"===u)return void pe(c);if(N)return void ye(u,null);E&&(r=s.index),ye(u,r+1);break;case"notify":G&&ke(e.data);break;case"setSelection":l&&console.log(`Selected text: ${e.data}`),a=e.data;break;case"reset":!async function(){l&&console.log("Resetting extension's preferences and search engines as per user reset preferences.");const e=(await browser.storage.sync.get(null).catch((e=>{l&&(console.error(e),console.log("Failed to retrieve options from storage sync."))}))).options,o=e.forceSearchEnginesReload;l&&console.log("Options:");l&&console.log(e);await j(o),fe()}();break;case"setTargetUrl":e.data&&(i=e.data);break;case"testSearchEngine":!function(e){if(""!=e.url){let o=me(e.url,"test");browser.tabs.create({url:o})}else G&&ke(O)}(e.data);break;case"saveSearchEngines":n=Oe(e.data),l&&console.log(n),await browser.storage.local.clear().catch((e=>{l&&(console.error(e),console.log("Failed to clear local storage."))})),await ie(!1),fe();break;case"addNewSearchEngine":u=e.data.id,f=Me(e.data.searchEngine.url),l&&console.log(u,f),n[u]=e.data.searchEngine,n=Oe(n),await async function(e,o){await browser.storage.local.clear().catch((e=>{l&&(console.error(e),console.log("Failed to clear local storage."))}));const t=await le(e,o);n[e].base64=t.base64,await ie(!1),fe(),G&&ke(A)}(u,f);break;case"updateSearchOptions":d=await z(),l&&console.log(`Preferences retrieved from sync storage: ${JSON.stringify(d)}`),d.exactMatch=e.data.exactMatch,Z(d),await V(d,!0);break;case"updateDisplayFavicons":d=await z(),l&&console.log(`Preferences retrieved from sync storage: ${JSON.stringify(d)}`),d.displayFavicons=e.data.displayFavicons,te(d),await V(d,!0);break;case"updateDisableAltClick":d=await z(),l&&console.log(`Preferences retrieved from sync storage: ${JSON.stringify(d)}`),d.disableAltClick=e.data.disableAltClick,se(d),await V(d,!1);break;case"updateTabMode":d=await z(),l&&console.log(`Preferences retrieved from sync storage: ${JSON.stringify(d)}`),d.tabMode=e.data.tabMode,d.tabActive=e.data.tabActive,d.lastTab=e.data.lastTab,d.privateMode=e.data.privateMode,_(d),await V(d,!1);break;case"updateMultiMode":d=await z(),l&&console.log(`Preferences retrieved from sync storage: ${JSON.stringify(d)}`),d.multiMode=e.data.multiMode,ee(d),await V(d,!1);break;case"updateOptionsMenuLocation":d=await z(),l&&console.log(`Preferences retrieved from sync storage: ${JSON.stringify(d)}`),d.optionsMenuLocation=e.data.optionsMenuLocation,oe(d),await V(d,!0);break;case"updateSiteSearchSetting":d=await z(),l&&console.log(`Preferences retrieved from sync storage: ${JSON.stringify(d)}`),d.siteSearch=e.data.siteSearch,d.siteSearchUrl=e.data.siteSearchUrl,ne(d),await V(d,!0);break;case"updateResetOptions":d=await z(),l&&(console.log("Preferences retrieved from sync storage:"),console.log(d)),d.forceSearchEnginesReload=e.data.resetOptions.forceSearchEnginesReload,d.resetPreferences=e.data.resetOptions.resetPreferences,d.forceFaviconsReload=e.data.resetOptions.forceFaviconsReload,re(d),await V(d,!1);break;case"updateUseRegex":d=await z(),l&&console.log(`Preferences retrieved from sync storage: ${JSON.stringify(d)}`),d.useRegex=e.data.useRegex,ae(d),await V(d,!0);break;case"saveSearchEnginesToDisk":browser.downloads.download({url:e.data,saveAs:!0,filename:"searchEngines.json"});break;case"hidePageAction":browser.pageAction.hide(o.tab.id);break;case"showPageAction":browser.pageAction.show(o.tab.id)}})),browser.omnibox.setDefaultSuggestion({description:x}),browser.omnibox.onInputChanged.addListener(((e,o)=>{if(e.indexOf(" ")>0){let t=ve(e);l&&console.log(JSON.stringify(t)),1===t.length&&o(t)}})),browser.omnibox.onInputEntered.addListener((async t=>{let s,n,r;l&&console.log(t);const a=await browser.tabs.query({currentWindow:!0,active:!0});s=a[0].index,r=a[0].id;const i=await browser.tabs.query({currentWindow:!0});if(E&&(s=i.length+1),l&&console.log(X),n="multiAfterLastTab"===X?i.length+1:s+1,l&&console.log(n),l&&console.log(t.indexOf("://")),t.indexOf("://")>-1)l&&console.log("Processing search..."),xe(t,s);else try{const a=t.split(" ")[0],i=t.replace(a,"").trim(),c=ve(t);switch(a){case".":browser.runtime.openOptionsPage();break;case"!":pe(n);break;case"bookmarks":case"!b":o="recent"===i?await browser.bookmarks.getRecent(10):await browser.bookmarks.search({query:i}),l&&console.log(o),await browser.storage.local.set({bookmarkItems:o,searchTerms:i}),await browser.tabs.create({active:P,index:n,url:"/bookmarks.html"});break;case"history":case"!h":e=await browser.history.search({text:i}),await browser.storage.local.set({historyItems:e,searchTerms:i}),await browser.tabs.create({active:P,index:n,url:"/history.html"});break;default:1===c.length?xe(c[0].content,s):(browser.search.search({query:i,tabId:r}),G&&ke(S))}}catch(e){l&&console.error(e),l&&console.log("Failed to process "+t)}})),async function(){if(l){const e=await browser.storage.sync.getBytesInUse(null).catch((e=>{console.error(e),console.log("Failed to retrieve storage space used by storage sync.")}));console.log(`Bytes used by storage sync: ${e} bytes.`);const o=await browser.storage.local.get(null);console.log(`Bytes used by local storage: ${JSON.stringify(o).length} bytes.`)}G="granted"===(await navigator.permissions.query({name:"notifications"})).state;const e=await async function(){const e=await fetch(browser.runtime.getURL("config.json")),o=await e.json();return o}();t=e.API_URL,s=e.API_KEY,await j(!1),fe()}()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
