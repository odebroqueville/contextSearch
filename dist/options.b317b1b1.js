/**!
 * Sortable 1.15.0
 * @author	RubaXa   <trash@rubaxa.org>
 * @author	owenm    <owen23355@gmail.com>
 * @license MIT
 */
function e(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);t&&(o=o.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,o)}return n}function t(t){for(var n=1;n<arguments.length;n++){var i=null!=arguments[n]?arguments[n]:{};n%2?e(Object(i),!0).forEach((function(e){o(t,e,i[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(i)):e(Object(i)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(i,e))}))}return t}function n(e){return n="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},n(e)}function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(){return i=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var o in n)Object.prototype.hasOwnProperty.call(n,o)&&(e[o]=n[o])}return e},i.apply(this,arguments)}function r(e,t){if(null==e)return{};var n,o,i=function(e,t){if(null==e)return{};var n,o,i={},r=Object.keys(e);for(o=0;o<r.length;o++)n=r[o],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(o=0;o<r.length;o++)n=r[o],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}function a(e){if("undefined"!=typeof window&&window.navigator)return!!navigator.userAgent.match(e)}var l=a(/(?:Trident.*rv[ :]?11\.|msie|iemobile|Windows Phone)/i),s=a(/Edge/i),c=a(/firefox/i),d=a(/safari/i)&&!a(/chrome/i)&&!a(/android/i),u=a(/iP(ad|od|hone)/i),h=a(/chrome/i)&&a(/android/i),p={capture:!1,passive:!1};function g(e,t,n){e.addEventListener(t,n,!l&&p)}function f(e,t,n){e.removeEventListener(t,n,!l&&p)}function m(e,t){if(t){if(">"===t[0]&&(t=t.substring(1)),e)try{if(e.matches)return e.matches(t);if(e.msMatchesSelector)return e.msMatchesSelector(t);if(e.webkitMatchesSelector)return e.webkitMatchesSelector(t)}catch(e){return!1}return!1}}function v(e){return e.host&&e!==document&&e.host.nodeType?e.host:e.parentNode}function b(e,t,n,o){if(e){n=n||document;do{if(null!=t&&(">"===t[0]?e.parentNode===n&&m(e,t):m(e,t))||o&&e===n)return e;if(e===n)break}while(e=v(e))}return null}var y,E=/\s+/g;function w(e,t,n){if(e&&t)if(e.classList)e.classList[n?"add":"remove"](t);else{var o=(" "+e.className+" ").replace(E," ").replace(" "+t+" "," ");e.className=(o+(n?" "+t:"")).replace(E," ")}}function S(e,t,n){var o=e&&e.style;if(o){if(void 0===n)return document.defaultView&&document.defaultView.getComputedStyle?n=document.defaultView.getComputedStyle(e,""):e.currentStyle&&(n=e.currentStyle),void 0===t?n:n[t];t in o||-1!==t.indexOf("webkit")||(t="-webkit-"+t),o[t]=n+("string"==typeof n?"":"px")}}function k(e,t){var n="";if("string"==typeof e)n=e;else do{var o=S(e,"transform");o&&"none"!==o&&(n=o+" "+n)}while(!t&&(e=e.parentNode));var i=window.DOMMatrix||window.WebKitCSSMatrix||window.CSSMatrix||window.MSCSSMatrix;return i&&new i(n)}function A(e,t,n){if(e){var o=e.getElementsByTagName(t),i=0,r=o.length;if(n)for(;i<r;i++)n(o[i],i);return o}return[]}function T(){var e=document.scrollingElement;return e||document.documentElement}function C(e,t,n,o,i){if(e.getBoundingClientRect||e===window){var r,a,s,c,d,u,h;if(e!==window&&e.parentNode&&e!==T()?(a=(r=e.getBoundingClientRect()).top,s=r.left,c=r.bottom,d=r.right,u=r.height,h=r.width):(a=0,s=0,c=window.innerHeight,d=window.innerWidth,u=window.innerHeight,h=window.innerWidth),(t||n)&&e!==window&&(i=i||e.parentNode,!l))do{if(i&&i.getBoundingClientRect&&("none"!==S(i,"transform")||n&&"static"!==S(i,"position"))){var p=i.getBoundingClientRect();a-=p.top+parseInt(S(i,"border-top-width")),s-=p.left+parseInt(S(i,"border-left-width")),c=a+r.height,d=s+r.width;break}}while(i=i.parentNode);if(o&&e!==window){var g=k(i||e),f=g&&g.a,m=g&&g.d;g&&(c=(a/=m)+(u/=m),d=(s/=f)+(h/=f))}return{top:a,left:s,bottom:c,right:d,width:h,height:u}}}function x(e,t,n){for(var o=O(e,!0),i=C(e)[t];o;){var r=C(o)[n];if(!("top"===n||"left"===n?i>=r:i<=r))return o;if(o===T())break;o=O(o,!1)}return!1}function D(e,t,n,o){for(var i=0,r=0,a=e.children;r<a.length;){if("none"!==a[r].style.display&&a[r]!==Pe.ghost&&(o||a[r]!==Pe.dragged)&&b(a[r],n.draggable,e,!1)){if(i===t)return a[r];i++}r++}return null}function I(e,t){for(var n=e.lastElementChild;n&&(n===Pe.ghost||"none"===S(n,"display")||t&&!m(n,t));)n=n.previousElementSibling;return n||null}function _(e,t){var n=0;if(!e||!e.parentNode)return-1;for(;e=e.previousElementSibling;)"TEMPLATE"===e.nodeName.toUpperCase()||e===Pe.clone||t&&!m(e,t)||n++;return n}function N(e){var t=0,n=0,o=T();if(e)do{var i=k(e),r=i.a,a=i.d;t+=e.scrollLeft*r,n+=e.scrollTop*a}while(e!==o&&(e=e.parentNode));return[t,n]}function O(e,t){if(!e||!e.getBoundingClientRect)return T();var n=e,o=!1;do{if(n.clientWidth<n.scrollWidth||n.clientHeight<n.scrollHeight){var i=S(n);if(n.clientWidth<n.scrollWidth&&("auto"==i.overflowX||"scroll"==i.overflowX)||n.clientHeight<n.scrollHeight&&("auto"==i.overflowY||"scroll"==i.overflowY)){if(!n.getBoundingClientRect||n===document.body)return T();if(o||t)return n;o=!0}}}while(n=n.parentNode);return T()}function L(e,t){return Math.round(e.top)===Math.round(t.top)&&Math.round(e.left)===Math.round(t.left)&&Math.round(e.height)===Math.round(t.height)&&Math.round(e.width)===Math.round(t.width)}function M(e,t){return function(){if(!y){var n=arguments;1===n.length?e.call(this,n[0]):e.apply(this,n),y=setTimeout((function(){y=void 0}),t)}}}function B(e,t,n){e.scrollLeft+=t,e.scrollTop+=n}function P(e){var t=window.Polymer,n=window.jQuery||window.Zepto;return t&&t.dom?t.dom(e).cloneNode(!0):n?n(e).clone(!0)[0]:e.cloneNode(!0)}var R="Sortable"+(new Date).getTime();function F(){var e,n=[];return{captureAnimationState:function(){(n=[],this.options.animation)&&[].slice.call(this.el.children).forEach((function(e){if("none"!==S(e,"display")&&e!==Pe.ghost){n.push({target:e,rect:C(e)});var o=t({},n[n.length-1].rect);if(e.thisAnimationDuration){var i=k(e,!0);i&&(o.top-=i.f,o.left-=i.e)}e.fromRect=o}}))},addAnimationState:function(e){n.push(e)},removeAnimationState:function(e){n.splice(function(e,t){for(var n in e)if(e.hasOwnProperty(n))for(var o in t)if(t.hasOwnProperty(o)&&t[o]===e[n][o])return Number(n);return-1}(n,{target:e}),1)},animateAll:function(t){var o=this;if(!this.options.animation)return clearTimeout(e),void("function"==typeof t&&t());var i=!1,r=0;n.forEach((function(e){var t=0,n=e.target,a=n.fromRect,l=C(n),s=n.prevFromRect,c=n.prevToRect,d=e.rect,u=k(n,!0);u&&(l.top-=u.f,l.left-=u.e),n.toRect=l,n.thisAnimationDuration&&L(s,l)&&!L(a,l)&&(d.top-l.top)/(d.left-l.left)==(a.top-l.top)/(a.left-l.left)&&(t=function(e,t,n,o){return Math.sqrt(Math.pow(t.top-e.top,2)+Math.pow(t.left-e.left,2))/Math.sqrt(Math.pow(t.top-n.top,2)+Math.pow(t.left-n.left,2))*o.animation}(d,s,c,o.options)),L(l,a)||(n.prevFromRect=a,n.prevToRect=l,t||(t=o.options.animation),o.animate(n,d,l,t)),t&&(i=!0,r=Math.max(r,t),clearTimeout(n.animationResetTimer),n.animationResetTimer=setTimeout((function(){n.animationTime=0,n.prevFromRect=null,n.fromRect=null,n.prevToRect=null,n.thisAnimationDuration=null}),t),n.thisAnimationDuration=t)})),clearTimeout(e),i?e=setTimeout((function(){"function"==typeof t&&t()}),r):"function"==typeof t&&t(),n=[]},animate:function(e,t,n,o){if(o){S(e,"transition",""),S(e,"transform","");var i=k(this.el),r=i&&i.a,a=i&&i.d,l=(t.left-n.left)/(r||1),s=(t.top-n.top)/(a||1);e.animatingX=!!l,e.animatingY=!!s,S(e,"transform","translate3d("+l+"px,"+s+"px,0)"),this.forRepaintDummy=function(e){return e.offsetWidth}(e),S(e,"transition","transform "+o+"ms"+(this.options.easing?" "+this.options.easing:"")),S(e,"transform","translate3d(0,0,0)"),"number"==typeof e.animated&&clearTimeout(e.animated),e.animated=setTimeout((function(){S(e,"transition",""),S(e,"transform",""),e.animated=!1,e.animatingX=!1,e.animatingY=!1}),o)}}}}var X=[],Y={initializeByDefault:!0},j={mount:function(e){for(var t in Y)Y.hasOwnProperty(t)&&!(t in e)&&(e[t]=Y[t]);X.forEach((function(t){if(t.pluginName===e.pluginName)throw"Sortable: Cannot mount plugin ".concat(e.pluginName," more than once")})),X.push(e)},pluginEvent:function(e,n,o){var i=this;this.eventCanceled=!1,o.cancel=function(){i.eventCanceled=!0};var r=e+"Global";X.forEach((function(i){n[i.pluginName]&&(n[i.pluginName][r]&&n[i.pluginName][r](t({sortable:n},o)),n.options[i.pluginName]&&n[i.pluginName][e]&&n[i.pluginName][e](t({sortable:n},o)))}))},initializePlugins:function(e,t,n,o){for(var r in X.forEach((function(o){var r=o.pluginName;if(e.options[r]||o.initializeByDefault){var a=new o(e,t,e.options);a.sortable=e,a.options=e.options,e[r]=a,i(n,a.defaults)}})),e.options)if(e.options.hasOwnProperty(r)){var a=this.modifyOption(e,r,e.options[r]);void 0!==a&&(e.options[r]=a)}},getEventProperties:function(e,t){var n={};return X.forEach((function(o){"function"==typeof o.eventProperties&&i(n,o.eventProperties.call(t[o.pluginName],e))})),n},modifyOption:function(e,t,n){var o;return X.forEach((function(i){e[i.pluginName]&&i.optionListeners&&"function"==typeof i.optionListeners[t]&&(o=i.optionListeners[t].call(e[i.pluginName],n))})),o}};function W(e){var n=e.sortable,o=e.rootEl,i=e.name,r=e.targetEl,a=e.cloneEl,c=e.toEl,d=e.fromEl,u=e.oldIndex,h=e.newIndex,p=e.oldDraggableIndex,g=e.newDraggableIndex,f=e.originalEvent,m=e.putSortable,v=e.extraEventProperties;if(n=n||o&&o[R]){var b,y=n.options,E="on"+i.charAt(0).toUpperCase()+i.substr(1);!window.CustomEvent||l||s?(b=document.createEvent("Event")).initEvent(i,!0,!0):b=new CustomEvent(i,{bubbles:!0,cancelable:!0}),b.to=c||o,b.from=d||o,b.item=r||o,b.clone=a,b.oldIndex=u,b.newIndex=h,b.oldDraggableIndex=p,b.newDraggableIndex=g,b.originalEvent=f,b.pullMode=m?m.lastPutMode:void 0;var w=t(t({},v),j.getEventProperties(i,n));for(var S in w)b[S]=w[S];o&&o.dispatchEvent(b),y[E]&&y[E].call(n,b)}}var H=["evt"],q=function(e,n){var o=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{},i=o.evt,a=r(o,H);j.pluginEvent.bind(Pe)(e,n,t({dragEl:z,parentEl:V,ghostEl:$,rootEl:J,nextEl:G,lastDownEl:K,cloneEl:Z,cloneHidden:Q,dragStarted:he,putSortable:re,activeSortable:Pe.active,originalEvent:i,oldIndex:ee,oldDraggableIndex:ne,newIndex:te,newDraggableIndex:oe,hideGhostForTarget:Oe,unhideGhostForTarget:Le,cloneNowHidden:function(){Q=!0},cloneNowShown:function(){Q=!1},dispatchSortableEvent:function(e){U({sortable:n,name:e,originalEvent:i})}},a))};function U(e){W(t({putSortable:re,cloneEl:Z,targetEl:z,rootEl:J,oldIndex:ee,oldDraggableIndex:ne,newIndex:te,newDraggableIndex:oe},e))}var z,V,$,J,G,K,Z,Q,ee,te,ne,oe,ie,re,ae,le,se,ce,de,ue,he,pe,ge,fe,me,ve=!1,be=!1,ye=[],Ee=!1,we=!1,Se=[],ke=!1,Ae=[],Te="undefined"!=typeof document,Ce=u,xe=s||l?"cssFloat":"float",De=Te&&!h&&!u&&"draggable"in document.createElement("div"),Ie=function(){if(Te){if(l)return!1;var e=document.createElement("x");return e.style.cssText="pointer-events:auto","auto"===e.style.pointerEvents}}(),_e=function(e,t){var n=S(e),o=parseInt(n.width)-parseInt(n.paddingLeft)-parseInt(n.paddingRight)-parseInt(n.borderLeftWidth)-parseInt(n.borderRightWidth),i=D(e,0,t),r=D(e,1,t),a=i&&S(i),l=r&&S(r),s=a&&parseInt(a.marginLeft)+parseInt(a.marginRight)+C(i).width,c=l&&parseInt(l.marginLeft)+parseInt(l.marginRight)+C(r).width;if("flex"===n.display)return"column"===n.flexDirection||"column-reverse"===n.flexDirection?"vertical":"horizontal";if("grid"===n.display)return n.gridTemplateColumns.split(" ").length<=1?"vertical":"horizontal";if(i&&a.float&&"none"!==a.float){var d="left"===a.float?"left":"right";return!r||"both"!==l.clear&&l.clear!==d?"horizontal":"vertical"}return i&&("block"===a.display||"flex"===a.display||"table"===a.display||"grid"===a.display||s>=o&&"none"===n[xe]||r&&"none"===n[xe]&&s+c>o)?"vertical":"horizontal"},Ne=function(e){function t(e,n){return function(o,i,r,a){var l=o.options.group.name&&i.options.group.name&&o.options.group.name===i.options.group.name;if(null==e&&(n||l))return!0;if(null==e||!1===e)return!1;if(n&&"clone"===e)return e;if("function"==typeof e)return t(e(o,i,r,a),n)(o,i,r,a);var s=(n?o:i).options.group.name;return!0===e||"string"==typeof e&&e===s||e.join&&e.indexOf(s)>-1}}var o={},i=e.group;i&&"object"==n(i)||(i={name:i}),o.name=i.name,o.checkPull=t(i.pull,!0),o.checkPut=t(i.put),o.revertClone=i.revertClone,e.group=o},Oe=function(){!Ie&&$&&S($,"display","none")},Le=function(){!Ie&&$&&S($,"display","")};Te&&!h&&document.addEventListener("click",(function(e){if(be)return e.preventDefault(),e.stopPropagation&&e.stopPropagation(),e.stopImmediatePropagation&&e.stopImmediatePropagation(),be=!1,!1}),!0);var Me=function(e){if(z){e=e.touches?e.touches[0]:e;var t=(i=e.clientX,r=e.clientY,ye.some((function(e){var t=e[R].options.emptyInsertThreshold;if(t&&!I(e)){var n=C(e),o=i>=n.left-t&&i<=n.right+t,l=r>=n.top-t&&r<=n.bottom+t;return o&&l?a=e:void 0}})),a);if(t){var n={};for(var o in e)e.hasOwnProperty(o)&&(n[o]=e[o]);n.target=n.rootEl=t,n.preventDefault=void 0,n.stopPropagation=void 0,t[R]._onDragOver(n)}}var i,r,a},Be=function(e){z&&z.parentNode[R]._isOutsideThisEl(e.target)};function Pe(e,t){if(!e||!e.nodeType||1!==e.nodeType)throw"Sortable: `el` must be an HTMLElement, not ".concat({}.toString.call(e));this.el=e,this.options=t=i({},t),e[R]=this;var n={group:null,sort:!0,disabled:!1,store:null,handle:null,draggable:/^[uo]l$/i.test(e.nodeName)?">li":">*",swapThreshold:1,invertSwap:!1,invertedSwapThreshold:null,removeCloneOnHide:!0,direction:function(){return _e(e,this.options)},ghostClass:"sortable-ghost",chosenClass:"sortable-chosen",dragClass:"sortable-drag",ignore:"a, img",filter:null,preventOnFilter:!0,animation:0,easing:null,setData:function(e,t){e.setData("Text",t.textContent)},dropBubble:!1,dragoverBubble:!1,dataIdAttr:"data-id",delay:0,delayOnTouchOnly:!1,touchStartThreshold:(Number.parseInt?Number:window).parseInt(window.devicePixelRatio,10)||1,forceFallback:!1,fallbackClass:"sortable-fallback",fallbackOnBody:!1,fallbackTolerance:0,fallbackOffset:{x:0,y:0},supportPointer:!1!==Pe.supportPointer&&"PointerEvent"in window&&!d,emptyInsertThreshold:5};for(var o in j.initializePlugins(this,e,n),n)!(o in t)&&(t[o]=n[o]);for(var r in Ne(t),this)"_"===r.charAt(0)&&"function"==typeof this[r]&&(this[r]=this[r].bind(this));this.nativeDraggable=!t.forceFallback&&De,this.nativeDraggable&&(this.options.touchStartThreshold=1),t.supportPointer?g(e,"pointerdown",this._onTapStart):(g(e,"mousedown",this._onTapStart),g(e,"touchstart",this._onTapStart)),this.nativeDraggable&&(g(e,"dragover",this),g(e,"dragenter",this)),ye.push(this.el),t.store&&t.store.get&&this.sort(t.store.get(this)||[]),i(this,F())}function Re(e,t,n,o,i,r,a,c){var d,u,h=e[R],p=h.options.onMove;return!window.CustomEvent||l||s?(d=document.createEvent("Event")).initEvent("move",!0,!0):d=new CustomEvent("move",{bubbles:!0,cancelable:!0}),d.to=t,d.from=e,d.dragged=n,d.draggedRect=o,d.related=i||t,d.relatedRect=r||C(t),d.willInsertAfter=c,d.originalEvent=a,e.dispatchEvent(d),p&&(u=p.call(h,d,a)),u}function Fe(e){e.draggable=!1}function Xe(){ke=!1}function Ye(e){for(var t=e.tagName+e.className+e.src+e.href+e.textContent,n=t.length,o=0;n--;)o+=t.charCodeAt(n);return o.toString(36)}function je(e){return setTimeout(e,0)}function We(e){return clearTimeout(e)}Pe.prototype={constructor:Pe,_isOutsideThisEl:function(e){this.el.contains(e)||e===this.el||(pe=null)},_getDirection:function(e,t){return"function"==typeof this.options.direction?this.options.direction.call(this,e,t,z):this.options.direction},_onTapStart:function(e){if(e.cancelable){var t=this,n=this.el,o=this.options,i=o.preventOnFilter,r=e.type,a=e.touches&&e.touches[0]||e.pointerType&&"touch"===e.pointerType&&e,l=(a||e).target,s=e.target.shadowRoot&&(e.path&&e.path[0]||e.composedPath&&e.composedPath()[0])||l,c=o.filter;if(function(e){Ae.length=0;var t=e.getElementsByTagName("input"),n=t.length;for(;n--;){var o=t[n];o.checked&&Ae.push(o)}}(n),!z&&!(/mousedown|pointerdown/.test(r)&&0!==e.button||o.disabled)&&!s.isContentEditable&&(this.nativeDraggable||!d||!l||"SELECT"!==l.tagName.toUpperCase())&&!((l=b(l,o.draggable,n,!1))&&l.animated||K===l)){if(ee=_(l),ne=_(l,o.draggable),"function"==typeof c){if(c.call(this,e,l,this))return U({sortable:t,rootEl:s,name:"filter",targetEl:l,toEl:n,fromEl:n}),q("filter",t,{evt:e}),void(i&&e.cancelable&&e.preventDefault())}else if(c&&(c=c.split(",").some((function(o){if(o=b(s,o.trim(),n,!1))return U({sortable:t,rootEl:o,name:"filter",targetEl:l,fromEl:n,toEl:n}),q("filter",t,{evt:e}),!0}))))return void(i&&e.cancelable&&e.preventDefault());o.handle&&!b(s,o.handle,n,!1)||this._prepareDragStart(e,a,l)}}},_prepareDragStart:function(e,t,n){var o,i=this,r=i.el,a=i.options,d=r.ownerDocument;if(n&&!z&&n.parentNode===r){var u=C(n);if(J=r,V=(z=n).parentNode,G=z.nextSibling,K=n,ie=a.group,Pe.dragged=z,ae={target:z,clientX:(t||e).clientX,clientY:(t||e).clientY},de=ae.clientX-u.left,ue=ae.clientY-u.top,this._lastX=(t||e).clientX,this._lastY=(t||e).clientY,z.style["will-change"]="all",o=function(){q("delayEnded",i,{evt:e}),Pe.eventCanceled?i._onDrop():(i._disableDelayedDragEvents(),!c&&i.nativeDraggable&&(z.draggable=!0),i._triggerDragStart(e,t),U({sortable:i,name:"choose",originalEvent:e}),w(z,a.chosenClass,!0))},a.ignore.split(",").forEach((function(e){A(z,e.trim(),Fe)})),g(d,"dragover",Me),g(d,"mousemove",Me),g(d,"touchmove",Me),g(d,"mouseup",i._onDrop),g(d,"touchend",i._onDrop),g(d,"touchcancel",i._onDrop),c&&this.nativeDraggable&&(this.options.touchStartThreshold=4,z.draggable=!0),q("delayStart",this,{evt:e}),!a.delay||a.delayOnTouchOnly&&!t||this.nativeDraggable&&(s||l))o();else{if(Pe.eventCanceled)return void this._onDrop();g(d,"mouseup",i._disableDelayedDrag),g(d,"touchend",i._disableDelayedDrag),g(d,"touchcancel",i._disableDelayedDrag),g(d,"mousemove",i._delayedDragTouchMoveHandler),g(d,"touchmove",i._delayedDragTouchMoveHandler),a.supportPointer&&g(d,"pointermove",i._delayedDragTouchMoveHandler),i._dragStartTimer=setTimeout(o,a.delay)}}},_delayedDragTouchMoveHandler:function(e){var t=e.touches?e.touches[0]:e;Math.max(Math.abs(t.clientX-this._lastX),Math.abs(t.clientY-this._lastY))>=Math.floor(this.options.touchStartThreshold/(this.nativeDraggable&&window.devicePixelRatio||1))&&this._disableDelayedDrag()},_disableDelayedDrag:function(){z&&Fe(z),clearTimeout(this._dragStartTimer),this._disableDelayedDragEvents()},_disableDelayedDragEvents:function(){var e=this.el.ownerDocument;f(e,"mouseup",this._disableDelayedDrag),f(e,"touchend",this._disableDelayedDrag),f(e,"touchcancel",this._disableDelayedDrag),f(e,"mousemove",this._delayedDragTouchMoveHandler),f(e,"touchmove",this._delayedDragTouchMoveHandler),f(e,"pointermove",this._delayedDragTouchMoveHandler)},_triggerDragStart:function(e,t){t=t||"touch"==e.pointerType&&e,!this.nativeDraggable||t?this.options.supportPointer?g(document,"pointermove",this._onTouchMove):g(document,t?"touchmove":"mousemove",this._onTouchMove):(g(z,"dragend",this),g(J,"dragstart",this._onDragStart));try{document.selection?je((function(){document.selection.empty()})):window.getSelection().removeAllRanges()}catch(e){}},_dragStarted:function(e,t){if(ve=!1,J&&z){q("dragStarted",this,{evt:t}),this.nativeDraggable&&g(document,"dragover",Be);var n=this.options;!e&&w(z,n.dragClass,!1),w(z,n.ghostClass,!0),Pe.active=this,e&&this._appendGhost(),U({sortable:this,name:"start",originalEvent:t})}else this._nulling()},_emulateDragOver:function(){if(le){this._lastX=le.clientX,this._lastY=le.clientY,Oe();for(var e=document.elementFromPoint(le.clientX,le.clientY),t=e;e&&e.shadowRoot&&(e=e.shadowRoot.elementFromPoint(le.clientX,le.clientY))!==t;)t=e;if(z.parentNode[R]._isOutsideThisEl(e),t)do{if(t[R]){if(t[R]._onDragOver({clientX:le.clientX,clientY:le.clientY,target:e,rootEl:t})&&!this.options.dragoverBubble)break}e=t}while(t=t.parentNode);Le()}},_onTouchMove:function(e){if(ae){var t=this.options,n=t.fallbackTolerance,o=t.fallbackOffset,i=e.touches?e.touches[0]:e,r=$&&k($,!0),a=$&&r&&r.a,l=$&&r&&r.d,s=Ce&&me&&N(me),c=(i.clientX-ae.clientX+o.x)/(a||1)+(s?s[0]-Se[0]:0)/(a||1),d=(i.clientY-ae.clientY+o.y)/(l||1)+(s?s[1]-Se[1]:0)/(l||1);if(!Pe.active&&!ve){if(n&&Math.max(Math.abs(i.clientX-this._lastX),Math.abs(i.clientY-this._lastY))<n)return;this._onDragStart(e,!0)}if($){r?(r.e+=c-(se||0),r.f+=d-(ce||0)):r={a:1,b:0,c:0,d:1,e:c,f:d};var u="matrix(".concat(r.a,",").concat(r.b,",").concat(r.c,",").concat(r.d,",").concat(r.e,",").concat(r.f,")");S($,"webkitTransform",u),S($,"mozTransform",u),S($,"msTransform",u),S($,"transform",u),se=c,ce=d,le=i}e.cancelable&&e.preventDefault()}},_appendGhost:function(){if(!$){var e=this.options.fallbackOnBody?document.body:J,t=C(z,!0,Ce,!0,e),n=this.options;if(Ce){for(me=e;"static"===S(me,"position")&&"none"===S(me,"transform")&&me!==document;)me=me.parentNode;me!==document.body&&me!==document.documentElement?(me===document&&(me=T()),t.top+=me.scrollTop,t.left+=me.scrollLeft):me=T(),Se=N(me)}w($=z.cloneNode(!0),n.ghostClass,!1),w($,n.fallbackClass,!0),w($,n.dragClass,!0),S($,"transition",""),S($,"transform",""),S($,"box-sizing","border-box"),S($,"margin",0),S($,"top",t.top),S($,"left",t.left),S($,"width",t.width),S($,"height",t.height),S($,"opacity","0.8"),S($,"position",Ce?"absolute":"fixed"),S($,"zIndex","100000"),S($,"pointerEvents","none"),Pe.ghost=$,e.appendChild($),S($,"transform-origin",de/parseInt($.style.width)*100+"% "+ue/parseInt($.style.height)*100+"%")}},_onDragStart:function(e,t){var n=this,o=e.dataTransfer,i=n.options;q("dragStart",this,{evt:e}),Pe.eventCanceled?this._onDrop():(q("setupClone",this),Pe.eventCanceled||((Z=P(z)).removeAttribute("id"),Z.draggable=!1,Z.style["will-change"]="",this._hideClone(),w(Z,this.options.chosenClass,!1),Pe.clone=Z),n.cloneId=je((function(){q("clone",n),Pe.eventCanceled||(n.options.removeCloneOnHide||J.insertBefore(Z,z),n._hideClone(),U({sortable:n,name:"clone"}))})),!t&&w(z,i.dragClass,!0),t?(be=!0,n._loopId=setInterval(n._emulateDragOver,50)):(f(document,"mouseup",n._onDrop),f(document,"touchend",n._onDrop),f(document,"touchcancel",n._onDrop),o&&(o.effectAllowed="move",i.setData&&i.setData.call(n,o,z)),g(document,"drop",n),S(z,"transform","translateZ(0)")),ve=!0,n._dragStartId=je(n._dragStarted.bind(n,t,e)),g(document,"selectstart",n),he=!0,d&&S(document.body,"user-select","none"))},_onDragOver:function(e){var n,o,i,r,a=this.el,l=e.target,s=this.options,c=s.group,d=Pe.active,u=ie===c,h=s.sort,p=re||d,g=this,f=!1;if(!ke){if(void 0!==e.preventDefault&&e.cancelable&&e.preventDefault(),l=b(l,s.draggable,a,!0),Y("dragOver"),Pe.eventCanceled)return f;if(z.contains(e.target)||l.animated&&l.animatingX&&l.animatingY||g._ignoreWhileAnimating===l)return W(!1);if(be=!1,d&&!s.disabled&&(u?h||(i=V!==J):re===this||(this.lastPutMode=ie.checkPull(this,d,z,e))&&c.checkPut(this,d,z,e))){if(r="vertical"===this._getDirection(e,l),n=C(z),Y("dragOverValid"),Pe.eventCanceled)return f;if(i)return V=J,j(),this._hideClone(),Y("revert"),Pe.eventCanceled||(G?J.insertBefore(z,G):J.appendChild(z)),W(!0);var m=I(a,s.draggable);if(!m||function(e,t,n){var o=C(I(n.el,n.options.draggable)),i=10;return t?e.clientX>o.right+i||e.clientX<=o.right&&e.clientY>o.bottom&&e.clientX>=o.left:e.clientX>o.right&&e.clientY>o.top||e.clientX<=o.right&&e.clientY>o.bottom+i}(e,r,this)&&!m.animated){if(m===z)return W(!1);if(m&&a===e.target&&(l=m),l&&(o=C(l)),!1!==Re(J,a,z,n,l,o,e,!!l))return j(),m&&m.nextSibling?a.insertBefore(z,m.nextSibling):a.appendChild(z),V=a,H(),W(!0)}else if(m&&function(e,t,n){var o=C(D(n.el,0,n.options,!0)),i=10;return t?e.clientX<o.left-i||e.clientY<o.top&&e.clientX<o.right:e.clientY<o.top-i||e.clientY<o.bottom&&e.clientX<o.left}(e,r,this)){var v=D(a,0,s,!0);if(v===z)return W(!1);if(o=C(l=v),!1!==Re(J,a,z,n,l,o,e,!1))return j(),a.insertBefore(z,v),V=a,H(),W(!0)}else if(l.parentNode===a){o=C(l);var y,E,k,A=z.parentNode!==a,T=!function(e,t,n){var o=n?e.left:e.top,i=n?e.right:e.bottom,r=n?e.width:e.height,a=n?t.left:t.top,l=n?t.right:t.bottom,s=n?t.width:t.height;return o===a||i===l||o+r/2===a+s/2}(z.animated&&z.toRect||n,l.animated&&l.toRect||o,r),N=r?"top":"left",O=x(l,"top","top")||x(z,"top","top"),L=O?O.scrollTop:void 0;if(pe!==l&&(E=o[N],Ee=!1,we=!T&&s.invertSwap||A),y=function(e,t,n,o,i,r,a,l){var s=o?e.clientY:e.clientX,c=o?n.height:n.width,d=o?n.top:n.left,u=o?n.bottom:n.right,h=!1;if(!a)if(l&&fe<c*i){if(!Ee&&(1===ge?s>d+c*r/2:s<u-c*r/2)&&(Ee=!0),Ee)h=!0;else if(1===ge?s<d+fe:s>u-fe)return-ge}else if(s>d+c*(1-i)/2&&s<u-c*(1-i)/2)return function(e){return _(z)<_(e)?1:-1}(t);if((h=h||a)&&(s<d+c*r/2||s>u-c*r/2))return s>d+c/2?1:-1;return 0}(e,l,o,r,T?1:s.swapThreshold,null==s.invertedSwapThreshold?s.swapThreshold:s.invertedSwapThreshold,we,pe===l),0!==y){var M=_(z);do{M-=y,k=V.children[M]}while(k&&("none"===S(k,"display")||k===$))}if(0===y||k===l)return W(!1);pe=l,ge=y;var P=l.nextElementSibling,F=!1,X=Re(J,a,z,n,l,o,e,F=1===y);if(!1!==X)return 1!==X&&-1!==X||(F=1===X),ke=!0,setTimeout(Xe,30),j(),F&&!P?a.appendChild(z):l.parentNode.insertBefore(z,F?P:l),O&&B(O,0,L-O.scrollTop),V=z.parentNode,void 0===E||we||(fe=Math.abs(E-C(l)[N])),H(),W(!0)}if(a.contains(z))return W(!1)}return!1}function Y(s,c){q(s,g,t({evt:e,isOwner:u,axis:r?"vertical":"horizontal",revert:i,dragRect:n,targetRect:o,canSort:h,fromSortable:p,target:l,completed:W,onMove:function(t,o){return Re(J,a,z,n,t,C(t),e,o)},changed:H},c))}function j(){Y("dragOverAnimationCapture"),g.captureAnimationState(),g!==p&&p.captureAnimationState()}function W(t){return Y("dragOverCompleted",{insertion:t}),t&&(u?d._hideClone():d._showClone(g),g!==p&&(w(z,re?re.options.ghostClass:d.options.ghostClass,!1),w(z,s.ghostClass,!0)),re!==g&&g!==Pe.active?re=g:g===Pe.active&&re&&(re=null),p===g&&(g._ignoreWhileAnimating=l),g.animateAll((function(){Y("dragOverAnimationComplete"),g._ignoreWhileAnimating=null})),g!==p&&(p.animateAll(),p._ignoreWhileAnimating=null)),(l===z&&!z.animated||l===a&&!l.animated)&&(pe=null),s.dragoverBubble||e.rootEl||l===document||(z.parentNode[R]._isOutsideThisEl(e.target),!t&&Me(e)),!s.dragoverBubble&&e.stopPropagation&&e.stopPropagation(),f=!0}function H(){te=_(z),oe=_(z,s.draggable),U({sortable:g,name:"change",toEl:a,newIndex:te,newDraggableIndex:oe,originalEvent:e})}},_ignoreWhileAnimating:null,_offMoveEvents:function(){f(document,"mousemove",this._onTouchMove),f(document,"touchmove",this._onTouchMove),f(document,"pointermove",this._onTouchMove),f(document,"dragover",Me),f(document,"mousemove",Me),f(document,"touchmove",Me)},_offUpEvents:function(){var e=this.el.ownerDocument;f(e,"mouseup",this._onDrop),f(e,"touchend",this._onDrop),f(e,"pointerup",this._onDrop),f(e,"touchcancel",this._onDrop),f(document,"selectstart",this)},_onDrop:function(e){var t=this.el,n=this.options;te=_(z),oe=_(z,n.draggable),q("drop",this,{evt:e}),V=z&&z.parentNode,te=_(z),oe=_(z,n.draggable),Pe.eventCanceled||(ve=!1,we=!1,Ee=!1,clearInterval(this._loopId),clearTimeout(this._dragStartTimer),We(this.cloneId),We(this._dragStartId),this.nativeDraggable&&(f(document,"drop",this),f(t,"dragstart",this._onDragStart)),this._offMoveEvents(),this._offUpEvents(),d&&S(document.body,"user-select",""),S(z,"transform",""),e&&(he&&(e.cancelable&&e.preventDefault(),!n.dropBubble&&e.stopPropagation()),$&&$.parentNode&&$.parentNode.removeChild($),(J===V||re&&"clone"!==re.lastPutMode)&&Z&&Z.parentNode&&Z.parentNode.removeChild(Z),z&&(this.nativeDraggable&&f(z,"dragend",this),Fe(z),z.style["will-change"]="",he&&!ve&&w(z,re?re.options.ghostClass:this.options.ghostClass,!1),w(z,this.options.chosenClass,!1),U({sortable:this,name:"unchoose",toEl:V,newIndex:null,newDraggableIndex:null,originalEvent:e}),J!==V?(te>=0&&(U({rootEl:V,name:"add",toEl:V,fromEl:J,originalEvent:e}),U({sortable:this,name:"remove",toEl:V,originalEvent:e}),U({rootEl:V,name:"sort",toEl:V,fromEl:J,originalEvent:e}),U({sortable:this,name:"sort",toEl:V,originalEvent:e})),re&&re.save()):te!==ee&&te>=0&&(U({sortable:this,name:"update",toEl:V,originalEvent:e}),U({sortable:this,name:"sort",toEl:V,originalEvent:e})),Pe.active&&(null!=te&&-1!==te||(te=ee,oe=ne),U({sortable:this,name:"end",toEl:V,originalEvent:e}),this.save())))),this._nulling()},_nulling:function(){q("nulling",this),J=z=V=$=G=Z=K=Q=ae=le=he=te=oe=ee=ne=pe=ge=re=ie=Pe.dragged=Pe.ghost=Pe.clone=Pe.active=null,Ae.forEach((function(e){e.checked=!0})),Ae.length=se=ce=0},handleEvent:function(e){switch(e.type){case"drop":case"dragend":this._onDrop(e);break;case"dragenter":case"dragover":z&&(this._onDragOver(e),function(e){e.dataTransfer&&(e.dataTransfer.dropEffect="move");e.cancelable&&e.preventDefault()}(e));break;case"selectstart":e.preventDefault()}},toArray:function(){for(var e,t=[],n=this.el.children,o=0,i=n.length,r=this.options;o<i;o++)b(e=n[o],r.draggable,this.el,!1)&&t.push(e.getAttribute(r.dataIdAttr)||Ye(e));return t},sort:function(e,t){var n={},o=this.el;this.toArray().forEach((function(e,t){var i=o.children[t];b(i,this.options.draggable,o,!1)&&(n[e]=i)}),this),t&&this.captureAnimationState(),e.forEach((function(e){n[e]&&(o.removeChild(n[e]),o.appendChild(n[e]))})),t&&this.animateAll()},save:function(){var e=this.options.store;e&&e.set&&e.set(this)},closest:function(e,t){return b(e,t||this.options.draggable,this.el,!1)},option:function(e,t){var n=this.options;if(void 0===t)return n[e];var o=j.modifyOption(this,e,t);n[e]=void 0!==o?o:t,"group"===e&&Ne(n)},destroy:function(){q("destroy",this);var e=this.el;e[R]=null,f(e,"mousedown",this._onTapStart),f(e,"touchstart",this._onTapStart),f(e,"pointerdown",this._onTapStart),this.nativeDraggable&&(f(e,"dragover",this),f(e,"dragenter",this)),Array.prototype.forEach.call(e.querySelectorAll("[draggable]"),(function(e){e.removeAttribute("draggable")})),this._onDrop(),this._disableDelayedDragEvents(),ye.splice(ye.indexOf(this.el),1),this.el=e=null},_hideClone:function(){if(!Q){if(q("hideClone",this),Pe.eventCanceled)return;S(Z,"display","none"),this.options.removeCloneOnHide&&Z.parentNode&&Z.parentNode.removeChild(Z),Q=!0}},_showClone:function(e){if("clone"===e.lastPutMode){if(Q){if(q("showClone",this),Pe.eventCanceled)return;z.parentNode!=J||this.options.group.revertClone?G?J.insertBefore(Z,G):J.appendChild(Z):J.insertBefore(Z,z),this.options.group.revertClone&&this.animate(z,Z),S(Z,"display",""),Q=!1}}else this._hideClone()}},Te&&g(document,"touchmove",(function(e){(Pe.active||ve)&&e.cancelable&&e.preventDefault()})),Pe.utils={on:g,off:f,css:S,find:A,is:function(e,t){return!!b(e,t,e,!1)},extend:function(e,t){if(e&&t)for(var n in t)t.hasOwnProperty(n)&&(e[n]=t[n]);return e},throttle:M,closest:b,toggleClass:w,clone:P,index:_,nextTick:je,cancelNextTick:We,detectDirection:_e,getChild:D},Pe.get=function(e){return e[R]},Pe.mount=function(){for(var e=arguments.length,n=new Array(e),o=0;o<e;o++)n[o]=arguments[o];n[0].constructor===Array&&(n=n[0]),n.forEach((function(e){if(!e.prototype||!e.prototype.constructor)throw"Sortable: Mounted plugin must be a constructor function, not ".concat({}.toString.call(e));e.utils&&(Pe.utils=t(t({},Pe.utils),e.utils)),j.mount(e)}))},Pe.create=function(e,t){return new Pe(e,t)},Pe.version="1.15.0";var He,qe,Ue,ze,Ve,$e,Je=[],Ge=!1;function Ke(){Je.forEach((function(e){clearInterval(e.pid)})),Je=[]}function Ze(){clearInterval($e)}var Qe=M((function(e,t,n,o){if(t.scroll){var i,r=(e.touches?e.touches[0]:e).clientX,a=(e.touches?e.touches[0]:e).clientY,l=t.scrollSensitivity,s=t.scrollSpeed,c=T(),d=!1;qe!==n&&(qe=n,Ke(),He=t.scroll,i=t.scrollFn,!0===He&&(He=O(n,!0)));var u=0,h=He;do{var p=h,g=C(p),f=g.top,m=g.bottom,v=g.left,b=g.right,y=g.width,E=g.height,w=void 0,k=void 0,A=p.scrollWidth,x=p.scrollHeight,D=S(p),I=p.scrollLeft,_=p.scrollTop;p===c?(w=y<A&&("auto"===D.overflowX||"scroll"===D.overflowX||"visible"===D.overflowX),k=E<x&&("auto"===D.overflowY||"scroll"===D.overflowY||"visible"===D.overflowY)):(w=y<A&&("auto"===D.overflowX||"scroll"===D.overflowX),k=E<x&&("auto"===D.overflowY||"scroll"===D.overflowY));var N=w&&(Math.abs(b-r)<=l&&I+y<A)-(Math.abs(v-r)<=l&&!!I),L=k&&(Math.abs(m-a)<=l&&_+E<x)-(Math.abs(f-a)<=l&&!!_);if(!Je[u])for(var M=0;M<=u;M++)Je[M]||(Je[M]={});Je[u].vx==N&&Je[u].vy==L&&Je[u].el===p||(Je[u].el=p,Je[u].vx=N,Je[u].vy=L,clearInterval(Je[u].pid),0==N&&0==L||(d=!0,Je[u].pid=setInterval(function(){o&&0===this.layer&&Pe.active._onTouchMove(Ve);var t=Je[this.layer].vy?Je[this.layer].vy*s:0,n=Je[this.layer].vx?Je[this.layer].vx*s:0;"function"==typeof i&&"continue"!==i.call(Pe.dragged.parentNode[R],n,t,e,Ve,Je[this.layer].el)||B(Je[this.layer].el,n,t)}.bind({layer:u}),24))),u++}while(t.bubbleScroll&&h!==c&&(h=O(h,!1)));Ge=d}}),30),et=function(e){var t=e.originalEvent,n=e.putSortable,o=e.dragEl,i=e.activeSortable,r=e.dispatchSortableEvent,a=e.hideGhostForTarget,l=e.unhideGhostForTarget;if(t){var s=n||i;a();var c=t.changedTouches&&t.changedTouches.length?t.changedTouches[0]:t,d=document.elementFromPoint(c.clientX,c.clientY);l(),s&&!s.el.contains(d)&&(r("spill"),this.onSpill({dragEl:o,putSortable:n}))}};function tt(){}function nt(){}tt.prototype={startIndex:null,dragStart:function(e){var t=e.oldDraggableIndex;this.startIndex=t},onSpill:function(e){var t=e.dragEl,n=e.putSortable;this.sortable.captureAnimationState(),n&&n.captureAnimationState();var o=D(this.sortable.el,this.startIndex,this.options);o?this.sortable.el.insertBefore(t,o):this.sortable.el.appendChild(t),this.sortable.animateAll(),n&&n.animateAll()},drop:et},i(tt,{pluginName:"revertOnSpill"}),nt.prototype={onSpill:function(e){var t=e.dragEl,n=e.putSortable||this.sortable;n.captureAnimationState(),t.parentNode&&t.parentNode.removeChild(t),n.animateAll()},drop:et},i(nt,{pluginName:"removeOnSpill"});Pe.mount(new function(){function e(){for(var e in this.defaults={scroll:!0,forceAutoScrollFallback:!1,scrollSensitivity:30,scrollSpeed:10,bubbleScroll:!0},this)"_"===e.charAt(0)&&"function"==typeof this[e]&&(this[e]=this[e].bind(this))}return e.prototype={dragStarted:function(e){var t=e.originalEvent;this.sortable.nativeDraggable?g(document,"dragover",this._handleAutoScroll):this.options.supportPointer?g(document,"pointermove",this._handleFallbackAutoScroll):t.touches?g(document,"touchmove",this._handleFallbackAutoScroll):g(document,"mousemove",this._handleFallbackAutoScroll)},dragOverCompleted:function(e){var t=e.originalEvent;this.options.dragOverBubble||t.rootEl||this._handleAutoScroll(t)},drop:function(){this.sortable.nativeDraggable?f(document,"dragover",this._handleAutoScroll):(f(document,"pointermove",this._handleFallbackAutoScroll),f(document,"touchmove",this._handleFallbackAutoScroll),f(document,"mousemove",this._handleFallbackAutoScroll)),Ze(),Ke(),clearTimeout(y),y=void 0},nulling:function(){Ve=qe=He=Ge=$e=Ue=ze=null,Je.length=0},_handleFallbackAutoScroll:function(e){this._handleAutoScroll(e,!0)},_handleAutoScroll:function(e,t){var n=this,o=(e.touches?e.touches[0]:e).clientX,i=(e.touches?e.touches[0]:e).clientY,r=document.elementFromPoint(o,i);if(Ve=e,t||this.options.forceAutoScrollFallback||s||l||d){Qe(e,this.options,r,t);var a=O(r,!0);!Ge||$e&&o===Ue&&i===ze||($e&&Ze(),$e=setInterval((function(){var r=O(document.elementFromPoint(o,i),!0);r!==a&&(a=r,Ke()),Qe(e,n.options,r,t)}),10),Ue=o,ze=i)}else{if(!this.options.bubbleScroll||O(r,!0)===T())return void Ke();Qe(e,this.options,O(r,!1),!1)}}},i(e,{pluginName:"scroll",initializeByDefault:!0})}),Pe.mount(nt,tt);var ot=Pe;const it=!1,rt=/[\s\S]*/i,at=function(){const e=window.navigator.userAgent,t=window.navigator.platform;return t.toLowerCase().startsWith("mac")?"macOS":t.toLowerCase().startsWith("ip")?"iOS":t.toLowerCase().startsWith("win")?"Windows":/Android/.test(e)?"Android":/Linux/.test(t)?"Linux":null}(),lt=["Control","Shift","Alt","Meta"];let st="";st="macOS"===at?"cmd+":"Windows"===at?"win+":"Linux"===at?"super+":"meta+";const ct=document.getElementById("container"),dt=document.getElementById("show"),ut=document.getElementById("name"),ht=document.getElementById("keyword"),pt=document.getElementById("multitab"),gt=document.getElementById("url"),ft=document.getElementById("regex"),mt=document.getElementById("kb-shortcut"),vt=(document.getElementById("folderName"),document.getElementById("folderKeyword"),document.getElementById("exactMatch")),bt=document.getElementById("openNewTab"),yt=document.getElementById("sameTab"),Et=document.getElementById("openNewWindow"),wt=document.getElementById("openSidebar"),St=document.getElementById("tabMode"),kt=document.getElementById("tabActive"),At=document.getElementById("privateMode"),Tt=document.getElementById("active"),Ct=document.getElementById("position"),xt=document.getElementById("privacy"),Dt=document.getElementById("lastTab"),It=document.getElementById("optionsMenuLocation"),_t=document.getElementById("displayExifSummary"),Nt=document.getElementById("displayFavicons"),Ot=document.getElementById("disableAltClick"),Lt=document.getElementById("resetPreferences"),Mt=document.getElementById("forceSearchEnginesReload"),Bt=document.getElementById("forceFaviconsReload"),Pt=document.getElementById("siteSearch"),Rt=document.getElementById("useRegex"),Ft=document.getElementById("multiNewWindow"),Xt=document.getElementById("multiActiveTab"),Yt=document.getElementById("multiAfterLastTab"),jt=document.getElementById("multiMode"),Wt=document.getElementById("clearAll"),Ht=document.getElementById("selectAll"),qt=document.getElementById("sortAlphabetically"),Ut=document.getElementById("showAdvancedFeatures"),zt=document.getElementById("hideAdvancedFeatures"),Vt=document.getElementById("reset"),$t=document.getElementById("test"),Jt=document.getElementById("addSearchEngine"),Gt=document.getElementById("clearAddSearchEngine"),Kt=(document.getElementById("addFolder"),document.getElementById("clearAddFolder"),document.getElementById("download")),Zt=document.getElementById("upload"),Qt=browser.i18n.getMessage("remove"),en=browser.i18n.getMessage("folder"),tn=browser.i18n.getMessage("multipleSearchEnginesSearch"),nn=browser.i18n.getMessage("titleShowEngine"),on=browser.i18n.getMessage("searchEngineName"),rn=browser.i18n.getMessage("placeHolderKeyword"),an=browser.i18n.getMessage("placeHolderKeyboardShortcut"),ln=browser.i18n.getMessage("notifySearchEngineUrlRequired");let sn,cn,dn,un,hn,pn,gn,fn,mn,vn,bn,yn,En=1500,wn=0,Sn={},kn={};async function An(e,t){await browser.runtime.sendMessage({action:e,data:JSON.parse(JSON.stringify(t))}).catch((e=>{it&&console.error(e)}))}function Tn(e){it&&console.log(`${e}`)}function Cn(e){e.stopPropagation(),function(e){let t=e.target.closest("li");if(!t)return;let n=t.getAttribute("id"),o=t.parentNode;it&&console.log(n);o.removeChild(t),delete Sn[n],it&&console.log(Sn);An("saveSearchEngines",Sn)}(e)}function xn(){if("none"!=Ut.style.display){Ut.style.display="none",zt.style.display="block";for(let e of document.querySelectorAll(".regex"))e.style.display="inline-block"}else{Ut.style.display="block",zt.style.display="none";for(let e of document.querySelectorAll(".regex"))e.style.display="none"}}function Dn(){const e=document.getElementById("searchEngines");Zn(e)||ct.removeChild(e),Sn=function(e){let t=JSON.parse(JSON.stringify(e)),n=Object.keys(e).length,o=[],i=[],r=0;it&&console.log(e);for(let t in e)it&&console.log(`id = ${t}`),Zn(e[t].index)&&(e[t].index=n+1,n++),o.push(e[t].index),i.push(t);for(let e=1;e<n+1;e++){r=Math.min(...o);let n=o.indexOf(r);o.splice(n,1),t[i.splice(n,1)].index=e}return t}(Sn),wn=Object.keys(Sn).length;let t=document.createElement("ol");t.setAttribute("id","searchEngines");for(let e=0;e<wn+1;e++)for(let n in Sn)if(Sn[n].index===e){let e=Sn[n],o=_n(n,e,e.folder);t.appendChild(o),e.folder&&e.searchEngines&&e.searchEngines.forEach((e=>{let t=_n(e.id,e,!1);o.querySelector(".subfolder").appendChild(t)}))}ct.appendChild(t),wn=t.childNodes.length,new ot(t,{group:"nested",handle:".sort",animation:200,fallbackOnBody:!0,onEnd:Hn})}function In(e,t,n){let o=document.createElement("button"),i=document.createElement("i");return o.setAttribute("type","button"),o.setAttribute("class",t),o.setAttribute("title",n),i.setAttribute("class","icon "+e),o.appendChild(i),o}function _n(e,t,n=!1){if(n)return Nn(t.name,t.keyword);const o=t.name,i=document.createElement("li"),r=document.createElement("input"),a=document.createElement("input"),l=document.createElement("input"),s=document.createElement("input"),c=document.createElement("input"),d=document.createElement("input"),u=document.createElement("input"),h=document.createElement("i");h.classList.add("sort","icon","ion-arrow-move");const p=In("ion-ios-trash","remove",Qt+" "+o);return r.addEventListener("click",Mn),a.addEventListener("cut",Bn),a.addEventListener("paste",Bn),a.addEventListener("input",(e=>{gn=e,clearTimeout(sn),sn=setTimeout(Bn,En)})),a.addEventListener("change",(e=>{gn=e,clearTimeout(sn),Bn()})),l.addEventListener("paste",Rn),l.addEventListener("change",Rn),l.addEventListener("keyup",(()=>{clearTimeout(cn),cn=setTimeout(Rn,En)})),l.addEventListener("keydown",(e=>{fn=e,clearTimeout(cn)})),s.addEventListener("keyup",Xn),s.addEventListener("keydown",(e=>{kn[e.key]=[!0,e.code],it&&console.log(kn)})),c.addEventListener("click",Yn),d.addEventListener("paste",jn),d.addEventListener("change",jn),d.addEventListener("keyup",(()=>{clearTimeout(hn),hn=setTimeout(jn,En)})),d.addEventListener("keydown",(e=>{bn=e,clearTimeout(hn)})),u.addEventListener("paste",Wn),u.addEventListener("change",Wn),u.addEventListener("keyup",(()=>{clearTimeout(pn),pn=setTimeout(Wn,En)})),u.addEventListener("keydown",(e=>{yn=e,clearTimeout(pn)})),p.addEventListener("click",Cn),i.setAttribute("id",e),r.setAttribute("type","checkbox"),r.setAttribute("title",nn),r.setAttribute("id",e+"-chk"),r.checked=t.show,a.setAttribute("type","text"),a.setAttribute("id",e+"-name"),a.setAttribute("placeholder",on),a.setAttribute("value",o),l.setAttribute("type","text"),l.setAttribute("id",e+"-kw"),l.setAttribute("class","keyword"),l.setAttribute("placeholder",rn),l.setAttribute("value",t.keyword),s.setAttribute("type","text"),s.setAttribute("id",e+"-kbsc"),s.setAttribute("class","kb-shortcut"),s.setAttribute("placeholder",an),s.setAttribute("value",t.keyboardShortcut),c.setAttribute("type","checkbox"),c.setAttribute("id",e+"-mt"),c.setAttribute("title",tn),c.checked=t.multitab,d.setAttribute("type","url"),d.setAttribute("value",t.url),u.setAttribute("type","text"),u.setAttribute("class","regex"),Zn(t.regex)?u.setAttribute("value",rt.toString()):u.setAttribute("value","/"+t.regex.body+"/"+t.regex.flags),i.appendChild(r),i.appendChild(a),i.appendChild(l),i.appendChild(s),i.appendChild(c),i.appendChild(d),i.appendChild(u),i.appendChild(h),i.appendChild(p),i}function Nn(e,t){const n=document.getElementById("ol#searchEngines"),o=document.createElement("li"),i=document.createElement("span"),r=document.createElement("input"),a=document.createElement("input"),l=document.createElement("div");r.addEventListener("cut",Pn),r.addEventListener("paste",Pn),r.addEventListener("input",(e=>{vn=e,clearTimeout(dn),dn=setTimeout(Pn,En)})),r.addEventListener("change",(e=>{vn=e,clearTimeout(dn),Pn()})),a.addEventListener("paste",Fn),a.addEventListener("change",Fn),a.addEventListener("keyup",(()=>{clearTimeout(un),un=setTimeout(Fn,En)})),a.addEventListener("keydown",(e=>{mn=e,clearTimeout(un)}));const s=document.createElement("div");s.setAttribute("class","nav");const c=document.createElement("span");c.classList.add("sort","icon","ion-arrow-move");const d=In("ion-ios-trash","remove",`${Qt} ${e} ${en}`);return s.appendChild(c),s.appendChild(d),o.setAttribute("id",e),o.setAttribute("class","folder"),i.setAttribute("class","icon ion-folder"),r.setAttribute("type","text"),r.setAttribute("data-i18n-placeholder","folderName"),r.setAttribute("value",e),a.setAttribute("type","text"),a.setAttribute("class","keyword"),a.setAttribute("data-i18n-placeholder","placeholderKeyword"),a.setAttribute("value",t),l.setAttribute("class","subfolder"),o.appendChild(i),o.appendChild(r),o.appendChild(a),o.appendChild(s),o.appendChild(l),new ot(n.querySelector(".subfolder"),{group:"nested",animation:200,fallbackOnBody:!0,onEnd:Hn}),o}function On(e){it&&console.log(`Response from background script: ${e.response}`),"resetCompleted"===e.response&&zn()}function Ln(e){it&&console.error(e)}function Mn(e){let t=e.target.parentNode.getAttribute("id"),n=e.target.checked;Sn[t].show=n,An("saveSearchEngines",Sn)}function Bn(e){if(e&&e.target.value==gn.target.value)return;let t=e||gn;if(!t)return;let n=t.target.parentNode.getAttribute("id"),o=t.target.value;Sn[n].name=o,An("saveSearchEngines",Sn)}function Pn(e){if(e&&e.target.value==vn.target.value)return;let t=e||vn;if(!t)return;let n=t.target.parentNode.getAttribute("id"),o=t.target.value;Sn[n].name=o,An("saveSearchEngines",Sn)}function Rn(e){if(e&&e.target.value==fn.target.value)return;let t=e||fn;if(!t)return;let n=t.target.parentNode.getAttribute("id"),o=t.target.value;Sn[n].keyword=o,An("saveSearchEngines",Sn)}function Fn(e){if(e&&e.target.value==mn.target.value)return;let t=e||mn;if(!t)return;let n=t.target.parentNode.getAttribute("id"),o=t.target.value;Sn[n].keyword=o,An("saveSearchEngines",Sn)}function Xn(e){if("INPUT"!==e.target.nodeName)return;if("macOS"===at&&e.metaKey||("Windows"===at||"Linux"===at)&&e.ctrlKey)return;e.preventDefault(),it&&console.log(at),it&&console.log(kn);let t=e.target.parentNode.getAttribute("id"),n=document.getElementById(t+"-kbsc"),o="";it&&console.log(e);for(let e=0;e<lt.length;e++){const t=lt[e];if(it&&console.log(t),t in kn){switch(t){case"Control":o+="ctrl+";break;case"Shift":o+="shift+";break;case"Alt":o+="alt+";break;case"Meta":o+=st}delete kn[t]}}it&&console.log(`keys pressed: ${o}`),it&&console.log("remaining keys down: "),it&&console.log(kn);for(let e in kn)it&&console.log(e),"macOS"===at&&o.includes("alt")?o+=kn[e][1].substring(3).toLowerCase():o+=e.toLowerCase();n.value=o,kn={},Sn[t].keyboardShortcut=o,An("saveSearchEngines",Sn)}function Yn(e){it&&console.log(Sn),it&&console.log(e.target);let t=e.target.parentNode.getAttribute("id"),n=e.target.checked;Sn[t].multitab=n,An("saveSearchEngines",Sn)}function jn(e){if(e&&e.target.value==bn.target.value)return;let t=e||bn;if(!t)return;let n=t.target.parentNode.getAttribute("id"),o=t.target.value;Sn[n].url=o,An("saveSearchEngines",Sn)}function Wn(e){if(e&&e.target.value==yn.target.value)return;const t=e||yn;if(!t)return;const n=t.target.parentNode.getAttribute("id"),o=t.target.value,i=o.lastIndexOf("/"),r=o.slice(1,i),a=o.split("/").pop();Sn[n].regex={},Sn[n].regex.body=r,Sn[n].regex.flags=a,An("saveSearchEngines",Sn)}function Hn(){it&&console.log("Search Engines BEFORE SAVE:\n",Sn),Sn=function(){let e={};e=Sn,Sn={};let t=document.getElementById("searchEngines").childNodes;wn=t.length;for(let n=0;n<wn;n++){let o=t[n].firstChild;if(null!=o&&"INPUT"===o.nodeName&&"checkbox"===o.getAttribute("type")){let i=o.nextSibling,r=i.nextSibling,a=r.nextSibling,l=a.nextSibling,s=l.nextSibling,c=s.nextSibling;Sn[t[n].id]={},Sn[t[n].id].index=n,Sn[t[n].id].name=i.value,Sn[t[n].id].keyword=r.value,Sn[t[n].id].keyboardShortcut=a.value,Sn[t[n].id].multitab=l.checked,Sn[t[n].id].url=s.value,Sn[t[n].id].regex={},Sn[t[n].id].regex.body=c.value.split("/")[1],Sn[t[n].id].regex.flags=c.value.split("/").pop(),Sn[t[n].id].show=o.checked,Sn[t[n].id].base64=e[t[n].id].base64}else if(t[n].classList.contains("folder")){let e={index:n,name:t[n].id,keyword:t[n].querySelector("input.keyword").value,folder:!0,searchEngines:[]};t[n].querySelectorAll("li").forEach((t=>{e.searchEngines.push({index:n,name:t.id,keyword:t.querySelector("input.keyword").value,multitab:t.querySelector('input[id$="-mt"]'),url:t.querySelector('input[type="url"]').value,show:t.firstChild.checked})})),Sn[t[n].id]=e}}return Sn}(),it&&console.log("Search Engines AFTER SAVE:\n",Sn),An("saveSearchEngines",Sn)}function qn(){dt.checked=!0,ut.value=null,ht.value=null,mt.value=null,pt.checked=!1,gt.value=null,ft.value=null}function Un(e){if(!Zn(e)){switch(it&&(console.log("Preferences retrieved from sync storage:\n"),console.log(e)),!0===e.exactMatch?vt.checked=!0:vt.checked=!1,e.tabMode){case"openNewTab":default:bt.checked=!0,Tt.style.visibility="visible",Ct.style.visibility="visible",xt.style.visibility="hidden";break;case"sameTab":yt.checked=!0,Tt.style.visibility="hidden",Ct.style.visibility="hidden",xt.style.visibility="hidden";break;case"openNewWindow":Et.checked=!0,Tt.style.visibility="visible",Ct.style.visibility="hidden",xt.style.visibility="visible";break;case"openSidebar":wt.checked=!0,Tt.style.visibility="hidden",Ct.style.visibility="hidden",xt.style.visibility="hidden"}switch(!0===e.tabActive?kt.checked=!0:kt.checked=!1,!0===e.lastTab?Dt.checked=!0:Dt.checked=!1,!0===e.privateMode?At.checked=!0:At.checked=!1,"top"===e.optionsMenuLocation||"bottom"===e.optionsMenuLocation||"none"===e.optionsMenuLocation?It.value=e.optionsMenuLocation:It.value="bottom",!1===e.displayFavicons?Nt.checked=!1:Nt.checked=!0,!1===e.displayExifSummary?_t.checked=!1:_t.checked=!0,Ot.checked=e.disableAltClick||!1,!1===e.resetPreferences?Lt.checked=!1:Lt.checked=!0,!1===e.forceSearchEnginesReload?Mt.checked=!1:Mt.checked=!0,!1===e.forceFaviconsReload?Bt.checked=!1:Bt.checked=!0,!0===e.useRegex?Rt.checked=!0:Rt.checked=!1,e.multiMode){case"multiNewWindow":Ft.checked=!0;break;case"multiActiveTab":Xt.checked=!0;break;case"multiAfterLastTab":Yt.checked=!0}Pt.value=e.siteSearch||"Google"}}async function zn(){try{const e=(await browser.storage.sync.get(null)).options;Sn=await browser.storage.local.get(null),it&&(console.log("Search engines retrieved from local storage:\n"),console.log(Sn)),Dn(),Zn(e)||Un(e),it&&(console.log(e),console.log("Options have been reset."))}catch(e){it&&console.error(e)}}function Vn(){yt.checked||wt.checked?(Tt.style.visibility="hidden",Ct.style.visibility="hidden",xt.style.visibility="hidden"):(Tt.style.visibility="visible",Et.checked?(Ct.style.visibility="hidden",xt.style.visibility="visible"):(Ct.style.visibility="visible",xt.style.visibility="hidden"));let e={};e.tabMode=document.querySelector('input[name="results"]:checked').value,e.tabActive=kt.checked,e.lastTab=Dt.checked,e.privateMode=At.checked,An("updateTabMode",e)}function $n(){An("updateResetOptions",{resetOptions:{forceSearchEnginesReload:Mt.checked,resetPreferences:Lt.checked,forceFaviconsReload:Bt.checked}})}function Jn(e,t){return e-t}function Gn(e,t){return e.toLowerCase().localeCompare(t.toLowerCase())}function Kn(e,t){let n=document.querySelectorAll("["+e+"]");for(let o in n)try{if(null==n[o].getAttribute)continue;let i=n[o].getAttribute(e),r=browser.i18n.getMessage(i);switch(t){case"textContent":n[o].textContent=r;break;case"placeholder":n[o].placeholder=r;break;case"title":n[o].title=r}}catch(e){it&&console.error(`Translation for ${n[o]} could not be found`)}}function Zn(e){return"number"!=typeof e&&("string"==typeof e?0===e.trim().length:Array.isArray(e)?0===e.length:"object"==typeof e?null===e||0===Object.keys(e).length:"boolean"!=typeof e&&!e)}document.addEventListener("DOMContentLoaded",zn),browser.storage.onChanged.addListener((function(e,t){if("local"===t){let t=JSON.parse(JSON.stringify(Sn));Sn={};let n=Object.keys(e);it&&(console.log(e),console.log(n));for(let t of n)void 0!==e[t].newValue&&(it&&console.log(t),Sn[t]=e[t].newValue,it&&(console.log(`Search engine ${t}:\n`),console.log(Sn[t])));!Object.keys(Sn).length>0&&(Sn=t),it&&console.log(Sn),Dn()}else if("sync"===t){let t={},n=Object.keys(e);it&&(console.log(e),console.log(n));for(let o of n)void 0!==e[o].newValue&&(t[o]=e[o].newValue),it&&(console.log(o),console.log(e[o].newValue),console.log("---------------------------------------"));it&&console.log(t);const o=t.options;Zn(o)||Un(o)}})),vt.addEventListener("click",(function(){An("updateSearchOptions",{exactMatch:vt.checked})})),Nt.addEventListener("click",(function(){An("updateDisplayFavicons",{displayFavicons:Nt.checked})})),Ot.addEventListener("click",(function(){An("updateDisableAltClick",{disableAltClick:Ot.checked})})),St.addEventListener("click",Vn),kt.addEventListener("click",Vn),Dt.addEventListener("click",Vn),At.addEventListener("click",Vn),It.addEventListener("click",(function(){An("updateOptionsMenuLocation",{optionsMenuLocation:It.value})})),_t.addEventListener("click",(function(){An("updateDisplayExifSummary",{displayExifSummary:_t.checked})})),Pt.addEventListener("change",(function(){An("updateSiteSearchSetting",{siteSearch:Pt.value,siteSearchUrl:Pt.selectedOptions[0].dataset.url})})),Lt.addEventListener("click",$n),Mt.addEventListener("click",$n),Bt.addEventListener("click",$n),Rt.addEventListener("click",(function(){An("updateUseRegex",{useRegex:Rt.checked})})),jt.addEventListener("click",(function(){let e={};e.multiMode=document.querySelector('input[name="ms_results"]:checked').value,An("updateMultiMode",e)})),Wt.addEventListener("click",(function(){let e=document.getElementById("searchEngines").childNodes;for(let t=0;t<e.length;t++){let n=e[t].firstChild;null!=n&&"INPUT"==n.nodeName&&"checkbox"==n.getAttribute("type")&&(n.checked=!1)}Hn()})),Ht.addEventListener("click",(function(){let e=document.getElementById("searchEngines").childNodes;for(let t=0;t<e.length;t++){let n=e[t].firstChild;null!=n&&"INPUT"==n.nodeName&&"checkbox"==n.getAttribute("type")&&(n.checked=!0)}Hn()})),qt.addEventListener("click",(function(){let e=[],t=0;for(let t in Sn)e.push(Sn[t].name);e=function(e){let t=[],n=[];for(let o of e)isNaN(Number(o))?n.push(o):t.push(Number(o));return t=t.sort(Jn),n=n.sort(Gn),t.concat(n)}(e),it&&console.log(e);for(let n of e)for(let e in Sn)Sn[e].name==n&&(Sn[e].index=t,t++);Dn(),Hn()})),Ut.addEventListener("click",xn),zt.addEventListener("click",xn),Vt.addEventListener("click",(function(){An("reset",null).then(On,Ln)})),$t.addEventListener("click",(function(){An("testSearchEngine",{url:document.getElementById("url").value})})),Jt.addEventListener("click",(function(){const e=ut.value.replace(" ","-").toLowerCase(),t=document.getElementById("searchEngines"),n=ft.value.split("/")[1],o=ft.value.split("/").pop();let i=gt.value,r="";i.startsWith("https://")||(i.startsWith("http://")?i.replace("http://","https://"):i+="https://"+i);r=i.includes("{searchTerms}")?i.replace("{searchTerms}","test"):i.includes("%s")?i.replace("%s","test"):i+"test";if(gt.validity.typeMismatch||!function(e){try{return new URL(e),!0}catch(e){return!1}}(r))return void An("notify",ln);Sn[e]={index:wn,name:ut.value,keyword:ht.value,keyboardShortcut:mt.value,multitab:pt.checked,url:gt.value,show:dt.checked,parentFolder:null},Sn[e].regex={},Sn[e].regex.body=n,Sn[e].regex.flags=o,it&&console.log("New search engine: "+e+"\n"+JSON.stringify(Sn[e]));const a=_n(e,Sn[e],!1);t.appendChild(a),An("addNewSearchEngine",{id:e,searchEngine:Sn[e]}),qn()})),Gt.addEventListener("click",qn),Kt.addEventListener("click",(function(){Hn();let e=new Blob([JSON.stringify(Sn,null,2)],{type:"text/json",name:"searchEngines.json"});An("saveSearchEnginesToDisk",window.URL.createObjectURL(e))})),Zt.addEventListener("change",(function(){browser.storage.local.clear().then((()=>{let e=document.getElementById("upload").files[0],t=new FileReader;t.onload=function(e){Sn=JSON.parse(e.target.result),Dn(),Hn()},t.readAsText(e)}),Tn)})),Kn("data-i18n","textContent"),Kn("data-i18n-placeholder","placeholder"),Kn("data-i18n-title","title");
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJtYXBwaW5ncyI6Ijs7Ozs7O0FBTUEsU0FBU0EsRUFBUUMsRUFBUUMsR0FDdkIsSUFBSUMsRUFBT0MsT0FBT0QsS0FBS0YsR0FFdkIsR0FBSUcsT0FBT0Msc0JBQXVCLENBQ2hDLElBQUlDLEVBQVVGLE9BQU9DLHNCQUFzQkosR0FFdkNDLElBQ0ZJLEVBQVVBLEVBQVFDLFFBQU8sU0FBVUMsR0FDakMsT0FBT0osT0FBT0sseUJBQXlCUixFQUFRTyxHQUFLRSxVQUN0RCxLQUdGUCxFQUFLUSxLQUFLQyxNQUFNVCxFQUFNRyxFQUN4QixDQUVBLE9BQU9ILENBQ1QsQ0FFQSxTQUFTVSxFQUFlQyxHQUN0QixJQUFLLElBQUlDLEVBQUksRUFBR0EsRUFBSUMsVUFBVUMsT0FBUUYsSUFBSyxDQUN6QyxJQUFJRyxFQUF5QixNQUFoQkYsVUFBVUQsR0FBYUMsVUFBVUQsR0FBSyxDQUFDLEVBRWhEQSxFQUFJLEVBQ05mLEVBQVFJLE9BQU9jLElBQVMsR0FBTUMsU0FBUSxTQUFVQyxHQUM5Q0MsRUFBZ0JQLEVBQVFNLEVBQUtGLEVBQU9FLEdBQ3RDLElBQ1NoQixPQUFPa0IsMEJBQ2hCbEIsT0FBT21CLGlCQUFpQlQsRUFBUVYsT0FBT2tCLDBCQUEwQkosSUFFakVsQixFQUFRSSxPQUFPYyxJQUFTQyxTQUFRLFNBQVVDLEdBQ3hDaEIsT0FBT29CLGVBQWVWLEVBQVFNLEVBQUtoQixPQUFPSyx5QkFBeUJTLEVBQVFFLEdBQzdFLEdBRUosQ0FFQSxPQUFPTixDQUNULENBRUEsU0FBU1csRUFBUUMsR0FhZixPQVRFRCxFQURvQixtQkFBWEUsUUFBb0QsaUJBQXBCQSxPQUFPQyxTQUN0QyxTQUFVRixHQUNsQixjQUFjQSxDQUNoQixFQUVVLFNBQVVBLEdBQ2xCLE9BQU9BLEdBQXlCLG1CQUFYQyxRQUF5QkQsRUFBSUcsY0FBZ0JGLFFBQVVELElBQVFDLE9BQU9HLFVBQVksZ0JBQWtCSixDQUMzSCxFQUdLRCxFQUFRQyxFQUNqQixDQUVBLFNBQVNMLEVBQWdCSyxFQUFLTixFQUFLVyxHQVlqQyxPQVhJWCxLQUFPTSxFQUNUdEIsT0FBT29CLGVBQWVFLEVBQUtOLEVBQUssQ0FDOUJXLE1BQU9BLEVBQ1ByQixZQUFZLEVBQ1pzQixjQUFjLEVBQ2RDLFVBQVUsSUFHWlAsRUFBSU4sR0FBT1csRUFHTkwsQ0FDVCxDQUVBLFNBQVNRLElBZVAsT0FkQUEsRUFBVzlCLE9BQU8rQixRQUFVLFNBQVVyQixHQUNwQyxJQUFLLElBQUlDLEVBQUksRUFBR0EsRUFBSUMsVUFBVUMsT0FBUUYsSUFBSyxDQUN6QyxJQUFJRyxFQUFTRixVQUFVRCxHQUV2QixJQUFLLElBQUlLLEtBQU9GLEVBQ1ZkLE9BQU8wQixVQUFVTSxlQUFlQyxLQUFLbkIsRUFBUUUsS0FDL0NOLEVBQU9NLEdBQU9GLEVBQU9FLEdBRzNCLENBRUEsT0FBT04sQ0FDVCxFQUVPb0IsRUFBU3RCLE1BQU0wQixLQUFNdEIsVUFDOUIsQ0FpQkEsU0FBU3VCLEVBQXlCckIsRUFBUXNCLEdBQ3hDLEdBQWMsTUFBVnRCLEVBQWdCLE1BQU8sQ0FBQyxFQUU1QixJQUVJRSxFQUFLTCxFQUZMRCxFQWxCTixTQUF1Q0ksRUFBUXNCLEdBQzdDLEdBQWMsTUFBVnRCLEVBQWdCLE1BQU8sQ0FBQyxFQUM1QixJQUVJRSxFQUFLTCxFQUZMRCxFQUFTLENBQUMsRUFDVjJCLEVBQWFyQyxPQUFPRCxLQUFLZSxHQUc3QixJQUFLSCxFQUFJLEVBQUdBLEVBQUkwQixFQUFXeEIsT0FBUUYsSUFDakNLLEVBQU1xQixFQUFXMUIsR0FDYnlCLEVBQVNFLFFBQVF0QixJQUFRLElBQzdCTixFQUFPTSxHQUFPRixFQUFPRSxJQUd2QixPQUFPTixDQUNULENBS2U2QixDQUE4QnpCLEVBQVFzQixHQUluRCxHQUFJcEMsT0FBT0Msc0JBQXVCLENBQ2hDLElBQUl1QyxFQUFtQnhDLE9BQU9DLHNCQUFzQmEsR0FFcEQsSUFBS0gsRUFBSSxFQUFHQSxFQUFJNkIsRUFBaUIzQixPQUFRRixJQUN2Q0ssRUFBTXdCLEVBQWlCN0IsR0FDbkJ5QixFQUFTRSxRQUFRdEIsSUFBUSxHQUN4QmhCLE9BQU8wQixVQUFVZSxxQkFBcUJSLEtBQUtuQixFQUFRRSxLQUN4RE4sRUFBT00sR0FBT0YsRUFBT0UsR0FFekIsQ0FFQSxPQUFPTixDQUNULENBcUNBLFNBQVNnQyxFQUFVQyxHQUNqQixHQUFzQixvQkFBWEMsUUFBMEJBLE9BQU9DLFVBQzFDLFFBQXVCQSxVQUFVQyxVQUFVQyxNQUFNSixFQUVyRCxDQUVBLElBQUlLLEVBQWFOLEVBQVUseURBQ3ZCTyxFQUFPUCxFQUFVLFNBQ2pCUSxFQUFVUixFQUFVLFlBQ3BCUyxFQUFTVCxFQUFVLGFBQWVBLEVBQVUsYUFBZUEsRUFBVSxZQUNyRVUsRUFBTVYsRUFBVSxtQkFDaEJXLEVBQW1CWCxFQUFVLFlBQWNBLEVBQVUsWUFFckRZLEVBQWMsQ0FDaEJDLFNBQVMsRUFDVEMsU0FBUyxHQUdYLFNBQVNDLEVBQUdDLEVBQUlDLEVBQU9DLEdBQ3JCRixFQUFHRyxpQkFBaUJGLEVBQU9DLEdBQUtaLEdBQWNNLEVBQ2hELENBRUEsU0FBU1EsRUFBSUosRUFBSUMsRUFBT0MsR0FDdEJGLEVBQUdLLG9CQUFvQkosRUFBT0MsR0FBS1osR0FBY00sRUFDbkQsQ0FFQSxTQUFTVSxFQUVUTixFQUVBTyxHQUNFLEdBQUtBLEVBQUwsQ0FHQSxHQUZnQixNQUFoQkEsRUFBUyxLQUFlQSxFQUFXQSxFQUFTQyxVQUFVLElBRWxEUixFQUNGLElBQ0UsR0FBSUEsRUFBR1MsUUFDTCxPQUFPVCxFQUFHUyxRQUFRRixHQUNiLEdBQUlQLEVBQUdVLGtCQUNaLE9BQU9WLEVBQUdVLGtCQUFrQkgsR0FDdkIsR0FBSVAsRUFBR1csc0JBQ1osT0FBT1gsRUFBR1csc0JBQXNCSixFQUVwQyxDQUFFLE1BQU9LLEdBQ1AsT0FBTyxDQUNULENBR0YsT0FBTyxDQWpCUSxDQWtCakIsQ0FFQSxTQUFTQyxFQUFnQmIsR0FDdkIsT0FBT0EsRUFBR2MsTUFBUWQsSUFBT2UsVUFBWWYsRUFBR2MsS0FBS0UsU0FBV2hCLEVBQUdjLEtBQU9kLEVBQUdpQixVQUN2RSxDQUVBLFNBQVNDLEVBRVRsQixFQUVBTyxFQUVBWSxFQUFLQyxHQUNILEdBQUlwQixFQUFJLENBQ05tQixFQUFNQSxHQUFPSixTQUViLEVBQUcsQ0FDRCxHQUFnQixNQUFaUixJQUFxQyxNQUFoQkEsRUFBUyxHQUFhUCxFQUFHaUIsYUFBZUUsR0FBT2IsRUFBUU4sRUFBSU8sR0FBWUQsRUFBUU4sRUFBSU8sS0FBY2EsR0FBY3BCLElBQU9tQixFQUM3SSxPQUFPbkIsRUFHVCxHQUFJQSxJQUFPbUIsRUFBSyxLQUVsQixPQUFTbkIsRUFBS2EsRUFBZ0JiLEdBQ2hDLENBRUEsT0FBTyxJQUNULENBRUEsSUFnV0lxQixFQWhXQUMsRUFBVSxPQUVkLFNBQVNDLEVBQVl2QixFQUFJd0IsRUFBTUMsR0FDN0IsR0FBSXpCLEdBQU13QixFQUNSLEdBQUl4QixFQUFHMEIsVUFDTDFCLEVBQUcwQixVQUFVRCxFQUFRLE1BQVEsVUFBVUQsT0FDbEMsQ0FDTCxJQUFJRyxHQUFhLElBQU0zQixFQUFHMkIsVUFBWSxLQUFLQyxRQUFRTixFQUFTLEtBQUtNLFFBQVEsSUFBTUosRUFBTyxJQUFLLEtBQzNGeEIsRUFBRzJCLFdBQWFBLEdBQWFGLEVBQVEsSUFBTUQsRUFBTyxLQUFLSSxRQUFRTixFQUFTLElBQzFFLENBRUosQ0FFQSxTQUFTTyxFQUFJN0IsRUFBSThCLEVBQU1DLEdBQ3JCLElBQUlDLEVBQVFoQyxHQUFNQSxFQUFHZ0MsTUFFckIsR0FBSUEsRUFBQSxDQUNGLFFBQVksSUFBUkQsRUFPRixPQU5JaEIsU0FBU2tCLGFBQWVsQixTQUFTa0IsWUFBWUMsaUJBQy9DSCxFQUFNaEIsU0FBU2tCLFlBQVlDLGlCQUFpQmxDLEVBQUksSUFDdkNBLEVBQUdtQyxlQUNaSixFQUFNL0IsRUFBR21DLG1CQUdLLElBQVRMLEVBQWtCQyxFQUFNQSxFQUFJRCxHQUU3QkEsS0FBUUUsSUFBcUMsSUFBM0JGLEVBQUtsRCxRQUFRLFlBQ25Da0QsRUFBTyxXQUFhQSxHQUd0QkUsRUFBTUYsR0FBUUMsR0FBc0IsaUJBQVJBLEVBQW1CLEdBQUssSyxDQUcxRCxDQUVBLFNBQVNLLEVBQU9wQyxFQUFJcUMsR0FDbEIsSUFBSUMsRUFBb0IsR0FFeEIsR0FBa0IsaUJBQVB0QyxFQUNUc0MsRUFBb0J0QyxPQUVwQixFQUFHLENBQ0QsSUFBSXVDLEVBQVlWLEVBQUk3QixFQUFJLGFBRXBCdUMsR0FBMkIsU0FBZEEsSUFDZkQsRUFBb0JDLEVBQVksSUFBTUQsRUFJMUMsUUFBVUQsSUFBYXJDLEVBQUtBLEVBQUdpQixhQUdqQyxJQUFJdUIsRUFBV3RELE9BQU91RCxXQUFhdkQsT0FBT3dELGlCQUFtQnhELE9BQU95RCxXQUFhekQsT0FBTzBELFlBR3hGLE9BQU9KLEdBQVksSUFBSUEsRUFBU0YsRUFDbEMsQ0FFQSxTQUFTTyxFQUFLMUIsRUFBSzJCLEVBQVNoRixHQUMxQixHQUFJcUQsRUFBSyxDQUNQLElBQUk0QixFQUFPNUIsRUFBSTZCLHFCQUFxQkYsR0FDaEM3RixFQUFJLEVBQ0pnRyxFQUFJRixFQUFLNUYsT0FFYixHQUFJVyxFQUNGLEtBQU9iLEVBQUlnRyxFQUFHaEcsSUFDWmEsRUFBU2lGLEVBQUs5RixHQUFJQSxHQUl0QixPQUFPOEYsQ0FDVCxDQUVBLE1BQU8sRUFDVCxDQUVBLFNBQVNHLElBQ1AsSUFBSUMsRUFBbUJwQyxTQUFTb0MsaUJBRWhDLE9BQUlBLEdBR0twQyxTQUFTcUMsZUFFcEIsQ0FZQSxTQUFTQyxFQUFRckQsRUFBSXNELEVBQTJCQyxFQUEyQkMsRUFBV0MsR0FDcEYsR0FBS3pELEVBQUcwRCx1QkFBeUIxRCxJQUFPZCxPQUF4QyxDQUNBLElBQUl5RSxFQUFRQyxFQUFLQyxFQUFNQyxFQUFRQyxFQUFPQyxFQUFRQyxFQW1COUMsR0FqQklqRSxJQUFPZCxRQUFVYyxFQUFHaUIsWUFBY2pCLElBQU9rRCxLQUUzQ1UsR0FEQUQsRUFBUzNELEVBQUcwRCx5QkFDQ0UsSUFDYkMsRUFBT0YsRUFBT0UsS0FDZEMsRUFBU0gsRUFBT0csT0FDaEJDLEVBQVFKLEVBQU9JLE1BQ2ZDLEVBQVNMLEVBQU9LLE9BQ2hCQyxFQUFRTixFQUFPTSxRQUVmTCxFQUFNLEVBQ05DLEVBQU8sRUFDUEMsRUFBUzVFLE9BQU9nRixZQUNoQkgsRUFBUTdFLE9BQU9pRixXQUNmSCxFQUFTOUUsT0FBT2dGLFlBQ2hCRCxFQUFRL0UsT0FBT2lGLGFBR1piLEdBQTZCQyxJQUE4QnZELElBQU9kLFNBRXJFdUUsRUFBWUEsR0FBYXpELEVBQUdpQixZQUd2QjNCLEdBQ0gsTUFDTW1FLEdBQWFBLEVBQVVDLHdCQUEwRCxTQUFoQzdCLEVBQUk0QixFQUFXLGNBQTJCRixHQUE0RCxXQUEvQjFCLEVBQUk0QixFQUFXLGFBQTJCLENBQ3BLLElBQUlXLEVBQWdCWCxFQUFVQyx3QkFFOUJFLEdBQU9RLEVBQWNSLElBQU1TLFNBQVN4QyxFQUFJNEIsRUFBVyxxQkFDbkRJLEdBQVFPLEVBQWNQLEtBQU9RLFNBQVN4QyxFQUFJNEIsRUFBVyxzQkFDckRLLEVBQVNGLEVBQU1ELEVBQU9LLE9BQ3RCRCxFQUFRRixFQUFPRixFQUFPTSxNQUN0QixLQUNGLFFBR09SLEVBQVlBLEVBQVV4QyxZQUluQyxHQUFJdUMsR0FBYXhELElBQU9kLE9BQVEsQ0FFOUIsSUFBSW9GLEVBQVdsQyxFQUFPcUIsR0FBYXpELEdBQy9CdUUsRUFBU0QsR0FBWUEsRUFBU0UsRUFDOUJDLEVBQVNILEdBQVlBLEVBQVNJLEVBRTlCSixJQUtGUixHQUpBRixHQUFPYSxJQUdQVCxHQUFVUyxHQUVWVixHQUpBRixHQUFRVSxJQUNSTixHQUFTTSxHQUtiLENBRUEsTUFBTyxDQUNMWCxJQUFLQSxFQUNMQyxLQUFNQSxFQUNOQyxPQUFRQSxFQUNSQyxNQUFPQSxFQUNQRSxNQUFPQSxFQUNQRCxPQUFRQSxFQWhFc0MsQ0FrRWxELENBVUEsU0FBU1csRUFBZTNFLEVBQUk0RSxFQUFRQyxHQUtsQyxJQUpBLElBQUlDLEVBQVNDLEVBQTJCL0UsR0FBSSxHQUN4Q2dGLEVBQVkzQixFQUFRckQsR0FBSTRFLEdBR3JCRSxHQUFRLENBQ2IsSUFBSUcsRUFBZ0I1QixFQUFReUIsR0FBUUQsR0FTcEMsS0FObUIsUUFBZkEsR0FBdUMsU0FBZkEsRUFDaEJHLEdBQWFDLEVBRWJELEdBQWFDLEdBR1gsT0FBT0gsRUFDckIsR0FBSUEsSUFBVzVCLElBQTZCLE1BQzVDNEIsRUFBU0MsRUFBMkJELEdBQVEsRUFDOUMsQ0FFQSxPQUFPLENBQ1QsQ0FXQSxTQUFTSSxFQUFTbEYsRUFBSW1GLEVBQVVDLEVBQVNDLEdBS3ZDLElBSkEsSUFBSUMsRUFBZSxFQUNmckksRUFBSSxFQUNKc0ksRUFBV3ZGLEVBQUd1RixTQUVYdEksRUFBSXNJLEVBQVNwSSxRQUFRLENBQzFCLEdBQWtDLFNBQTlCb0ksRUFBU3RJLEdBQUcrRSxNQUFNd0QsU0FBc0JELEVBQVN0SSxLQUFPd0ksR0FBU0MsUUFBVUwsR0FBaUJFLEVBQVN0SSxLQUFPd0ksR0FBU0UsVUFBWXpFLEVBQVFxRSxFQUFTdEksR0FBSW1JLEVBQVFRLFVBQVc1RixHQUFJLEdBQVEsQ0FDdkwsR0FBSXNGLElBQWlCSCxFQUNuQixPQUFPSSxFQUFTdEksR0FHbEJxSSxHQUNGLENBRUFySSxHQUNGLENBRUEsT0FBTyxJQUNULENBU0EsU0FBUzRJLEVBQVU3RixFQUFJTyxHQUdyQixJQUZBLElBQUl1RixFQUFPOUYsRUFBRytGLGlCQUVQRCxJQUFTQSxJQUFTTCxHQUFTQyxPQUFrQyxTQUF6QjdELEVBQUlpRSxFQUFNLFlBQXlCdkYsSUFBYUQsRUFBUXdGLEVBQU12RixLQUN2R3VGLEVBQU9BLEVBQUtFLHVCQUdkLE9BQU9GLEdBQVEsSUFDakIsQ0FVQSxTQUFTRyxFQUFNakcsRUFBSU8sR0FDakIsSUFBSTJGLEVBQVEsRUFFWixJQUFLbEcsSUFBT0EsRUFBR2lCLFdBQ2IsT0FBTyxFQUtULEtBQU9qQixFQUFLQSxFQUFHZ0csd0JBQ3FCLGFBQTlCaEcsRUFBR21HLFNBQVNDLGVBQWdDcEcsSUFBT3lGLEdBQVNZLE9BQVc5RixJQUFZRCxFQUFRTixFQUFJTyxJQUNqRzJGLElBSUosT0FBT0EsQ0FDVCxDQVNBLFNBQVNJLEVBQXdCdEcsR0FDL0IsSUFBSXVHLEVBQWEsRUFDYkMsRUFBWSxFQUNaQyxFQUFjdkQsSUFFbEIsR0FBSWxELEVBQ0YsRUFBRyxDQUNELElBQUlzRSxFQUFXbEMsRUFBT3BDLEdBQ2xCdUUsRUFBU0QsRUFBU0UsRUFDbEJDLEVBQVNILEVBQVNJLEVBQ3RCNkIsR0FBY3ZHLEVBQUcwRyxXQUFhbkMsRUFDOUJpQyxHQUFheEcsRUFBRzJHLFVBQVlsQyxDQUM5QixPQUFTekUsSUFBT3lHLElBQWdCekcsRUFBS0EsRUFBR2lCLGFBRzFDLE1BQU8sQ0FBQ3NGLEVBQVlDLEVBQ3RCLENBcUJBLFNBQVN6QixFQUEyQi9FLEVBQUk0RyxHQUV0QyxJQUFLNUcsSUFBT0EsRUFBRzBELHNCQUF1QixPQUFPUixJQUM3QyxJQUFJMkQsRUFBTzdHLEVBQ1A4RyxHQUFVLEVBRWQsTUFFTUQsRUFBS0UsWUFBY0YsRUFBS0csYUFBZUgsRUFBS0ksYUFBZUosRUFBS0ssYUFBYyxDQUNoRixJQUFJQyxFQUFVdEYsRUFBSWdGLEdBRWxCLEdBQUlBLEVBQUtFLFlBQWNGLEVBQUtHLGNBQXFDLFFBQXJCRyxFQUFRQyxXQUE0QyxVQUFyQkQsRUFBUUMsWUFBMEJQLEVBQUtJLGFBQWVKLEVBQUtLLGVBQXNDLFFBQXJCQyxFQUFRRSxXQUE0QyxVQUFyQkYsRUFBUUUsV0FBd0IsQ0FDcE4sSUFBS1IsRUFBS25ELHVCQUF5Qm1ELElBQVM5RixTQUFTdUcsS0FBTSxPQUFPcEUsSUFDbEUsR0FBSTRELEdBQVdGLEVBQWEsT0FBT0MsRUFDbkNDLEdBQVUsQ0FDWixDQUNGLFFBR09ELEVBQU9BLEVBQUs1RixZQUVyQixPQUFPaUMsR0FDVCxDQWNBLFNBQVNxRSxFQUFZQyxFQUFPQyxHQUMxQixPQUFPQyxLQUFLQyxNQUFNSCxFQUFNNUQsT0FBUzhELEtBQUtDLE1BQU1GLEVBQU03RCxNQUFROEQsS0FBS0MsTUFBTUgsRUFBTTNELFFBQVU2RCxLQUFLQyxNQUFNRixFQUFNNUQsT0FBUzZELEtBQUtDLE1BQU1ILEVBQU14RCxVQUFZMEQsS0FBS0MsTUFBTUYsRUFBTXpELFNBQVcwRCxLQUFLQyxNQUFNSCxFQUFNdkQsU0FBV3lELEtBQUtDLE1BQU1GLEVBQU14RCxNQUN2TixDQUlBLFNBQVMyRCxFQUFTQyxFQUFVQyxHQUMxQixPQUFPLFdBQ0wsSUFBS3pHLEVBQWtCLENBQ3JCLElBQUkwRyxFQUFPN0ssVUFHUyxJQUFoQjZLLEVBQUs1SyxPQUNQMEssRUFBU3RKLEtBSENDLEtBR1d1SixFQUFLLElBRTFCRixFQUFTL0ssTUFMQzBCLEtBS1l1SixHQUd4QjFHLEVBQW1CMkcsWUFBVyxXQUM1QjNHLE9BQW1CLENBQ3JCLEdBQUd5RyxFQUNMLENBQ0YsQ0FDRixDQU9BLFNBQVNHLEVBQVNqSSxFQUFJa0ksRUFBR0MsR0FDdkJuSSxFQUFHMEcsWUFBY3dCLEVBQ2pCbEksRUFBRzJHLFdBQWF3QixDQUNsQixDQUVBLFNBQVNDLEVBQU1wSSxHQUNiLElBQUlxSSxFQUFVbkosT0FBT21KLFFBQ2pCQyxFQUFJcEosT0FBT3FKLFFBQVVySixPQUFPc0osTUFFaEMsT0FBSUgsR0FBV0EsRUFBUUksSUFDZEosRUFBUUksSUFBSXpJLEdBQUkwSSxXQUFVLEdBQ3hCSixFQUNGQSxFQUFFdEksR0FBSXFHLE9BQU0sR0FBTSxHQUVsQnJHLEVBQUcwSSxXQUFVLEVBRXhCLENBa0JBLElBQUlDLEVBQVUsWUFBYSxJQUFJQyxNQUFPQyxVQUV0QyxTQUFTQyxJQUNQLElBQ0lDLEVBREFDLEVBQWtCLEdBRXRCLE1BQU8sQ0FDTEMsc0JBQXVCLFlBQ3JCRCxFQUFrQixHQUNieEssS0FBSzRHLFFBQVE4RCxZQUNILEdBQUdDLE1BQU01SyxLQUFLQyxLQUFLd0IsR0FBR3VGLFVBQzVCbEksU0FBUSxTQUFVK0wsR0FDekIsR0FBOEIsU0FBMUJ2SCxFQUFJdUgsRUFBTyxZQUF5QkEsSUFBVTNELEdBQVNDLE1BQTNELENBQ0FzRCxFQUFnQm5NLEtBQUssQ0FDbkJHLE9BQVFvTSxFQUNSQyxLQUFNaEcsRUFBUStGLEtBR2hCLElBQUlFLEVBQVd2TSxFQUFlLENBQUMsRUFBR2lNLEVBQWdCQSxFQUFnQjdMLE9BQVMsR0FBR2tNLE1BRzlFLEdBQUlELEVBQU1HLHNCQUF1QixDQUMvQixJQUFJQyxFQUFjcEgsRUFBT2dILEdBQU8sR0FFNUJJLElBQ0ZGLEVBQVMxRixLQUFPNEYsRUFBWUMsRUFDNUJILEVBQVN6RixNQUFRMkYsRUFBWUUsRUFFakMsQ0FFQU4sRUFBTUUsU0FBV0EsQ0FsQmlELENBbUJwRSxHQUNGLEVBQ0FLLGtCQUFtQixTQUEyQmxJLEdBQzVDdUgsRUFBZ0JuTSxLQUFLNEUsRUFDdkIsRUFDQW1JLHFCQUFzQixTQUE4QjVNLEdBQ2xEZ00sRUFBZ0JhLE9BcEp0QixTQUF1QkMsRUFBS2xNLEdBQzFCLElBQUssSUFBSVgsS0FBSzZNLEVBQ1osR0FBS0EsRUFBSXhMLGVBQWVyQixHQUV4QixJQUFLLElBQUlLLEtBQU9NLEVBQ2QsR0FBSUEsRUFBSVUsZUFBZWhCLElBQVFNLEVBQUlOLEtBQVN3TSxFQUFJN00sR0FBR0ssR0FBTSxPQUFPeU0sT0FBTzlNLEdBSTNFLE9BQU8sQ0FDVCxDQTBJNkIrTSxDQUFjaEIsRUFBaUIsQ0FDcERoTSxPQUFRQSxJQUNOLEVBQ04sRUFDQWlOLFdBQVksU0FBb0JwQyxHQUM5QixJQUFJcUMsRUFBUTFMLEtBRVosSUFBS0EsS0FBSzRHLFFBQVE4RCxVQUdoQixPQUZBaUIsYUFBYXBCLFFBQ1csbUJBQWJsQixHQUF5QkEsS0FJdEMsSUFBSXVDLEdBQVksRUFDWkMsRUFBZ0IsRUFDcEJyQixFQUFnQjNMLFNBQVEsU0FBVW9FLEdBQ2hDLElBQUk2SSxFQUFPLEVBQ1B0TixFQUFTeUUsRUFBTXpFLE9BQ2ZzTSxFQUFXdE0sRUFBT3NNLFNBQ2xCaUIsRUFBU2xILEVBQVFyRyxHQUNqQndOLEVBQWV4TixFQUFPd04sYUFDdEJDLEVBQWF6TixFQUFPeU4sV0FDcEJDLEVBQWdCakosRUFBTTRILEtBQ3RCc0IsRUFBZXZJLEVBQU9wRixHQUFRLEdBRTlCMk4sSUFFRkosRUFBTzNHLEtBQU8rRyxFQUFhbEIsRUFDM0JjLEVBQU8xRyxNQUFROEcsRUFBYWpCLEdBRzlCMU0sRUFBT3VOLE9BQVNBLEVBRVp2TixFQUFPdU0sdUJBRUxoQyxFQUFZaUQsRUFBY0QsS0FBWWhELEVBQVkrQixFQUFVaUIsS0FDL0RHLEVBQWM5RyxJQUFNMkcsRUFBTzNHLE1BQVE4RyxFQUFjN0csS0FBTzBHLEVBQU8xRyxRQUFXeUYsRUFBUzFGLElBQU0yRyxFQUFPM0csTUFBUTBGLEVBQVN6RixLQUFPMEcsRUFBTzFHLFFBRTlIeUcsRUEyRVosU0FBMkJJLEVBQWVwQixFQUFVaUIsRUFBUW5GLEdBQzFELE9BQU9zQyxLQUFLa0QsS0FBS2xELEtBQUttRCxJQUFJdkIsRUFBUzFGLElBQU04RyxFQUFjOUcsSUFBSyxHQUFLOEQsS0FBS21ELElBQUl2QixFQUFTekYsS0FBTzZHLEVBQWM3RyxLQUFNLElBQU02RCxLQUFLa0QsS0FBS2xELEtBQUttRCxJQUFJdkIsRUFBUzFGLElBQU0yRyxFQUFPM0csSUFBSyxHQUFLOEQsS0FBS21ELElBQUl2QixFQUFTekYsS0FBTzBHLEVBQU8xRyxLQUFNLElBQU11QixFQUFROEQsU0FDN04sQ0E3RW1CNEIsQ0FBa0JKLEVBQWVGLEVBQWNDLEVBQVlQLEVBQU05RSxVQUt2RW1DLEVBQVlnRCxFQUFRakIsS0FDdkJ0TSxFQUFPd04sYUFBZWxCLEVBQ3RCdE0sRUFBT3lOLFdBQWFGLEVBRWZELElBQ0hBLEVBQU9KLEVBQU05RSxRQUFROEQsV0FHdkJnQixFQUFNYSxRQUFRL04sRUFBUTBOLEVBQWVILEVBQVFELElBRzNDQSxJQUNGRixHQUFZLEVBQ1pDLEVBQWdCM0MsS0FBS3NELElBQUlYLEVBQWVDLEdBQ3hDSCxhQUFhbk4sRUFBT2lPLHFCQUNwQmpPLEVBQU9pTyxvQkFBc0JqRCxZQUFXLFdBQ3RDaEwsRUFBT3FOLGNBQWdCLEVBQ3ZCck4sRUFBT3dOLGFBQWUsS0FDdEJ4TixFQUFPc00sU0FBVyxLQUNsQnRNLEVBQU95TixXQUFhLEtBQ3BCek4sRUFBT3VNLHNCQUF3QixJQUNqQyxHQUFHZSxHQUNIdE4sRUFBT3VNLHNCQUF3QmUsRUFFbkMsSUFDQUgsYUFBYXBCLEdBRVJxQixFQUdIckIsRUFBc0JmLFlBQVcsV0FDUCxtQkFBYkgsR0FBeUJBLEdBQ3RDLEdBQUd3QyxHQUpxQixtQkFBYnhDLEdBQXlCQSxJQU90Q21CLEVBQWtCLEVBQ3BCLEVBQ0ErQixRQUFTLFNBQWlCL04sRUFBUWtPLEVBQWFYLEVBQVFZLEdBQ3JELEdBQUlBLEVBQVUsQ0FDWnRKLEVBQUk3RSxFQUFRLGFBQWMsSUFDMUI2RSxFQUFJN0UsRUFBUSxZQUFhLElBQ3pCLElBQUlzSCxFQUFXbEMsRUFBTzVELEtBQUt3QixJQUN2QnVFLEVBQVNELEdBQVlBLEVBQVNFLEVBQzlCQyxFQUFTSCxHQUFZQSxFQUFTSSxFQUM5QjBHLEdBQWNGLEVBQVlySCxLQUFPMEcsRUFBTzFHLE9BQVNVLEdBQVUsR0FDM0Q4RyxHQUFjSCxFQUFZdEgsSUFBTTJHLEVBQU8zRyxNQUFRYSxHQUFVLEdBQzdEekgsRUFBT3NPLGFBQWVGLEVBQ3RCcE8sRUFBT3VPLGFBQWVGLEVBQ3RCeEosRUFBSTdFLEVBQVEsWUFBYSxlQUFpQm9PLEVBQWEsTUFBUUMsRUFBYSxTQUM1RTdNLEtBQUtnTixnQkFpQmIsU0FBaUJ4TyxHQUNmLE9BQU9BLEVBQU95TyxXQUNoQixDQW5CK0JDLENBQVExTyxHQUUvQjZFLEVBQUk3RSxFQUFRLGFBQWMsYUFBZW1PLEVBQVcsTUFBUTNNLEtBQUs0RyxRQUFRdUcsT0FBUyxJQUFNbk4sS0FBSzRHLFFBQVF1RyxPQUFTLEtBQzlHOUosRUFBSTdFLEVBQVEsWUFBYSxzQkFDRSxpQkFBcEJBLEVBQU80TyxVQUF5QnpCLGFBQWFuTixFQUFPNE8sVUFDM0Q1TyxFQUFPNE8sU0FBVzVELFlBQVcsV0FDM0JuRyxFQUFJN0UsRUFBUSxhQUFjLElBQzFCNkUsRUFBSTdFLEVBQVEsWUFBYSxJQUN6QkEsRUFBTzRPLFVBQVcsRUFDbEI1TyxFQUFPc08sWUFBYSxFQUNwQnRPLEVBQU91TyxZQUFhLENBQ3RCLEdBQUdKLEVBQ0wsQ0FDRixFQUVKLENBVUEsSUFBSVUsRUFBVSxHQUNWQyxFQUFXLENBQ2JDLHFCQUFxQixHQUVuQkMsRUFBZ0IsQ0FDbEJDLE1BQU8sU0FBZUMsR0FFcEIsSUFBSyxJQUFJQyxLQUFVTCxFQUNiQSxFQUFTeE4sZUFBZTZOLE1BQWFBLEtBQVVELEtBQ2pEQSxFQUFPQyxHQUFVTCxFQUFTSyxJQUk5Qk4sRUFBUXhPLFNBQVEsU0FBVStPLEdBQ3hCLEdBQUlBLEVBQUVDLGFBQWVILEVBQU9HLFdBQzFCLEtBQU0saUNBQWlDQyxPQUFPSixFQUFPRyxXQUFZLGtCQUVyRSxJQUNBUixFQUFRaFAsS0FBS3FQLEVBQ2YsRUFDQUssWUFBYSxTQUFxQkMsRUFBV0MsRUFBVUMsR0FDckQsSUFBSXhDLEVBQVExTCxLQUVaQSxLQUFLbU8sZUFBZ0IsRUFFckJELEVBQUlFLE9BQVMsV0FDWDFDLEVBQU15QyxlQUFnQixDQUN4QixFQUVBLElBQUlFLEVBQWtCTCxFQUFZLFNBQ2xDWCxFQUFReE8sU0FBUSxTQUFVNk8sR0FDbkJPLEVBQVNQLEVBQU9HLGNBRWpCSSxFQUFTUCxFQUFPRyxZQUFZUSxJQUM5QkosRUFBU1AsRUFBT0csWUFBWVEsR0FBaUI5UCxFQUFlLENBQzFEMFAsU0FBVUEsR0FDVEMsSUFLREQsRUFBU3JILFFBQVE4RyxFQUFPRyxhQUFlSSxFQUFTUCxFQUFPRyxZQUFZRyxJQUNyRUMsRUFBU1AsRUFBT0csWUFBWUcsR0FBV3pQLEVBQWUsQ0FDcEQwUCxTQUFVQSxHQUNUQyxJQUVQLEdBQ0YsRUFDQUksa0JBQW1CLFNBQTJCTCxFQUFVek0sRUFBSStNLEVBQVUzSCxHQVlwRSxJQUFLLElBQUkrRyxLQVhUTixFQUFReE8sU0FBUSxTQUFVNk8sR0FDeEIsSUFBSUcsRUFBYUgsRUFBT0csV0FDeEIsR0FBS0ksRUFBU3JILFFBQVFpSCxJQUFnQkgsRUFBT0gsb0JBQTdDLENBQ0EsSUFBSWlCLEVBQWMsSUFBSWQsRUFBT08sRUFBVXpNLEVBQUl5TSxFQUFTckgsU0FDcEQ0SCxFQUFZUCxTQUFXQSxFQUN2Qk8sRUFBWTVILFFBQVVxSCxFQUFTckgsUUFDL0JxSCxFQUFTSixHQUFjVyxFQUV2QjVPLEVBQVMyTyxFQUFVQyxFQUFZRCxTQU5tQyxDQU9wRSxJQUVtQk4sRUFBU3JILFFBQzFCLEdBQUtxSCxFQUFTckgsUUFBUTlHLGVBQWU2TixHQUFyQyxDQUNBLElBQUljLEVBQVd6TyxLQUFLME8sYUFBYVQsRUFBVU4sRUFBUU0sRUFBU3JILFFBQVErRyxTQUU1QyxJQUFiYyxJQUNUUixFQUFTckgsUUFBUStHLEdBQVVjLEVBSjBCLENBTzNELEVBQ0FFLG1CQUFvQixTQUE0QjNMLEVBQU1pTCxHQUNwRCxJQUFJVyxFQUFrQixDQUFDLEVBTXZCLE9BTEF2QixFQUFReE8sU0FBUSxTQUFVNk8sR0FDYyxtQkFBM0JBLEVBQU9rQixpQkFFbEJoUCxFQUFTZ1AsRUFBaUJsQixFQUFPa0IsZ0JBQWdCN08sS0FBS2tPLEVBQVNQLEVBQU9HLFlBQWE3SyxHQUNyRixJQUNPNEwsQ0FDVCxFQUNBRixhQUFjLFNBQXNCVCxFQUFVakwsRUFBTXZELEdBQ2xELElBQUlvUCxFQVNKLE9BUkF4QixFQUFReE8sU0FBUSxTQUFVNk8sR0FFbkJPLEVBQVNQLEVBQU9HLGFBRWpCSCxFQUFPb0IsaUJBQTJELG1CQUFqQ3BCLEVBQU9vQixnQkFBZ0I5TCxLQUMxRDZMLEVBQWdCbkIsRUFBT29CLGdCQUFnQjlMLEdBQU1qRCxLQUFLa08sRUFBU1AsRUFBT0csWUFBYXBPLEdBRW5GLElBQ09vUCxDQUNULEdBR0YsU0FBU0UsRUFBY0MsR0FDckIsSUFBSWYsRUFBV2UsRUFBS2YsU0FDaEJnQixFQUFTRCxFQUFLQyxPQUNkak0sRUFBT2dNLEVBQUtoTSxLQUNaa00sRUFBV0YsRUFBS0UsU0FDaEJDLEVBQVVILEVBQUtHLFFBQ2ZDLEVBQU9KLEVBQUtJLEtBQ1pDLEVBQVNMLEVBQUtLLE9BQ2RDLEVBQVdOLEVBQUtNLFNBQ2hCQyxFQUFXUCxFQUFLTyxTQUNoQkMsRUFBb0JSLEVBQUtRLGtCQUN6QkMsRUFBb0JULEVBQUtTLGtCQUN6QkMsRUFBZ0JWLEVBQUtVLGNBQ3JCQyxFQUFjWCxFQUFLVyxZQUNuQkMsRUFBdUJaLEVBQUtZLHFCQUVoQyxHQURBM0IsRUFBV0EsR0FBWWdCLEdBQVVBLEVBQU85RSxHQUN4QyxDQUNBLElBQUkrRCxFQUNBdEgsRUFBVXFILEVBQVNySCxRQUNuQmlKLEVBQVMsS0FBTzdNLEVBQUs4TSxPQUFPLEdBQUdsSSxjQUFnQjVFLEVBQUsrTSxPQUFPLElBRTNEclAsT0FBT3NQLGFBQWdCbFAsR0FBZUMsR0FNeENtTixFQUFNM0wsU0FBUzBOLFlBQVksVUFDdkJDLFVBQVVsTixHQUFNLEdBQU0sR0FOMUJrTCxFQUFNLElBQUk4QixZQUFZaE4sRUFBTSxDQUMxQm1OLFNBQVMsRUFDVEMsWUFBWSxJQU9oQmxDLEVBQUltQyxHQUFLakIsR0FBUUgsRUFDakJmLEVBQUlvQyxLQUFPakIsR0FBVUosRUFDckJmLEVBQUlxQyxLQUFPckIsR0FBWUQsRUFDdkJmLEVBQUlyRyxNQUFRc0gsRUFDWmpCLEVBQUlvQixTQUFXQSxFQUNmcEIsRUFBSXFCLFNBQVdBLEVBQ2ZyQixFQUFJc0Isa0JBQW9CQSxFQUN4QnRCLEVBQUl1QixrQkFBb0JBLEVBQ3hCdkIsRUFBSXdCLGNBQWdCQSxFQUNwQnhCLEVBQUlzQyxTQUFXYixFQUFjQSxFQUFZYyxpQkFBY0MsRUFFdkQsSUFBSUMsRUFBcUJwUyxFQUFlQSxFQUFlLENBQUMsRUFBR3FSLEdBQXVCcEMsRUFBY21CLG1CQUFtQjNMLEVBQU1pTCxJQUV6SCxJQUFLLElBQUlOLEtBQVVnRCxFQUNqQnpDLEVBQUlQLEdBQVVnRCxFQUFtQmhELEdBRy9Cc0IsR0FDRkEsRUFBTzJCLGNBQWMxQyxHQUduQnRILEVBQVFpSixJQUNWakosRUFBUWlKLEdBQVE5UCxLQUFLa08sRUFBVUMsRUFyQ2xCLENBdUNqQixDQUVBLElBQUkyQyxFQUFZLENBQUMsT0FFYkMsRUFBYyxTQUFxQjlDLEVBQVdDLEdBQ2hELElBQUllLEVBQU90USxVQUFVQyxPQUFTLFFBQXNCK1IsSUFBakJoUyxVQUFVLEdBQW1CQSxVQUFVLEdBQUssQ0FBQyxFQUM1RWdSLEVBQWdCVixFQUFLZCxJQUNyQjZDLEVBQU85USxFQUF5QitPLEVBQU02QixHQUUxQ3JELEVBQWNPLFlBQVlpRCxLQUFLL0osR0FBL0J1RyxDQUF5Q1EsRUFBV0MsRUFBVTFQLEVBQWUsQ0FDM0UwUyxPQUFRQyxFQUNSQyxTQUFVQyxFQUNWQyxRQUFTQyxFQUNUckMsT0FBUXNDLEVBQ1JDLE9BQVFDLEVBQ1JDLFdBQVlDLEVBQ1p4QyxRQUFTeUMsRUFDVEMsWUFBYUMsRUFDYkMsWUFBYUMsR0FDYnJDLFlBQWFzQyxHQUNiQyxlQUFnQmpMLEdBQVNrTCxPQUN6QnpDLGNBQWVBLEVBQ2ZKLFNBQVU4QyxHQUNWNUMsa0JBQW1CNkMsR0FDbkI5QyxTQUFVK0MsR0FDVjdDLGtCQUFtQjhDLEdBQ25CQyxtQkFBb0JDLEdBQ3BCQyxxQkFBc0JDLEdBQ3RCQyxlQUFnQixXQUNkZCxHQUFjLENBQ2hCLEVBQ0FlLGNBQWUsV0FDYmYsR0FBYyxDQUNoQixFQUNBZ0Isc0JBQXVCLFNBQStCOVAsR0FDcEQrUCxFQUFlLENBQ2I5RSxTQUFVQSxFQUNWakwsS0FBTUEsRUFDTjBNLGNBQWVBLEdBRW5CLEdBQ0NxQixHQUNMLEVBRUEsU0FBU2dDLEVBQWVDLEdBQ3RCakUsRUFBY3hRLEVBQWUsQ0FDM0JvUixZQUFhc0MsR0FDYjlDLFFBQVN5QyxFQUNUMUMsU0FBVWdDLEVBQ1ZqQyxPQUFRc0MsRUFDUmpDLFNBQVU4QyxHQUNWNUMsa0JBQW1CNkMsR0FDbkI5QyxTQUFVK0MsR0FDVjdDLGtCQUFtQjhDLElBQ2xCUyxHQUNMLENBRUEsSUFBSTlCLEVBQ0FFLEVBQ0FFLEVBQ0FDLEVBQ0FFLEVBQ0FFLEVBQ0FDLEVBQ0FFLEVBQ0FNLEdBQ0FFLEdBQ0FELEdBQ0FFLEdBQ0FVLEdBQ0FoQixHQUlBaUIsR0FDQUMsR0FDQUMsR0FDQUMsR0FDQUMsR0FDQUMsR0FDQXZCLEdBQ0F3QixHQUNBQyxHQUdBQyxHQUVKQyxHQWhCSUMsSUFBc0IsRUFDdEJDLElBQWtCLEVBQ2xCQyxHQUFZLEdBVVpDLElBQXdCLEVBQ3hCQyxJQUF5QixFQUl6QkMsR0FBbUMsR0FFdkNDLElBQVUsRUFDTkMsR0FBb0IsR0FHcEJDLEdBQXFDLG9CQUFiN1IsU0FDeEI4UixHQUEwQm5ULEVBQzFCb1QsR0FBbUJ2VCxHQUFRRCxFQUFhLFdBQWEsUUFFekR5VCxHQUFtQkgsS0FBbUJqVCxJQUFxQkQsR0FBTyxjQUFlcUIsU0FBU2lTLGNBQWMsT0FDcEdDLEdBQTBCLFdBQzVCLEdBQUtMLEdBQUwsQ0FFQSxHQUFJdFQsRUFDRixPQUFPLEVBR1QsSUFBSVUsRUFBS2UsU0FBU2lTLGNBQWMsS0FFaEMsT0FEQWhULEVBQUdnQyxNQUFNa1IsUUFBVSxzQkFDZSxTQUEzQmxULEVBQUdnQyxNQUFNbVIsYUFSSyxDQVN2QixDQVY4QixHQVcxQkMsR0FBbUIsU0FBMEJwVCxFQUFJb0YsR0FDbkQsSUFBSWlPLEVBQVF4UixFQUFJN0IsR0FDWnNULEVBQVVqUCxTQUFTZ1AsRUFBTXBQLE9BQVNJLFNBQVNnUCxFQUFNRSxhQUFlbFAsU0FBU2dQLEVBQU1HLGNBQWdCblAsU0FBU2dQLEVBQU1JLGlCQUFtQnBQLFNBQVNnUCxFQUFNSyxrQkFDaEpDLEVBQVN6TyxFQUFTbEYsRUFBSSxFQUFHb0YsR0FDekJ3TyxFQUFTMU8sRUFBU2xGLEVBQUksRUFBR29GLEdBQ3pCeU8sRUFBZ0JGLEdBQVU5UixFQUFJOFIsR0FDOUJHLEVBQWlCRixHQUFVL1IsRUFBSStSLEdBQy9CRyxFQUFrQkYsR0FBaUJ4UCxTQUFTd1AsRUFBY0csWUFBYzNQLFNBQVN3UCxFQUFjSSxhQUFlNVEsRUFBUXNRLEdBQVExUCxNQUM5SGlRLEVBQW1CSixHQUFrQnpQLFNBQVN5UCxFQUFlRSxZQUFjM1AsU0FBU3lQLEVBQWVHLGFBQWU1USxFQUFRdVEsR0FBUTNQLE1BRXRJLEdBQXNCLFNBQWxCb1AsRUFBTTdOLFFBQ1IsTUFBK0IsV0FBeEI2TixFQUFNYyxlQUFzRCxtQkFBeEJkLEVBQU1jLGNBQXFDLFdBQWEsYUFHckcsR0FBc0IsU0FBbEJkLEVBQU03TixRQUNSLE9BQU82TixFQUFNZSxvQkFBb0JDLE1BQU0sS0FBS2xYLFFBQVUsRUFBSSxXQUFhLGFBR3pFLEdBQUl3VyxHQUFVRSxFQUFjLE9BQXVDLFNBQTNCQSxFQUFjLE1BQXFCLENBQ3pFLElBQUlTLEVBQWdELFNBQTNCVCxFQUFjLE1BQXNCLE9BQVMsUUFDdEUsT0FBT0QsR0FBb0MsU0FBekJFLEVBQWVTLE9BQW9CVCxFQUFlUyxRQUFVRCxFQUFtQyxhQUFiLFVBQ3RHLENBRUEsT0FBT1gsSUFBcUMsVUFBMUJFLEVBQWNyTyxTQUFpRCxTQUExQnFPLEVBQWNyTyxTQUFnRCxVQUExQnFPLEVBQWNyTyxTQUFpRCxTQUExQnFPLEVBQWNyTyxTQUFzQnVPLEdBQW1CVCxHQUF1QyxTQUE1QkQsRUFBTVAsS0FBZ0NjLEdBQXNDLFNBQTVCUCxFQUFNUCxLQUFnQ2lCLEVBQWtCRyxFQUFtQlosR0FBVyxXQUFhLFlBQ3ZWLEVBZ0NJa0IsR0FBZ0IsU0FBdUJwUCxHQUN6QyxTQUFTcVAsRUFBS3hXLEVBQU95VyxHQUNuQixPQUFPLFNBQVU3RixFQUFJQyxFQUFNVyxFQUFRL0MsR0FDakMsSUFBSWlJLEVBQVk5RixFQUFHekosUUFBUXdQLE1BQU1wVCxNQUFRc04sRUFBSzFKLFFBQVF3UCxNQUFNcFQsTUFBUXFOLEVBQUd6SixRQUFRd1AsTUFBTXBULE9BQVNzTixFQUFLMUosUUFBUXdQLE1BQU1wVCxLQUVqSCxHQUFhLE1BQVR2RCxJQUFrQnlXLEdBQVFDLEdBRzVCLE9BQU8sRUFDRixHQUFhLE1BQVQxVyxJQUEyQixJQUFWQSxFQUMxQixPQUFPLEVBQ0YsR0FBSXlXLEdBQWtCLFVBQVZ6VyxFQUNqQixPQUFPQSxFQUNGLEdBQXFCLG1CQUFWQSxFQUNoQixPQUFPd1csRUFBS3hXLEVBQU00USxFQUFJQyxFQUFNVyxFQUFRL0MsR0FBTWdJLEVBQW5DRCxDQUF5QzVGLEVBQUlDLEVBQU1XLEVBQVEvQyxHQUVsRSxJQUFJbUksR0FBY0gsRUFBTzdGLEVBQUtDLEdBQU0xSixRQUFRd1AsTUFBTXBULEtBQ2xELE9BQWlCLElBQVZ2RCxHQUFtQyxpQkFBVkEsR0FBc0JBLElBQVU0VyxHQUFjNVcsRUFBTTZXLE1BQVE3VyxFQUFNVyxRQUFRaVcsSUFBYyxDQUU1SCxDQUNGLENBRUEsSUFBSUQsRUFBUSxDQUFDLEVBQ1RHLEVBQWdCM1AsRUFBUXdQLE1BRXZCRyxHQUEyQyxVQUExQnBYLEVBQVFvWCxLQUM1QkEsRUFBZ0IsQ0FDZHZULEtBQU11VCxJQUlWSCxFQUFNcFQsS0FBT3VULEVBQWN2VCxLQUMzQm9ULEVBQU1JLFVBQVlQLEVBQUtNLEVBQWNMLE1BQU0sR0FDM0NFLEVBQU1LLFNBQVdSLEVBQUtNLEVBQWNHLEtBQ3BDTixFQUFNTyxZQUFjSixFQUFjSSxZQUNsQy9QLEVBQVF3UCxNQUFRQSxDQUNsQixFQUNJM0QsR0FBc0IsWUFDbkJnQyxJQUEyQm5ELEdBQzlCak8sRUFBSWlPLEVBQVMsVUFBVyxPQUU1QixFQUNJcUIsR0FBd0IsWUFDckI4QixJQUEyQm5ELEdBQzlCak8sRUFBSWlPLEVBQVMsVUFBVyxHQUU1QixFQUdJOEMsS0FBbUJqVCxHQUNyQm9CLFNBQVNaLGlCQUFpQixTQUFTLFNBQVV1TSxHQUMzQyxHQUFJMkYsR0FLRixPQUpBM0YsRUFBSTBJLGlCQUNKMUksRUFBSTJJLGlCQUFtQjNJLEVBQUkySSxrQkFDM0IzSSxFQUFJNEksMEJBQTRCNUksRUFBSTRJLDJCQUNwQ2pELElBQWtCLEdBQ1gsQ0FFWCxJQUFHLEdBR0wsSUFBSWtELEdBQWdDLFNBQXVDN0ksR0FDekUsR0FBSWdELEVBQVEsQ0FDVmhELEVBQU1BLEVBQUk4SSxRQUFVOUksRUFBSThJLFFBQVEsR0FBSzlJLEVBRXJDLElBQUkrSSxHQWhGMkR2TixFQWdGckJ3RSxFQUFJZ0osUUFoRm9Cdk4sRUFnRlh1RSxFQUFJaUosUUE5RTdEckQsR0FBVXNELE1BQUssU0FBVW5KLEdBQ3ZCLElBQUlvSixFQUFZcEosRUFBUzlELEdBQVN2RCxRQUFRMFEscUJBQzFDLEdBQUtELElBQWFoUSxFQUFVNEcsR0FBNUIsQ0FDQSxJQUFJcEQsRUFBT2hHLEVBQVFvSixHQUNmc0osRUFBcUI3TixHQUFLbUIsRUFBS3hGLEtBQU9nUyxHQUFhM04sR0FBS21CLEVBQUt0RixNQUFROFIsRUFDckVHLEVBQW1CN04sR0FBS2tCLEVBQUt6RixJQUFNaVMsR0FBYTFOLEdBQUtrQixFQUFLdkYsT0FBUytSLEVBRXZFLE9BQUlFLEdBQXNCQyxFQUNqQkMsRUFBTXhKLE9BRGYsQ0FMdUMsQ0FRekMsSUFDT3dKLEdBcUVMLEdBQUlSLEVBQVMsQ0FFWCxJQUFJeFYsRUFBUSxDQUFDLEVBRWIsSUFBSyxJQUFJaEQsS0FBS3lQLEVBQ1JBLEVBQUlwTyxlQUFlckIsS0FDckJnRCxFQUFNaEQsR0FBS3lQLEVBQUl6UCxJQUluQmdELEVBQU1qRCxPQUFTaUQsRUFBTXdOLE9BQVNnSSxFQUM5QnhWLEVBQU1tVixvQkFBaUIsRUFDdkJuVixFQUFNb1YscUJBQWtCLEVBRXhCSSxFQUFROU0sR0FBU3VOLFlBQVlqVyxFQUMvQixDQUNGLENBbEc0QixJQUFxQ2lJLEVBQUdDLEVBQ2hFOE4sQ0FrR04sRUFFSUUsR0FBd0IsU0FBK0J6SixHQUNyRGdELEdBQ0ZBLEVBQU96TyxXQUFXMEgsR0FBU3lOLGlCQUFpQjFKLEVBQUkxUCxPQUVwRCxFQVFBLFNBQVN5SSxHQUFTekYsRUFBSW9GLEdBQ3BCLElBQU1wRixJQUFNQSxFQUFHZ0IsVUFBNEIsSUFBaEJoQixFQUFHZ0IsU0FDNUIsS0FBTSw4Q0FBOENzTCxPQUFPLENBQUMsRUFBRStKLFNBQVM5WCxLQUFLeUIsSUFHOUV4QixLQUFLd0IsR0FBS0EsRUFFVnhCLEtBQUs0RyxRQUFVQSxFQUFVaEgsRUFBUyxDQUFDLEVBQUdnSCxHQUV0Q3BGLEVBQUcySSxHQUFXbkssS0FDZCxJQUFJdU8sRUFBVyxDQUNiNkgsTUFBTyxLQUNQMEIsTUFBTSxFQUNOQyxVQUFVLEVBQ1ZDLE1BQU8sS0FDUEMsT0FBUSxLQUNSN1EsVUFBVyxXQUFXOFEsS0FBSzFXLEVBQUdtRyxVQUFZLE1BQVEsS0FDbER3USxjQUFlLEVBRWZDLFlBQVksRUFFWkMsc0JBQXVCLEtBRXZCQyxtQkFBbUIsRUFDbkJDLFVBQVcsV0FDVCxPQUFPM0QsR0FBaUJwVCxFQUFJeEIsS0FBSzRHLFFBQ25DLEVBQ0E0UixXQUFZLGlCQUNaQyxZQUFhLGtCQUNiQyxVQUFXLGdCQUNYQyxPQUFRLFNBQ1IxYSxPQUFRLEtBQ1IyYSxpQkFBaUIsRUFDakJsTyxVQUFXLEVBQ1h5QyxPQUFRLEtBQ1IwTCxRQUFTLFNBQWlCQyxFQUFjN0gsR0FDdEM2SCxFQUFhRCxRQUFRLE9BQVE1SCxFQUFPOEgsWUFDdEMsRUFDQUMsWUFBWSxFQUNaQyxnQkFBZ0IsRUFDaEJDLFdBQVksVUFDWkMsTUFBTyxFQUNQQyxrQkFBa0IsRUFDbEJDLHFCQUFzQjlOLE9BQU8xRixTQUFXMEYsT0FBUzdLLFFBQVFtRixTQUFTbkYsT0FBTzRZLGlCQUFrQixLQUFPLEVBQ2xHQyxlQUFlLEVBQ2ZDLGNBQWUsb0JBQ2ZDLGdCQUFnQixFQUNoQkMsa0JBQW1CLEVBQ25CQyxlQUFnQixDQUNkalEsRUFBRyxFQUNIQyxFQUFHLEdBRUxpUSxnQkFBNEMsSUFBNUIzUyxHQUFTMlMsZ0JBQTRCLGlCQUFrQmxaLFNBQVdPLEVBQ2xGcVcscUJBQXNCLEdBSXhCLElBQUssSUFBSXRVLEtBRlR3SyxFQUFjYyxrQkFBa0J0TyxLQUFNd0IsRUFBSStNLEdBRXpCQSxJQUNidkwsS0FBUTRELEtBQWFBLEVBQVE1RCxHQUFRdUwsRUFBU3ZMLElBTWxELElBQUssSUFBSXRCLEtBSFRzVSxHQUFjcFAsR0FHQzVHLEtBQ1EsTUFBakIwQixFQUFHb08sT0FBTyxJQUFrQyxtQkFBYjlQLEtBQUswQixLQUN0QzFCLEtBQUswQixHQUFNMUIsS0FBSzBCLEdBQUlzUCxLQUFLaFIsT0FLN0JBLEtBQUs2WixpQkFBa0JqVCxFQUFRMlMsZUFBd0JoRixHQUVuRHZVLEtBQUs2WixrQkFFUDdaLEtBQUs0RyxRQUFReVMsb0JBQXNCLEdBSWpDelMsRUFBUWdULGVBQ1ZyWSxFQUFHQyxFQUFJLGNBQWV4QixLQUFLOFosY0FFM0J2WSxFQUFHQyxFQUFJLFlBQWF4QixLQUFLOFosYUFDekJ2WSxFQUFHQyxFQUFJLGFBQWN4QixLQUFLOFosY0FHeEI5WixLQUFLNlosa0JBQ1B0WSxFQUFHQyxFQUFJLFdBQVl4QixNQUNuQnVCLEVBQUdDLEVBQUksWUFBYXhCLE9BR3RCOFQsR0FBVXpWLEtBQUsyQixLQUFLd0IsSUFFcEJvRixFQUFRb1IsT0FBU3BSLEVBQVFvUixNQUFNK0IsS0FBTy9aLEtBQUs4WCxLQUFLbFIsRUFBUW9SLE1BQU0rQixJQUFJL1osT0FBUyxJQUUzRUosRUFBU0ksS0FBTXNLLElBQ2pCLENBaXNDQSxTQUFTMFAsR0FBUTNLLEVBQVFELEVBQU02QixFQUFRZ0osRUFBVS9LLEVBQVVnTCxFQUFZeEssRUFBZXlLLEdBQ3BGLElBQUlqTSxFQUdBa00sRUFGQW5NLEVBQVdvQixFQUFPbEYsR0FDbEJrUSxFQUFXcE0sRUFBU3JILFFBQVEwVCxPQTJCaEMsT0F4Qkk1WixPQUFPc1AsYUFBZ0JsUCxHQUFlQyxHQU14Q21OLEVBQU0zTCxTQUFTME4sWUFBWSxVQUN2QkMsVUFBVSxRQUFRLEdBQU0sR0FONUJoQyxFQUFNLElBQUk4QixZQUFZLE9BQVEsQ0FDNUJHLFNBQVMsRUFDVEMsWUFBWSxJQU9oQmxDLEVBQUltQyxHQUFLakIsRUFDVGxCLEVBQUlvQyxLQUFPakIsRUFDWG5CLEVBQUkvRyxRQUFVOEosRUFDZC9DLEVBQUlxTSxZQUFjTixFQUNsQi9MLEVBQUlzTSxRQUFVdEwsR0FBWUUsRUFDMUJsQixFQUFJdU0sWUFBY1AsR0FBY3JWLEVBQVF1SyxHQUN4Q2xCLEVBQUlpTSxnQkFBa0JBLEVBQ3RCak0sRUFBSXdCLGNBQWdCQSxFQUNwQkwsRUFBT3VCLGNBQWMxQyxHQUVqQm1NLElBQ0ZELEVBQVNDLEVBQVN0YSxLQUFLa08sRUFBVUMsRUFBS3dCLElBR2pDMEssQ0FDVCxDQUVBLFNBQVNNLEdBQWtCbFosR0FDekJBLEVBQUc0RixXQUFZLENBQ2pCLENBRUEsU0FBU3VULEtBQ1B6RyxJQUFVLENBQ1osQ0FrRkEsU0FBUzBHLEdBQVlwWixHQUtuQixJQUpBLElBQUlxWixFQUFNclosRUFBRzhDLFFBQVU5QyxFQUFHMkIsVUFBWTNCLEVBQUdzWixJQUFNdFosRUFBR3VaLEtBQU92WixFQUFHdVgsWUFDeER0YSxFQUFJb2MsRUFBSWxjLE9BQ1JxYyxFQUFNLEVBRUh2YyxLQUNMdWMsR0FBT0gsRUFBSUksV0FBV3hjLEdBR3hCLE9BQU91YyxFQUFJbkQsU0FBUyxHQUN0QixDQWFBLFNBQVNxRCxHQUFVeFosR0FDakIsT0FBTzhILFdBQVc5SCxFQUFJLEVBQ3hCLENBRUEsU0FBU3laLEdBQWdCQyxHQUN2QixPQUFPelAsYUFBYXlQLEVBQ3RCLENBcjFDQW5VLEdBQVN6SCxVQUVULENBQ0VELFlBQWEwSCxHQUNiMlEsaUJBQWtCLFNBQTBCcFosR0FDckN3QixLQUFLd0IsR0FBRzZaLFNBQVM3YyxJQUFXQSxJQUFXd0IsS0FBS3dCLEtBQy9DZ1MsR0FBYSxLQUVqQixFQUNBOEgsY0FBZSxTQUF1QnBOLEVBQUsxUCxHQUN6QyxNQUF5QyxtQkFBM0J3QixLQUFLNEcsUUFBUTJSLFVBQTJCdlksS0FBSzRHLFFBQVEyUixVQUFVeFksS0FBS0MsS0FBTWtPLEVBQUsxUCxFQUFRMFMsR0FBVWxSLEtBQUs0RyxRQUFRMlIsU0FDOUgsRUFDQXVCLFlBQWEsU0FFYjVMLEdBQ0UsR0FBS0EsRUFBSWtDLFdBQVQsQ0FFQSxJQUFJMUUsRUFBUTFMLEtBQ1J3QixFQUFLeEIsS0FBS3dCLEdBQ1ZvRixFQUFVNUcsS0FBSzRHLFFBQ2ZnUyxFQUFrQmhTLEVBQVFnUyxnQkFDMUIyQyxFQUFPck4sRUFBSXFOLEtBQ1hDLEVBQVF0TixFQUFJOEksU0FBVzlJLEVBQUk4SSxRQUFRLElBQU05SSxFQUFJdU4sYUFBbUMsVUFBcEJ2TixFQUFJdU4sYUFBMkJ2TixFQUMzRjFQLEdBQVVnZCxHQUFTdE4sR0FBSzFQLE9BQ3hCa2QsRUFBaUJ4TixFQUFJMVAsT0FBT21kLGFBQWV6TixFQUFJME4sTUFBUTFOLEVBQUkwTixLQUFLLElBQU0xTixFQUFJMk4sY0FBZ0IzTixFQUFJMk4sZUFBZSxLQUFPcmQsRUFDcEhQLEVBQVMySSxFQUFRM0ksT0FLckIsR0FzeUNKLFNBQWdDNmQsR0FDOUIzSCxHQUFrQnhWLE9BQVMsRUFDM0IsSUFBSW9kLEVBQVNELEVBQUt0WCxxQkFBcUIsU0FDbkN3WCxFQUFNRCxFQUFPcGQsT0FFakIsS0FBT3FkLEtBQU8sQ0FDWixJQUFJeGEsRUFBS3VhLEVBQU9DLEdBQ2hCeGEsRUFBR3lhLFNBQVc5SCxHQUFrQjlWLEtBQUttRCxFQUN2QyxDQUNGLENBbHpDSTBhLENBQXVCMWEsSUFHbkIwUCxLQUlBLHdCQUF3QmdILEtBQUtxRCxJQUF3QixJQUFmck4sRUFBSWlPLFFBQWdCdlYsRUFBUW1SLFlBS2xFMkQsRUFBZVUsb0JBS2RwYyxLQUFLNlosa0JBQW1CNVksSUFBVXpDLEdBQTJDLFdBQWpDQSxFQUFPOEYsUUFBUXNELG1CQUloRXBKLEVBQVNrRSxFQUFRbEUsRUFBUW9JLEVBQVFRLFVBQVc1RixHQUFJLEtBRWxDaEQsRUFBTzRPLFVBSWpCdUUsSUFBZW5ULEdBQW5CLENBU0EsR0FIQTRULEdBQVczSyxFQUFNakosR0FDakI2VCxHQUFvQjVLLEVBQU1qSixFQUFRb0ksRUFBUVEsV0FFcEIsbUJBQVhuSixHQUNULEdBQUlBLEVBQU84QixLQUFLQyxLQUFNa08sRUFBSzFQLEVBQVF3QixNQWNqQyxPQWJBK1MsRUFBZSxDQUNiOUUsU0FBVXZDLEVBQ1Z1RCxPQUFReU0sRUFDUjFZLEtBQU0sU0FDTmtNLFNBQVUxUSxFQUNWNFEsS0FBTTVOLEVBQ042TixPQUFRN04sSUFHVnNQLEVBQVksU0FBVXBGLEVBQU8sQ0FDM0J3QyxJQUFLQSxTQUVQMEssR0FBbUIxSyxFQUFJa0MsWUFBY2xDLEVBQUkwSSx1QkFHdEMsR0FBSTNZLElBQ1RBLEVBQVNBLEVBQU80WCxNQUFNLEtBQUt1QixNQUFLLFNBQVVpRixHQUd4QyxHQUZBQSxFQUFXM1osRUFBUWdaLEVBQWdCVyxFQUFTQyxPQUFROWEsR0FBSSxHQWV0RCxPQVpBdVIsRUFBZSxDQUNiOUUsU0FBVXZDLEVBQ1Z1RCxPQUFRb04sRUFDUnJaLEtBQU0sU0FDTmtNLFNBQVUxUSxFQUNWNlEsT0FBUTdOLEVBQ1I0TixLQUFNNU4sSUFHUnNQLEVBQVksU0FBVXBGLEVBQU8sQ0FDM0J3QyxJQUFLQSxLQUVBLENBRVgsS0FJRSxZQURBMEssR0FBbUIxSyxFQUFJa0MsWUFBY2xDLEVBQUkwSSxrQkFLekNoUSxFQUFRcVIsU0FBV3ZWLEVBQVFnWixFQUFnQjlVLEVBQVFxUixPQUFRelcsR0FBSSxJQUtuRXhCLEtBQUt1YyxrQkFBa0JyTyxFQUFLc04sRUFBT2hkLEVBeERqQyxDQXpDbUIsQ0FrR3ZCLEVBQ0ErZCxrQkFBbUIsU0FFbkJyTyxFQUVBc04sRUFFQWhkLEdBQ0UsSUFJSWdlLEVBSkE5USxFQUFRMUwsS0FDUndCLEVBQUtrSyxFQUFNbEssR0FDWG9GLEVBQVU4RSxFQUFNOUUsUUFDaEI2VixFQUFnQmpiLEVBQUdpYixjQUd2QixHQUFJamUsSUFBVzBTLEdBQVUxUyxFQUFPaUUsYUFBZWpCLEVBQUksQ0FDakQsSUFBSXlZLEVBQVdwVixFQUFRckcsR0F3RXZCLEdBdkVBK1MsRUFBUy9QLEVBRVQ0UCxHQURBRixFQUFTMVMsR0FDU2lFLFdBQ2xCZ1AsRUFBU1AsRUFBT3dMLFlBQ2hCL0ssRUFBYW5ULEVBQ2J5VSxHQUFjck0sRUFBUXdQLE1BQ3RCblAsR0FBU0UsUUFBVStKLEVBQ25CZ0MsR0FBUyxDQUNQMVUsT0FBUTBTLEVBQ1JnRyxTQUFVc0UsR0FBU3ROLEdBQUtnSixRQUN4QkMsU0FBVXFFLEdBQVN0TixHQUFLaUosU0FFMUI3RCxHQUFrQkosR0FBT2dFLFFBQVUrQyxFQUFTNVUsS0FDNUNrTyxHQUFpQkwsR0FBT2lFLFFBQVU4QyxFQUFTN1UsSUFDM0NwRixLQUFLMmMsUUFBVW5CLEdBQVN0TixHQUFLZ0osUUFDN0JsWCxLQUFLNGMsUUFBVXBCLEdBQVN0TixHQUFLaUosUUFDN0JqRyxFQUFPMU4sTUFBTSxlQUFpQixNQUU5QmdaLEVBQWMsV0FDWjFMLEVBQVksYUFBY3BGLEVBQU8sQ0FDL0J3QyxJQUFLQSxJQUdIakgsR0FBU2tILGNBQ1h6QyxFQUFNbVIsV0FPUm5SLEVBQU1vUiw2QkFFRDliLEdBQVcwSyxFQUFNbU8sa0JBQ3BCM0ksRUFBTzlKLFdBQVksR0FJckJzRSxFQUFNcVIsa0JBQWtCN08sRUFBS3NOLEdBRzdCekksRUFBZSxDQUNiOUUsU0FBVXZDLEVBQ1YxSSxLQUFNLFNBQ04wTSxjQUFleEIsSUFJakJuTCxFQUFZbU8sRUFBUXRLLEVBQVE2UixhQUFhLEdBQzNDLEVBR0E3UixFQUFRK1IsT0FBTzlDLE1BQU0sS0FBS2hYLFNBQVEsU0FBVXdkLEdBQzFDaFksRUFBSzZNLEVBQVFtTCxFQUFTQyxPQUFRNUIsR0FDaEMsSUFDQW5aLEVBQUdrYixFQUFlLFdBQVkxRixJQUM5QnhWLEVBQUdrYixFQUFlLFlBQWExRixJQUMvQnhWLEVBQUdrYixFQUFlLFlBQWExRixJQUMvQnhWLEVBQUdrYixFQUFlLFVBQVcvUSxFQUFNbVIsU0FDbkN0YixFQUFHa2IsRUFBZSxXQUFZL1EsRUFBTW1SLFNBQ3BDdGIsRUFBR2tiLEVBQWUsY0FBZS9RLEVBQU1tUixTQUVuQzdiLEdBQVdoQixLQUFLNlosa0JBQ2xCN1osS0FBSzRHLFFBQVF5UyxvQkFBc0IsRUFDbkNuSSxFQUFPOUosV0FBWSxHQUdyQjBKLEVBQVksYUFBYzlRLEtBQU0sQ0FDOUJrTyxJQUFLQSxLQUdIdEgsRUFBUXVTLE9BQVd2UyxFQUFRd1MsbUJBQW9Cb0MsR0FBWXhiLEtBQUs2WixrQkFBcUI5WSxHQUFRRCxHQWtCL0YwYixRQWxCNkcsQ0FDN0csR0FBSXZWLEdBQVNrSCxjQUdYLFlBRkFuTyxLQUFLNmMsVUFRUHRiLEVBQUdrYixFQUFlLFVBQVcvUSxFQUFNc1IscUJBQ25DemIsRUFBR2tiLEVBQWUsV0FBWS9RLEVBQU1zUixxQkFDcEN6YixFQUFHa2IsRUFBZSxjQUFlL1EsRUFBTXNSLHFCQUN2Q3piLEVBQUdrYixFQUFlLFlBQWEvUSxFQUFNdVIsOEJBQ3JDMWIsRUFBR2tiLEVBQWUsWUFBYS9RLEVBQU11Uiw4QkFDckNyVyxFQUFRZ1QsZ0JBQWtCclksRUFBR2tiLEVBQWUsY0FBZS9RLEVBQU11Uiw4QkFDakV2UixFQUFNd1IsZ0JBQWtCMVQsV0FBV2dULEVBQWE1VixFQUFRdVMsTUFDMUQsQ0FHRixDQUNGLEVBQ0E4RCw2QkFBOEIsU0FFOUIvUixHQUNFLElBQUlzUSxFQUFRdFEsRUFBRThMLFFBQVU5TCxFQUFFOEwsUUFBUSxHQUFLOUwsRUFFbkNoQyxLQUFLc0QsSUFBSXRELEtBQUtpVSxJQUFJM0IsRUFBTXRFLFFBQVVsWCxLQUFLMmMsUUFBU3pULEtBQUtpVSxJQUFJM0IsRUFBTXJFLFFBQVVuWCxLQUFLNGMsVUFBWTFULEtBQUtrVSxNQUFNcGQsS0FBSzRHLFFBQVF5UyxxQkFBdUJyWixLQUFLNlosaUJBQW1CblosT0FBTzRZLGtCQUFvQixLQUM5THRaLEtBQUtnZCxxQkFFVCxFQUNBQSxvQkFBcUIsV0FDbkI5TCxHQUFVd0osR0FBa0J4SixHQUM1QnZGLGFBQWEzTCxLQUFLa2QsaUJBRWxCbGQsS0FBSzhjLDJCQUNQLEVBQ0FBLDBCQUEyQixXQUN6QixJQUFJTCxFQUFnQnpjLEtBQUt3QixHQUFHaWIsY0FDNUI3YSxFQUFJNmEsRUFBZSxVQUFXemMsS0FBS2dkLHFCQUNuQ3BiLEVBQUk2YSxFQUFlLFdBQVl6YyxLQUFLZ2QscUJBQ3BDcGIsRUFBSTZhLEVBQWUsY0FBZXpjLEtBQUtnZCxxQkFDdkNwYixFQUFJNmEsRUFBZSxZQUFhemMsS0FBS2lkLDhCQUNyQ3JiLEVBQUk2YSxFQUFlLFlBQWF6YyxLQUFLaWQsOEJBQ3JDcmIsRUFBSTZhLEVBQWUsY0FBZXpjLEtBQUtpZCw2QkFDekMsRUFDQUYsa0JBQW1CLFNBRW5CN08sRUFFQXNOLEdBQ0VBLEVBQVFBLEdBQTRCLFNBQW5CdE4sRUFBSXVOLGFBQTBCdk4sR0FFMUNsTyxLQUFLNlosaUJBQW1CMkIsRUFDdkJ4YixLQUFLNEcsUUFBUWdULGVBQ2ZyWSxFQUFHZ0IsU0FBVSxjQUFldkMsS0FBS3FkLGNBRWpDOWIsRUFBR2dCLFNBRE1pWixFQUNJLFlBRUEsWUFGYXhiLEtBQUtxZCxlQUtqQzliLEVBQUcyUCxFQUFRLFVBQVdsUixNQUN0QnVCLEVBQUdnUSxFQUFRLFlBQWF2UixLQUFLc2QsZUFHL0IsSUFDTS9hLFNBQVNnYixVQUVYckMsSUFBVSxXQUNSM1ksU0FBU2diLFVBQVVDLE9BQ3JCLElBRUE5YyxPQUFPK2MsZUFBZUMsaUJBRTFCLENBQUUsTUFBT0MsR0FBTSxDQUNqQixFQUNBQyxhQUFjLFNBQXNCQyxFQUFVM1AsR0FJNUMsR0FGQTBGLElBQXNCLEVBRWxCckMsR0FBVUwsRUFBUSxDQUNwQkosRUFBWSxjQUFlOVEsS0FBTSxDQUMvQmtPLElBQUtBLElBR0hsTyxLQUFLNlosaUJBQ1B0WSxFQUFHZ0IsU0FBVSxXQUFZb1YsSUFHM0IsSUFBSS9RLEVBQVU1RyxLQUFLNEcsU0FFbEJpWCxHQUFZOWEsRUFBWW1PLEVBQVF0SyxFQUFROFIsV0FBVyxHQUNwRDNWLEVBQVltTyxFQUFRdEssRUFBUTRSLFlBQVksR0FDeEN2UixHQUFTa0wsT0FBU25TLEtBQ2xCNmQsR0FBWTdkLEtBQUs4ZCxlQUVqQi9LLEVBQWUsQ0FDYjlFLFNBQVVqTyxLQUNWZ0QsS0FBTSxRQUNOME0sY0FBZXhCLEdBRW5CLE1BQ0VsTyxLQUFLK2QsVUFFVCxFQUNBQyxpQkFBa0IsV0FDaEIsR0FBSTdLLEdBQVUsQ0FDWm5ULEtBQUsyYyxPQUFTeEosR0FBUytELFFBQ3ZCbFgsS0FBSzRjLE9BQVN6SixHQUFTZ0UsUUFFdkIxRSxLQUtBLElBSEEsSUFBSWpVLEVBQVMrRCxTQUFTMGIsaUJBQWlCOUssR0FBUytELFFBQVMvRCxHQUFTZ0UsU0FDOUQ3USxFQUFTOUgsRUFFTkEsR0FBVUEsRUFBT21kLGFBQ3RCbmQsRUFBU0EsRUFBT21kLFdBQVdzQyxpQkFBaUI5SyxHQUFTK0QsUUFBUy9ELEdBQVNnRSxZQUN4RDdRLEdBQ2ZBLEVBQVM5SCxFQUtYLEdBRkEwUyxFQUFPek8sV0FBVzBILEdBQVN5TixpQkFBaUJwWixHQUV4QzhILEVBQ0YsRUFBRyxDQUNELEdBQUlBLEVBQU82RCxHQUFVLENBU25CLEdBUFc3RCxFQUFPNkQsR0FBU3VOLFlBQVksQ0FDckNSLFFBQVMvRCxHQUFTK0QsUUFDbEJDLFFBQVNoRSxHQUFTZ0UsUUFDbEIzWSxPQUFRQSxFQUNSeVEsT0FBUTNJLE1BR090RyxLQUFLNEcsUUFBUXFTLGVBQzVCLEtBRUosQ0FFQXphLEVBQVM4SCxDQUNYLE9BRU9BLEVBQVNBLEVBQU83RCxZQUd6QmtRLElBQ0YsQ0FDRixFQUNBMEssYUFBYyxTQUVkblAsR0FDRSxHQUFJZ0YsR0FBUSxDQUNWLElBQUl0TSxFQUFVNUcsS0FBSzRHLFFBQ2Y4UyxFQUFvQjlTLEVBQVE4UyxrQkFDNUJDLEVBQWlCL1MsRUFBUStTLGVBQ3pCNkIsRUFBUXROLEVBQUk4SSxRQUFVOUksRUFBSThJLFFBQVEsR0FBSzlJLEVBQ3ZDZ1EsRUFBYzVNLEdBQVcxTixFQUFPME4sR0FBUyxHQUN6Q3ZMLEVBQVN1TCxHQUFXNE0sR0FBZUEsRUFBWWxZLEVBQy9DQyxFQUFTcUwsR0FBVzRNLEdBQWVBLEVBQVloWSxFQUMvQ2lZLEVBQXVCOUosSUFBMkJWLElBQXVCN0wsRUFBd0I2TCxJQUNqR3lLLEdBQU01QyxFQUFNdEUsUUFBVWhFLEdBQU9nRSxRQUFVeUMsRUFBZWpRLElBQU0zRCxHQUFVLElBQU1vWSxFQUF1QkEsRUFBcUIsR0FBS2xLLEdBQWlDLEdBQUssSUFBTWxPLEdBQVUsR0FDbkxzWSxHQUFNN0MsRUFBTXJFLFFBQVVqRSxHQUFPaUUsUUFBVXdDLEVBQWVoUSxJQUFNMUQsR0FBVSxJQUFNa1ksRUFBdUJBLEVBQXFCLEdBQUtsSyxHQUFpQyxHQUFLLElBQU1oTyxHQUFVLEdBRXZMLElBQUtnQixHQUFTa0wsU0FBV3lCLEdBQXFCLENBQzVDLEdBQUk4RixHQUFxQnhRLEtBQUtzRCxJQUFJdEQsS0FBS2lVLElBQUkzQixFQUFNdEUsUUFBVWxYLEtBQUsyYyxRQUFTelQsS0FBS2lVLElBQUkzQixFQUFNckUsUUFBVW5YLEtBQUs0YyxTQUFXbEQsRUFDaEgsT0FHRjFaLEtBQUtzZCxhQUFhcFAsR0FBSyxFQUN6QixDQUVBLEdBQUlvRCxFQUFTLENBQ1A0TSxHQUNGQSxFQUFZaFQsR0FBS2tULEdBQU1oTCxJQUFVLEdBQ2pDOEssRUFBWWpULEdBQUtvVCxHQUFNaEwsSUFBVSxJQUVqQzZLLEVBQWMsQ0FDWmxZLEVBQUcsRUFDSHNZLEVBQUcsRUFDSEMsRUFBRyxFQUNIclksRUFBRyxFQUNIZ0YsRUFBR2tULEVBQ0huVCxFQUFHb1QsR0FJUCxJQUFJRyxFQUFZLFVBQVUxUSxPQUFPb1EsRUFBWWxZLEVBQUcsS0FBSzhILE9BQU9vUSxFQUFZSSxFQUFHLEtBQUt4USxPQUFPb1EsRUFBWUssRUFBRyxLQUFLelEsT0FBT29RLEVBQVloWSxFQUFHLEtBQUs0SCxPQUFPb1EsRUFBWWhULEVBQUcsS0FBSzRDLE9BQU9vUSxFQUFZalQsRUFBRyxLQUN2TDVILEVBQUlpTyxFQUFTLGtCQUFtQmtOLEdBQ2hDbmIsRUFBSWlPLEVBQVMsZUFBZ0JrTixHQUM3Qm5iLEVBQUlpTyxFQUFTLGNBQWVrTixHQUM1Qm5iLEVBQUlpTyxFQUFTLFlBQWFrTixHQUMxQnBMLEdBQVNnTCxFQUNUL0ssR0FBU2dMLEVBQ1RsTCxHQUFXcUksQ0FDYixDQUVBdE4sRUFBSWtDLFlBQWNsQyxFQUFJMEksZ0JBQ3hCLENBQ0YsRUFDQWtILGFBQWMsV0FHWixJQUFLeE0sRUFBUyxDQUNaLElBQUlyTSxFQUFZakYsS0FBSzRHLFFBQVE2UyxlQUFpQmxYLFNBQVN1RyxLQUFPeUksRUFDMUQxRyxFQUFPaEcsRUFBUXFNLEdBQVEsRUFBTW1ELElBQXlCLEVBQU1wUCxHQUM1RDJCLEVBQVU1RyxLQUFLNEcsUUFFbkIsR0FBSXlOLEdBQXlCLENBSTNCLElBRkFWLEdBQXNCMU8sRUFFMEIsV0FBekM1QixFQUFJc1EsR0FBcUIsYUFBc0UsU0FBMUN0USxFQUFJc1EsR0FBcUIsY0FBMkJBLEtBQXdCcFIsVUFDdElvUixHQUFzQkEsR0FBb0JsUixXQUd4Q2tSLEtBQXdCcFIsU0FBU3VHLE1BQVE2SyxLQUF3QnBSLFNBQVNxQyxpQkFDeEUrTyxLQUF3QnBSLFdBQVVvUixHQUFzQmpQLEtBQzVEbUcsRUFBS3pGLEtBQU91TyxHQUFvQnhMLFVBQ2hDMEMsRUFBS3hGLE1BQVFzTyxHQUFvQnpMLFlBRWpDeUwsR0FBc0JqUCxJQUd4QnVQLEdBQW1Dbk0sRUFBd0I2TCxHQUM3RCxDQUdBNVEsRUFEQXVPLEVBQVVKLEVBQU9oSCxXQUFVLEdBQ050RCxFQUFRNFIsWUFBWSxHQUN6Q3pWLEVBQVl1TyxFQUFTMUssRUFBUTRTLGVBQWUsR0FDNUN6VyxFQUFZdU8sRUFBUzFLLEVBQVE4UixXQUFXLEdBQ3hDclYsRUFBSWlPLEVBQVMsYUFBYyxJQUMzQmpPLEVBQUlpTyxFQUFTLFlBQWEsSUFDMUJqTyxFQUFJaU8sRUFBUyxhQUFjLGNBQzNCak8sRUFBSWlPLEVBQVMsU0FBVSxHQUN2QmpPLEVBQUlpTyxFQUFTLE1BQU96RyxFQUFLekYsS0FDekIvQixFQUFJaU8sRUFBUyxPQUFRekcsRUFBS3hGLE1BQzFCaEMsRUFBSWlPLEVBQVMsUUFBU3pHLEVBQUtwRixPQUMzQnBDLEVBQUlpTyxFQUFTLFNBQVV6RyxFQUFLckYsUUFDNUJuQyxFQUFJaU8sRUFBUyxVQUFXLE9BQ3hCak8sRUFBSWlPLEVBQVMsV0FBWStDLEdBQTBCLFdBQWEsU0FDaEVoUixFQUFJaU8sRUFBUyxTQUFVLFVBQ3ZCak8sRUFBSWlPLEVBQVMsZ0JBQWlCLFFBQzlCckssR0FBU0MsTUFBUW9LLEVBQ2pCck0sRUFBVXdaLFlBQVluTixHQUV0QmpPLEVBQUlpTyxFQUFTLG1CQUFvQmdDLEdBQWtCek4sU0FBU3lMLEVBQVE5TixNQUFNaUMsT0FBUyxJQUFNLEtBQU84TixHQUFpQjFOLFNBQVN5TCxFQUFROU4sTUFBTWdDLFFBQVUsSUFBTSxJQUMxSixDQUNGLEVBQ0E4WCxhQUFjLFNBRWRwUCxFQUVBMlAsR0FDRSxJQUFJblMsRUFBUTFMLEtBRVI4WSxFQUFlNUssRUFBSTRLLGFBQ25CbFMsRUFBVThFLEVBQU05RSxRQUNwQmtLLEVBQVksWUFBYTlRLEtBQU0sQ0FDN0JrTyxJQUFLQSxJQUdIakgsR0FBU2tILGNBQ1huTyxLQUFLNmMsV0FLUC9MLEVBQVksYUFBYzlRLE1BRXJCaUgsR0FBU2tILGlCQUNaeUQsRUFBVWhJLEVBQU1zSCxJQUNSd04sZ0JBQWdCLE1BQ3hCOU0sRUFBUXhLLFdBQVksRUFDcEJ3SyxFQUFRcE8sTUFBTSxlQUFpQixHQUUvQnhELEtBQUsyZSxhQUVMNWIsRUFBWTZPLEVBQVM1UixLQUFLNEcsUUFBUTZSLGFBQWEsR0FDL0N4UixHQUFTWSxNQUFRK0osR0FJbkJsRyxFQUFNa1QsUUFBVTFELElBQVUsV0FDeEJwSyxFQUFZLFFBQVNwRixHQUNqQnpFLEdBQVNrSCxnQkFFUnpDLEVBQU05RSxRQUFRMFIsbUJBQ2pCL0csRUFBT3NOLGFBQWFqTixFQUFTVixHQUcvQnhGLEVBQU1pVCxhQUVONUwsRUFBZSxDQUNiOUUsU0FBVXZDLEVBQ1YxSSxLQUFNLFVBRVYsS0FDQzZhLEdBQVk5YSxFQUFZbU8sRUFBUXRLLEVBQVE4UixXQUFXLEdBRWhEbUYsR0FDRmhLLElBQWtCLEVBQ2xCbkksRUFBTW9ULFFBQVVDLFlBQVlyVCxFQUFNc1MsaUJBQWtCLE1BR3BEcGMsRUFBSVcsU0FBVSxVQUFXbUosRUFBTW1SLFNBQy9CamIsRUFBSVcsU0FBVSxXQUFZbUosRUFBTW1SLFNBQ2hDamIsRUFBSVcsU0FBVSxjQUFlbUosRUFBTW1SLFNBRS9CL0QsSUFDRkEsRUFBYWtHLGNBQWdCLE9BQzdCcFksRUFBUWlTLFNBQVdqUyxFQUFRaVMsUUFBUTlZLEtBQUsyTCxFQUFPb04sRUFBYzVILElBRy9EM1AsRUFBR2dCLFNBQVUsT0FBUW1KLEdBRXJCckksRUFBSTZOLEVBQVEsWUFBYSxrQkFHM0IwQyxJQUFzQixFQUN0QmxJLEVBQU11VCxhQUFlL0QsR0FBVXhQLEVBQU1rUyxhQUFhNU0sS0FBS3RGLEVBQU9tUyxFQUFVM1AsSUFDeEUzTSxFQUFHZ0IsU0FBVSxjQUFlbUosR0FDNUJzRyxJQUFRLEVBRUovUSxHQUNGb0MsRUFBSWQsU0FBU3VHLEtBQU0sY0FBZSxRQUV0QyxFQUVBNE8sWUFBYSxTQUVieEosR0FDRSxJQUVJK0wsRUFDQUMsRUFDQWdGLEVBT0FDLEVBWEEzZCxFQUFLeEIsS0FBS3dCLEdBQ1ZoRCxFQUFTMFAsRUFBSTFQLE9BSWJvSSxFQUFVNUcsS0FBSzRHLFFBQ2Z3UCxFQUFReFAsRUFBUXdQLE1BQ2hCbEUsRUFBaUJqTCxHQUFTa0wsT0FDMUJpTixFQUFVbk0sS0FBZ0JtRCxFQUMxQmlKLEVBQVV6WSxFQUFRa1IsS0FDbEJ3SCxFQUFlck4sSUFBZUMsRUFFOUJ4RyxFQUFRMUwsS0FDUnVmLEdBQWlCLEVBRXJCLElBQUlyTCxHQUFKLENBZ0hBLFFBTjJCLElBQXZCaEcsRUFBSTBJLGdCQUNOMUksRUFBSWtDLFlBQWNsQyxFQUFJMEksaUJBR3hCcFksRUFBU2tFLEVBQVFsRSxFQUFRb0ksRUFBUVEsVUFBVzVGLEdBQUksR0FDaERnZSxFQUFjLFlBQ1Z2WSxHQUFTa0gsY0FBZSxPQUFPb1IsRUFFbkMsR0FBSXJPLEVBQU9tSyxTQUFTbk4sRUFBSTFQLFNBQVdBLEVBQU80TyxVQUFZNU8sRUFBT3NPLFlBQWN0TyxFQUFPdU8sWUFBY3JCLEVBQU0rVCx3QkFBMEJqaEIsRUFDOUgsT0FBT2toQixHQUFVLEdBS25CLEdBRkE3TCxJQUFrQixFQUVkM0IsSUFBbUJ0TCxFQUFRbVIsV0FBYXFILEVBQVVDLElBQVlILEVBQVM5TixJQUFhRyxHQUN0RlUsS0FBZ0JqUyxPQUFTQSxLQUFLeVEsWUFBY3dDLEdBQVl1RCxVQUFVeFcsS0FBTWtTLEVBQWdCaEIsRUFBUWhELEtBQVNrSSxFQUFNSyxTQUFTelcsS0FBTWtTLEVBQWdCaEIsRUFBUWhELElBQU8sQ0FJN0osR0FIQWlSLEVBQStDLGFBQXBDbmYsS0FBS3NiLGNBQWNwTixFQUFLMVAsR0FDbkN5YixFQUFXcFYsRUFBUXFNLEdBQ25Cc08sRUFBYyxpQkFDVnZZLEdBQVNrSCxjQUFlLE9BQU9vUixFQUVuQyxHQUFJTCxFQWlCRixPQWhCQTlOLEVBQVdHLEVBRVhsUSxJQUVBckIsS0FBSzJlLGFBRUxhLEVBQWMsVUFFVHZZLEdBQVNrSCxnQkFDUnNELEVBQ0ZGLEVBQU9zTixhQUFhM04sRUFBUU8sR0FFNUJGLEVBQU9rTixZQUFZdk4sSUFJaEJ3TyxHQUFVLEdBR25CLElBQUlDLEVBQWN0WSxFQUFVN0YsRUFBSW9GLEVBQVFRLFdBRXhDLElBQUt1WSxHQXNqQlgsU0FBc0J6UixFQUFLaVIsRUFBVWxSLEdBQ25DLElBQUlwRCxFQUFPaEcsRUFBUXdDLEVBQVU0RyxFQUFTek0sR0FBSXlNLEVBQVNySCxRQUFRUSxZQUN2RHdZLEVBQVMsR0FDYixPQUFPVCxFQUFXalIsRUFBSWdKLFFBQVVyTSxFQUFLdEYsTUFBUXFhLEdBQVUxUixFQUFJZ0osU0FBV3JNLEVBQUt0RixPQUFTMkksRUFBSWlKLFFBQVV0TSxFQUFLdkYsUUFBVTRJLEVBQUlnSixTQUFXck0sRUFBS3hGLEtBQU82SSxFQUFJZ0osUUFBVXJNLEVBQUt0RixPQUFTMkksRUFBSWlKLFFBQVV0TSxFQUFLekYsS0FBTzhJLEVBQUlnSixTQUFXck0sRUFBS3RGLE9BQVMySSxFQUFJaUosUUFBVXRNLEVBQUt2RixPQUFTc2EsQ0FDN1AsQ0ExakIwQkMsQ0FBYTNSLEVBQUtpUixFQUFVbmYsUUFBVTJmLEVBQVl2UyxTQUFVLENBRzlFLEdBQUl1UyxJQUFnQnpPLEVBQ2xCLE9BQU93TyxHQUFVLEdBWW5CLEdBUklDLEdBQWVuZSxJQUFPME0sRUFBSTFQLFNBQzVCQSxFQUFTbWhCLEdBR1BuaEIsSUFDRjBiLEVBQWFyVixFQUFRckcsS0FHMEQsSUFBN0V3YixHQUFRekksRUFBUS9QLEVBQUkwUCxFQUFRK0ksRUFBVXpiLEVBQVEwYixFQUFZaE0sSUFBTzFQLEdBYW5FLE9BWkE2QyxJQUVJc2UsR0FBZUEsRUFBWWpELFlBRTdCbGIsRUFBR3FkLGFBQWEzTixFQUFReU8sRUFBWWpELGFBRXBDbGIsRUFBR2lkLFlBQVl2TixHQUdqQkUsRUFBVzVQLEVBRVhzZSxJQUNPSixHQUFVLEVBRXJCLE1BQU8sR0FBSUMsR0FpaEJqQixTQUF1QnpSLEVBQUtpUixFQUFVbFIsR0FDcEMsSUFBSXBELEVBQU9oRyxFQUFRNkIsRUFBU3VILEVBQVN6TSxHQUFJLEVBQUd5TSxFQUFTckgsU0FBUyxJQUMxRGdaLEVBQVMsR0FDYixPQUFPVCxFQUFXalIsRUFBSWdKLFFBQVVyTSxFQUFLeEYsS0FBT3VhLEdBQVUxUixFQUFJaUosUUFBVXRNLEVBQUt6RixLQUFPOEksRUFBSWdKLFFBQVVyTSxFQUFLdEYsTUFBUTJJLEVBQUlpSixRQUFVdE0sRUFBS3pGLElBQU13YSxHQUFVMVIsRUFBSWlKLFFBQVV0TSxFQUFLdkYsUUFBVTRJLEVBQUlnSixRQUFVck0sRUFBS3hGLElBQ2hNLENBcmhCZ0MwYSxDQUFjN1IsRUFBS2lSLEVBQVVuZixNQUFPLENBRTVELElBQUlnZ0IsRUFBYXRaLEVBQVNsRixFQUFJLEVBQUdvRixHQUFTLEdBRTFDLEdBQUlvWixJQUFlOU8sRUFDakIsT0FBT3dPLEdBQVUsR0FNbkIsR0FGQXhGLEVBQWFyVixFQURickcsRUFBU3doQixJQUdxRSxJQUExRWhHLEdBQVF6SSxFQUFRL1AsRUFBSTBQLEVBQVErSSxFQUFVemIsRUFBUTBiLEVBQVloTSxHQUFLLEdBTWpFLE9BTEE3TSxJQUNBRyxFQUFHcWQsYUFBYTNOLEVBQVE4TyxHQUN4QjVPLEVBQVc1UCxFQUVYc2UsSUFDT0osR0FBVSxFQUVyQixNQUFPLEdBQUlsaEIsRUFBT2lFLGFBQWVqQixFQUFJLENBQ25DMFksRUFBYXJWLEVBQVFyRyxHQUNyQixJQUFJK1osRUFDQTBILEVBY0FDLEVBYkFDLEVBQWlCalAsRUFBT3pPLGFBQWVqQixFQUN2QzRlLEdBbDlCYSxTQUE0Qm5HLEVBQVVDLEVBQVlpRixHQUN6RSxJQUFJa0IsRUFBY2xCLEVBQVdsRixFQUFTNVUsS0FBTzRVLEVBQVM3VSxJQUNsRGtiLEVBQWNuQixFQUFXbEYsRUFBUzFVLE1BQVEwVSxFQUFTM1UsT0FDbkRpYixFQUFrQnBCLEVBQVdsRixFQUFTeFUsTUFBUXdVLEVBQVN6VSxPQUN2RGdiLEVBQWNyQixFQUFXakYsRUFBVzdVLEtBQU82VSxFQUFXOVUsSUFDdERxYixFQUFjdEIsRUFBV2pGLEVBQVczVSxNQUFRMlUsRUFBVzVVLE9BQ3ZEb2IsRUFBa0J2QixFQUFXakYsRUFBV3pVLE1BQVF5VSxFQUFXMVUsT0FDL0QsT0FBTzZhLElBQWdCRyxHQUFlRixJQUFnQkcsR0FBZUosRUFBY0UsRUFBa0IsSUFBTUMsRUFBY0UsRUFBa0IsQ0FDN0ksQ0EwOEIrQkMsQ0FBbUJ6UCxFQUFPOUQsVUFBWThELEVBQU9uRixRQUFVa08sRUFBVXpiLEVBQU80TyxVQUFZNU8sRUFBT3VOLFFBQVVtTyxFQUFZaUYsR0FDcEl5QixFQUFRekIsRUFBVyxNQUFRLE9BQzNCMEIsRUFBa0IxYSxFQUFlM0gsRUFBUSxNQUFPLFFBQVUySCxFQUFlK0ssRUFBUSxNQUFPLE9BQ3hGNFAsRUFBZUQsRUFBa0JBLEVBQWdCMVksZUFBWSxFQVdqRSxHQVRJcUwsS0FBZWhWLElBQ2pCeWhCLEVBQXdCL0YsRUFBVzBHLEdBQ25DN00sSUFBd0IsRUFDeEJDLElBQTBCb00sR0FBbUJ4WixFQUFRd1IsWUFBYytILEdBR3JFNUgsRUEwZlIsU0FBMkJySyxFQUFLMVAsRUFBUTBiLEVBQVlpRixFQUFVaEgsRUFBZUUsRUFBdUJELEVBQVkySSxHQUM5RyxJQUFJQyxFQUFjN0IsRUFBV2pSLEVBQUlpSixRQUFVakosRUFBSWdKLFFBQzNDK0osRUFBZTlCLEVBQVdqRixFQUFXMVUsT0FBUzBVLEVBQVd6VSxNQUN6RHliLEVBQVcvQixFQUFXakYsRUFBVzlVLElBQU04VSxFQUFXN1UsS0FDbEQ4YixFQUFXaEMsRUFBV2pGLEVBQVc1VSxPQUFTNFUsRUFBVzNVLE1BQ3JENmIsR0FBUyxFQUViLElBQUtoSixFQUVILEdBQUkySSxHQUFnQnJOLEdBQXFCdU4sRUFBZTlJLEdBUXRELElBTEtwRSxLQUE0QyxJQUFsQk4sR0FBc0J1TixFQUFjRSxFQUFXRCxFQUFlNUksRUFBd0IsRUFBSTJJLEVBQWNHLEVBQVdGLEVBQWU1SSxFQUF3QixLQUV2THRFLElBQXdCLEdBR3JCQSxHQU9IcU4sR0FBUyxPQUxULEdBQXNCLElBQWxCM04sR0FBc0J1TixFQUFjRSxFQUFXeE4sR0FDakRzTixFQUFjRyxFQUFXek4sR0FDekIsT0FBUUQsUUFPWixHQUFJdU4sRUFBY0UsRUFBV0QsR0FBZ0IsRUFBSTlJLEdBQWlCLEdBQUs2SSxFQUFjRyxFQUFXRixHQUFnQixFQUFJOUksR0FBaUIsRUFDbkksT0F3QlIsU0FBNkIzWixHQUMzQixPQUFJaUosRUFBTXlKLEdBQVV6SixFQUFNakosR0FDakIsR0FFQSxDQUVYLENBOUJlNmlCLENBQW9CN2lCLEdBT2pDLElBRkE0aUIsRUFBU0EsR0FBVWhKLEtBSWI0SSxFQUFjRSxFQUFXRCxFQUFlNUksRUFBd0IsR0FBSzJJLEVBQWNHLEVBQVdGLEVBQWU1SSxFQUF3QixHQUN2SSxPQUFPMkksRUFBY0UsRUFBV0QsRUFBZSxFQUFJLEdBQUksRUFJM0QsT0FBTyxDQUNULENBdGlCb0JLLENBQWtCcFQsRUFBSzFQLEVBQVEwYixFQUFZaUYsRUFBVWlCLEVBQWtCLEVBQUl4WixFQUFRdVIsY0FBZ0QsTUFBakN2UixFQUFReVIsc0JBQWdDelIsRUFBUXVSLGNBQWdCdlIsRUFBUXlSLHNCQUF1QnJFLEdBQXdCUixLQUFlaFYsR0FHbE8sSUFBZCtaLEVBQWlCLENBRW5CLElBQUlnSixFQUFZOVosRUFBTXlKLEdBRXRCLEdBQ0VxUSxHQUFhaEosRUFDYjJILEVBQVU5TyxFQUFTckssU0FBU3dhLFNBQ3JCckIsSUFBd0MsU0FBNUI3YyxFQUFJNmMsRUFBUyxZQUF5QkEsSUFBWTVPLEdBQ3pFLENBR0EsR0FBa0IsSUFBZGlILEdBQW1CMkgsSUFBWTFoQixFQUNqQyxPQUFPa2hCLEdBQVUsR0FHbkJsTSxHQUFhaFYsRUFDYmlWLEdBQWdCOEUsRUFDaEIsSUFBSW1FLEVBQWNsZSxFQUFPZ2pCLG1CQUNyQkMsR0FBUSxFQUdSQyxFQUFhMUgsR0FBUXpJLEVBQVEvUCxFQUFJMFAsRUFBUStJLEVBQVV6YixFQUFRMGIsRUFBWWhNLEVBRjNFdVQsRUFBc0IsSUFBZGxKLEdBSVIsSUFBbUIsSUFBZm1KLEVBNEJGLE9BM0JtQixJQUFmQSxJQUFtQyxJQUFmQSxJQUN0QkQsRUFBdUIsSUFBZkMsR0FHVnhOLElBQVUsRUFDVjFLLFdBQVdtUixHQUFXLElBQ3RCdFosSUFFSW9nQixJQUFVL0UsRUFDWmxiLEVBQUdpZCxZQUFZdk4sR0FFZjFTLEVBQU9pRSxXQUFXb2MsYUFBYTNOLEVBQVF1USxFQUFRL0UsRUFBY2xlLEdBSTNEcWlCLEdBQ0ZwWCxFQUFTb1gsRUFBaUIsRUFBR0MsRUFBZUQsRUFBZ0IxWSxXQUc5RGlKLEVBQVdGLEVBQU96TyxnQkFHWWlPLElBQTFCdVAsR0FBd0NqTSxLQUMxQ04sR0FBcUJ4SyxLQUFLaVUsSUFBSThDLEVBQXdCcGIsRUFBUXJHLEdBQVFvaUIsS0FHeEVkLElBQ09KLEdBQVUsRUFFckIsQ0FFQSxHQUFJbGUsRUFBRzZaLFNBQVNuSyxHQUNkLE9BQU93TyxHQUFVLEVBRXJCLENBRUEsT0FBTyxDQXRSTSxDQUViLFNBQVNGLEVBQWN4YyxFQUFNMmUsR0FDM0I3USxFQUFZOU4sRUFBTTBJLEVBQU9uTixFQUFlLENBQ3RDMlAsSUFBS0EsRUFDTGtSLFFBQVNBLEVBQ1R3QyxLQUFNekMsRUFBVyxXQUFhLGFBQzlCRCxPQUFRQSxFQUNSakYsU0FBVUEsRUFDVkMsV0FBWUEsRUFDWm1GLFFBQVNBLEVBQ1RDLGFBQWNBLEVBQ2Q5Z0IsT0FBUUEsRUFDUmtoQixVQUFXQSxFQUNYcEYsT0FBUSxTQUFnQjliLEVBQVFpakIsR0FDOUIsT0FBT3pILEdBQVF6SSxFQUFRL1AsRUFBSTBQLEVBQVErSSxFQUFVemIsRUFBUXFHLEVBQVFyRyxHQUFTMFAsRUFBS3VULEVBQzdFLEVBQ0EzQixRQUFTQSxHQUNSNkIsR0FDTCxDQUdBLFNBQVN0Z0IsSUFDUG1lLEVBQWMsNEJBRWQ5VCxFQUFNakIsd0JBRUZpQixJQUFVNFQsR0FDWkEsRUFBYTdVLHVCQUVqQixDQUdBLFNBQVNpVixFQUFVbUMsR0F1RGpCLE9BdERBckMsRUFBYyxvQkFBcUIsQ0FDakNxQyxVQUFXQSxJQUdUQSxJQUVFekMsRUFDRmxOLEVBQWV5TSxhQUVmek0sRUFBZTRQLFdBQVdwVyxHQUd4QkEsSUFBVTRULElBRVp2YyxFQUFZbU8sRUFBUWUsR0FBY0EsR0FBWXJMLFFBQVE0UixXQUFhdEcsRUFBZXRMLFFBQVE0UixZQUFZLEdBQ3RHelYsRUFBWW1PLEVBQVF0SyxFQUFRNFIsWUFBWSxJQUd0Q3ZHLEtBQWdCdkcsR0FBU0EsSUFBVXpFLEdBQVNrTCxPQUM5Q0YsR0FBY3ZHLEVBQ0xBLElBQVV6RSxHQUFTa0wsUUFBVUYsS0FDdENBLEdBQWMsTUFJWnFOLElBQWlCNVQsSUFDbkJBLEVBQU0rVCxzQkFBd0JqaEIsR0FHaENrTixFQUFNRCxZQUFXLFdBQ2YrVCxFQUFjLDZCQUNkOVQsRUFBTStULHNCQUF3QixJQUNoQyxJQUVJL1QsSUFBVTRULElBQ1pBLEVBQWE3VCxhQUNiNlQsRUFBYUcsc0JBQXdCLFFBS3JDamhCLElBQVcwUyxJQUFXQSxFQUFPOUQsVUFBWTVPLElBQVdnRCxJQUFPaEQsRUFBTzRPLFlBQ3BFb0csR0FBYSxNQUlWNU0sRUFBUXFTLGdCQUFtQi9LLEVBQUllLFFBQVV6USxJQUFXK0QsV0FDdkQyTyxFQUFPek8sV0FBVzBILEdBQVN5TixpQkFBaUIxSixFQUFJMVAsU0FHL0NxakIsR0FBYTlLLEdBQThCN0ksS0FHN0N0SCxFQUFRcVMsZ0JBQWtCL0ssRUFBSTJJLGlCQUFtQjNJLEVBQUkySSxrQkFDL0MwSSxHQUFpQixDQUMxQixDQUdBLFNBQVNPLElBQ1B4TixHQUFXN0ssRUFBTXlKLEdBQ2pCcUIsR0FBb0I5SyxFQUFNeUosRUFBUXRLLEVBQVFRLFdBRTFDMkwsRUFBZSxDQUNiOUUsU0FBVXZDLEVBQ1YxSSxLQUFNLFNBQ05vTSxLQUFNNU4sRUFDTitOLFNBQVUrQyxHQUNWN0Msa0JBQW1COEMsR0FDbkI3QyxjQUFleEIsR0FFbkIsQ0ErS0YsRUFDQXVSLHNCQUF1QixLQUN2QnNDLGVBQWdCLFdBQ2RuZ0IsRUFBSVcsU0FBVSxZQUFhdkMsS0FBS3FkLGNBQ2hDemIsRUFBSVcsU0FBVSxZQUFhdkMsS0FBS3FkLGNBQ2hDemIsRUFBSVcsU0FBVSxjQUFldkMsS0FBS3FkLGNBQ2xDemIsRUFBSVcsU0FBVSxXQUFZd1UsSUFDMUJuVixFQUFJVyxTQUFVLFlBQWF3VSxJQUMzQm5WLEVBQUlXLFNBQVUsWUFBYXdVLEdBQzdCLEVBQ0FpTCxhQUFjLFdBQ1osSUFBSXZGLEVBQWdCemMsS0FBS3dCLEdBQUdpYixjQUM1QjdhLEVBQUk2YSxFQUFlLFVBQVd6YyxLQUFLNmMsU0FDbkNqYixFQUFJNmEsRUFBZSxXQUFZemMsS0FBSzZjLFNBQ3BDamIsRUFBSTZhLEVBQWUsWUFBYXpjLEtBQUs2YyxTQUNyQ2piLEVBQUk2YSxFQUFlLGNBQWV6YyxLQUFLNmMsU0FDdkNqYixFQUFJVyxTQUFVLGNBQWV2QyxLQUMvQixFQUNBNmMsUUFBUyxTQUVUM08sR0FDRSxJQUFJMU0sRUFBS3hCLEtBQUt3QixHQUNWb0YsRUFBVTVHLEtBQUs0RyxRQUVuQjBMLEdBQVc3SyxFQUFNeUosR0FDakJxQixHQUFvQjlLLEVBQU15SixFQUFRdEssRUFBUVEsV0FDMUMwSixFQUFZLE9BQVE5USxLQUFNLENBQ3hCa08sSUFBS0EsSUFFUGtELEVBQVdGLEdBQVVBLEVBQU96TyxXQUU1QjZQLEdBQVc3SyxFQUFNeUosR0FDakJxQixHQUFvQjlLLEVBQU15SixFQUFRdEssRUFBUVEsV0FFdENILEdBQVNrSCxnQkFNYnlGLElBQXNCLEVBQ3RCSSxJQUF5QixFQUN6QkQsSUFBd0IsRUFDeEJrTyxjQUFjamlCLEtBQUs4ZSxTQUNuQm5ULGFBQWEzTCxLQUFLa2QsaUJBRWxCL0IsR0FBZ0JuYixLQUFLNGUsU0FFckJ6RCxHQUFnQm5iLEtBQUtpZixjQUdqQmpmLEtBQUs2WixrQkFDUGpZLEVBQUlXLFNBQVUsT0FBUXZDLE1BQ3RCNEIsRUFBSUosRUFBSSxZQUFheEIsS0FBS3NkLGVBRzVCdGQsS0FBSytoQixpQkFFTC9oQixLQUFLZ2lCLGVBRUQvZ0IsR0FDRm9DLEVBQUlkLFNBQVN1RyxLQUFNLGNBQWUsSUFHcEN6RixFQUFJNk4sRUFBUSxZQUFhLElBRXJCaEQsSUFDRThELEtBQ0Y5RCxFQUFJa0MsWUFBY2xDLEVBQUkwSSxrQkFDckJoUSxFQUFRb1MsWUFBYzlLLEVBQUkySSxtQkFHN0J2RixHQUFXQSxFQUFRN08sWUFBYzZPLEVBQVE3TyxXQUFXeWYsWUFBWTVRLElBRTVEQyxJQUFXSCxHQUFZYSxJQUEyQyxVQUE1QkEsR0FBWXhCLGNBRXBEbUIsR0FBV0EsRUFBUW5QLFlBQWNtUCxFQUFRblAsV0FBV3lmLFlBQVl0USxHQUc5RFYsSUFDRWxSLEtBQUs2WixpQkFDUGpZLEVBQUlzUCxFQUFRLFVBQVdsUixNQUd6QjBhLEdBQWtCeEosR0FFbEJBLEVBQU8xTixNQUFNLGVBQWlCLEdBRzFCd08sS0FBVTRCLElBQ1o3USxFQUFZbU8sRUFBUWUsR0FBY0EsR0FBWXJMLFFBQVE0UixXQUFheFksS0FBSzRHLFFBQVE0UixZQUFZLEdBRzlGelYsRUFBWW1PLEVBQVFsUixLQUFLNEcsUUFBUTZSLGFBQWEsR0FFOUMxRixFQUFlLENBQ2I5RSxTQUFVak8sS0FDVmdELEtBQU0sV0FDTm9NLEtBQU1nQyxFQUNON0IsU0FBVSxLQUNWRSxrQkFBbUIsS0FDbkJDLGNBQWV4QixJQUdicUQsSUFBV0gsR0FDVGtCLElBQVksSUFFZFMsRUFBZSxDQUNiOUQsT0FBUW1DLEVBQ1JwTyxLQUFNLE1BQ05vTSxLQUFNZ0MsRUFDTi9CLE9BQVFrQyxFQUNSN0IsY0FBZXhCLElBSWpCNkUsRUFBZSxDQUNiOUUsU0FBVWpPLEtBQ1ZnRCxLQUFNLFNBQ05vTSxLQUFNZ0MsRUFDTjFCLGNBQWV4QixJQUlqQjZFLEVBQWUsQ0FDYjlELE9BQVFtQyxFQUNScE8sS0FBTSxPQUNOb00sS0FBTWdDLEVBQ04vQixPQUFRa0MsRUFDUjdCLGNBQWV4QixJQUdqQjZFLEVBQWUsQ0FDYjlFLFNBQVVqTyxLQUNWZ0QsS0FBTSxPQUNOb00sS0FBTWdDLEVBQ04xQixjQUFleEIsS0FJbkIrRCxJQUFlQSxHQUFZa1EsUUFFdkI3UCxLQUFhRixJQUNYRSxJQUFZLElBRWRTLEVBQWUsQ0FDYjlFLFNBQVVqTyxLQUNWZ0QsS0FBTSxTQUNOb00sS0FBTWdDLEVBQ04xQixjQUFleEIsSUFHakI2RSxFQUFlLENBQ2I5RSxTQUFVak8sS0FDVmdELEtBQU0sT0FDTm9NLEtBQU1nQyxFQUNOMUIsY0FBZXhCLEtBTW5CakgsR0FBU2tMLFNBRUssTUFBWkcsS0FBaUMsSUFBYkEsS0FDdEJBLEdBQVdGLEdBQ1hHLEdBQW9CRixJQUd0QlUsRUFBZSxDQUNiOUUsU0FBVWpPLEtBQ1ZnRCxLQUFNLE1BQ05vTSxLQUFNZ0MsRUFDTjFCLGNBQWV4QixJQUlqQmxPLEtBQUttaUIsV0E5SVRuaUIsS0FBSytkLFVBb0pULEVBQ0FBLFNBQVUsV0FDUmpOLEVBQVksVUFBVzlRLE1BQ3ZCdVIsRUFBU0wsRUFBU0UsRUFBV0UsRUFBVUcsRUFBU0csRUFBVUQsRUFBYUcsRUFBY29CLEdBQVNDLEdBQVduQixHQUFRTSxHQUFXQyxHQUFvQkgsR0FBV0MsR0FBb0JtQixHQUFhQyxHQUFnQnhCLEdBQWNnQixHQUFjaE0sR0FBU0UsUUFBVUYsR0FBU0MsTUFBUUQsR0FBU1ksTUFBUVosR0FBU2tMLE9BQVMsS0FDL1NnQyxHQUFrQnRWLFNBQVEsU0FBVTJDLEdBQ2xDQSxFQUFHeWEsU0FBVSxDQUNmLElBQ0E5SCxHQUFrQnhWLE9BQVN5VSxHQUFTQyxHQUFTLENBQy9DLEVBQ0ErTyxZQUFhLFNBRWJsVSxHQUNFLE9BQVFBLEVBQUlxTixNQUNWLElBQUssT0FDTCxJQUFLLFVBQ0h2YixLQUFLNmMsUUFBUTNPLEdBRWIsTUFFRixJQUFLLFlBQ0wsSUFBSyxXQUNDZ0QsSUFDRmxSLEtBQUswWCxZQUFZeEosR0E4SzNCLFNBRUFBLEdBQ01BLEVBQUk0SyxlQUNONUssRUFBSTRLLGFBQWF1SixXQUFhLFFBR2hDblUsRUFBSWtDLFlBQWNsQyxFQUFJMEksZ0JBQ3hCLENBcExVMEwsQ0FBZ0JwVSxJQUdsQixNQUVGLElBQUssY0FDSEEsRUFBSTBJLGlCQUdWLEVBTUEyTCxRQUFTLFdBUVAsSUFQQSxJQUNJL2dCLEVBREFnaEIsRUFBUSxHQUVSemIsRUFBVy9HLEtBQUt3QixHQUFHdUYsU0FDbkJ0SSxFQUFJLEVBQ0pnRyxFQUFJc0MsRUFBU3BJLE9BQ2JpSSxFQUFVNUcsS0FBSzRHLFFBRVpuSSxFQUFJZ0csRUFBR2hHLElBR1JpRSxFQUZKbEIsRUFBS3VGLEVBQVN0SSxHQUVFbUksRUFBUVEsVUFBV3BILEtBQUt3QixJQUFJLElBQzFDZ2hCLEVBQU1ua0IsS0FBS21ELEVBQUdpaEIsYUFBYTdiLEVBQVFzUyxhQUFlMEIsR0FBWXBaLElBSWxFLE9BQU9naEIsQ0FDVCxFQU1BMUssS0FBTSxTQUFjMEssRUFBT0UsR0FDekIsSUFBSUMsRUFBUSxDQUFDLEVBQ1QxVCxFQUFTalAsS0FBS3dCLEdBQ2xCeEIsS0FBS3VpQixVQUFVMWpCLFNBQVEsU0FBVXVjLEVBQUkzYyxHQUNuQyxJQUFJK0MsRUFBS3lOLEVBQU9sSSxTQUFTdEksR0FFckJpRSxFQUFRbEIsRUFBSXhCLEtBQUs0RyxRQUFRUSxVQUFXNkgsR0FBUSxLQUM5QzBULEVBQU12SCxHQUFNNVosRUFFaEIsR0FBR3hCLE1BQ0gwaUIsR0FBZ0IxaUIsS0FBS3lLLHdCQUNyQitYLEVBQU0zakIsU0FBUSxTQUFVdWMsR0FDbEJ1SCxFQUFNdkgsS0FDUm5NLEVBQU9pVCxZQUFZUyxFQUFNdkgsSUFDekJuTSxFQUFPd1AsWUFBWWtFLEVBQU12SCxJQUU3QixJQUNBc0gsR0FBZ0IxaUIsS0FBS3lMLFlBQ3ZCLEVBS0EwVyxLQUFNLFdBQ0osSUFBSW5LLEVBQVFoWSxLQUFLNEcsUUFBUW9SLE1BQ3pCQSxHQUFTQSxFQUFNNEssS0FBTzVLLEVBQU00SyxJQUFJNWlCLEtBQ2xDLEVBUUE2aUIsUUFBUyxTQUFtQnJoQixFQUFJTyxHQUM5QixPQUFPVyxFQUFRbEIsRUFBSU8sR0FBWS9CLEtBQUs0RyxRQUFRUSxVQUFXcEgsS0FBS3dCLElBQUksRUFDbEUsRUFRQW1NLE9BQVEsU0FBZ0IzSyxFQUFNdkQsR0FDNUIsSUFBSW1ILEVBQVU1RyxLQUFLNEcsUUFFbkIsUUFBYyxJQUFWbkgsRUFDRixPQUFPbUgsRUFBUTVELEdBRWYsSUFBSTZMLEVBQWdCckIsRUFBY2tCLGFBQWExTyxLQUFNZ0QsRUFBTXZELEdBR3pEbUgsRUFBUTVELFFBRG1CLElBQWxCNkwsRUFDT0EsRUFFQXBQLEVBR0wsVUFBVHVELEdBQ0ZnVCxHQUFjcFAsRUFHcEIsRUFLQWtjLFFBQVMsV0FDUGhTLEVBQVksVUFBVzlRLE1BQ3ZCLElBQUl3QixFQUFLeEIsS0FBS3dCLEdBQ2RBLEVBQUcySSxHQUFXLEtBQ2R2SSxFQUFJSixFQUFJLFlBQWF4QixLQUFLOFosYUFDMUJsWSxFQUFJSixFQUFJLGFBQWN4QixLQUFLOFosYUFDM0JsWSxFQUFJSixFQUFJLGNBQWV4QixLQUFLOFosYUFFeEI5WixLQUFLNlosa0JBQ1BqWSxFQUFJSixFQUFJLFdBQVl4QixNQUNwQjRCLEVBQUlKLEVBQUksWUFBYXhCLE9BSXZCK2lCLE1BQU12akIsVUFBVVgsUUFBUWtCLEtBQUt5QixFQUFHd2hCLGlCQUFpQixnQkFBZ0IsU0FBVXhoQixHQUN6RUEsRUFBR2tkLGdCQUFnQixZQUNyQixJQUVBMWUsS0FBSzZjLFVBRUw3YyxLQUFLOGMsNEJBRUxoSixHQUFVekksT0FBT3lJLEdBQVUxVCxRQUFRSixLQUFLd0IsSUFBSyxHQUM3Q3hCLEtBQUt3QixHQUFLQSxFQUFLLElBQ2pCLEVBQ0FtZCxXQUFZLFdBQ1YsSUFBSzdNLEVBQWEsQ0FFaEIsR0FEQWhCLEVBQVksWUFBYTlRLE1BQ3JCaUgsR0FBU2tILGNBQWUsT0FDNUI5SyxFQUFJdU8sRUFBUyxVQUFXLFFBRXBCNVIsS0FBSzRHLFFBQVEwUixtQkFBcUIxRyxFQUFRblAsWUFDNUNtUCxFQUFRblAsV0FBV3lmLFlBQVl0USxHQUdqQ0UsR0FBYyxDQUNoQixDQUNGLEVBQ0FnUSxXQUFZLFNBQW9CblMsR0FDOUIsR0FBZ0MsVUFBNUJBLEVBQVljLGFBTWhCLEdBQUlxQixFQUFhLENBRWYsR0FEQWhCLEVBQVksWUFBYTlRLE1BQ3JCaUgsR0FBU2tILGNBQWUsT0FFeEIrQyxFQUFPek8sWUFBYzhPLEdBQVd2UixLQUFLNEcsUUFBUXdQLE1BQU1PLFlBRTVDbEYsRUFDVEYsRUFBT3NOLGFBQWFqTixFQUFTSCxHQUU3QkYsRUFBT2tOLFlBQVk3TSxHQUpuQkwsRUFBT3NOLGFBQWFqTixFQUFTVixHQU8zQmxSLEtBQUs0RyxRQUFRd1AsTUFBTU8sYUFDckIzVyxLQUFLdU0sUUFBUTJFLEVBQVFVLEdBR3ZCdk8sRUFBSXVPLEVBQVMsVUFBVyxJQUN4QkUsR0FBYyxDQUNoQixPQXZCRTlSLEtBQUsyZSxZQXdCVCxHQXNLRXZLLElBQ0Y3UyxFQUFHZ0IsU0FBVSxhQUFhLFNBQVUyTCxJQUM3QmpILEdBQVNrTCxRQUFVeUIsS0FBd0IxRixFQUFJa0MsWUFDbERsQyxFQUFJMEksZ0JBRVIsSUFJRjNQLEdBQVNnYyxNQUFRLENBQ2ZDLEdBQUkzaEIsRUFDSjRoQixJQUFLdmhCLEVBQ0x3aEIsSUFBSy9mLEVBQ0xnZ0IsS0FBTWhmLEVBQ05pZixHQUFJLFNBQVk5aEIsRUFBSU8sR0FDbEIsUUFBU1csRUFBUWxCLEVBQUlPLEVBQVVQLEdBQUksRUFDckMsRUFDQStoQixPQTNrRUYsU0FBZ0JDLEVBQUsxSSxHQUNuQixHQUFJMEksR0FBTzFJLEVBQ1QsSUFBSyxJQUFJaGMsS0FBT2djLEVBQ1ZBLEVBQUloYixlQUFlaEIsS0FDckIwa0IsRUFBSTFrQixHQUFPZ2MsRUFBSWhjLElBS3JCLE9BQU8wa0IsQ0FDVCxFQWtrRUVDLFNBQVVyYSxFQUNWeVosUUFBU25nQixFQUNUZ2hCLFlBQWEzZ0IsRUFDYjhFLE1BQU8rQixFQUNQbEMsTUFBT0QsRUFDUGtjLFNBQVV6SSxHQUNWMEksZUFBZ0J6SSxHQUNoQjBJLGdCQUFpQmpQLEdBQ2pCa1AsU0FBVXBkLEdBUVpPLEdBQVM4UyxJQUFNLFNBQVVnSyxHQUN2QixPQUFPQSxFQUFRNVosRUFDakIsRUFPQWxELEdBQVN3RyxNQUFRLFdBQ2YsSUFBSyxJQUFJdVcsRUFBT3RsQixVQUFVQyxPQUFRc2xCLEVBQVUsSUFBSWxCLE1BQU1pQixHQUFPRSxFQUFPLEVBQUdBLEVBQU9GLEVBQU1FLElBQ2xGRCxFQUFRQyxHQUFReGxCLFVBQVV3bEIsR0FHeEJELEVBQVEsR0FBRzFrQixjQUFnQndqQixRQUFPa0IsRUFBVUEsRUFBUSxJQUN4REEsRUFBUXBsQixTQUFRLFNBQVU2TyxHQUN4QixJQUFLQSxFQUFPbE8sWUFBY2tPLEVBQU9sTyxVQUFVRCxZQUN6QyxLQUFNLGdFQUFnRXVPLE9BQU8sQ0FBQyxFQUFFK0osU0FBUzlYLEtBQUsyTixJQUc1RkEsRUFBT3VWLFFBQU9oYyxHQUFTZ2MsTUFBUTFrQixFQUFlQSxFQUFlLENBQUMsRUFBRzBJLEdBQVNnYyxPQUFRdlYsRUFBT3VWLFFBQzdGelYsRUFBY0MsTUFBTUMsRUFDdEIsR0FDRixFQVFBekcsR0FBU2tkLE9BQVMsU0FBVTNpQixFQUFJb0YsR0FDOUIsT0FBTyxJQUFJSyxHQUFTekYsRUFBSW9GLEVBQzFCLEVBR0FLLEdBQVNtZCxRQWhpRkssU0FraUZkLElBQ0lDLEdBQ0FDLEdBRUFDLEdBQ0FDLEdBQ0FDLEdBQ0FDLEdBUEFDLEdBQWMsR0FHZEMsSUFBWSxFQW9IaEIsU0FBU0MsS0FDUEYsR0FBWTlsQixTQUFRLFNBQVVpbUIsR0FDNUI3QyxjQUFjNkMsRUFBV0MsSUFDM0IsSUFDQUosR0FBYyxFQUNoQixDQUVBLFNBQVNLLEtBQ1AvQyxjQUFjeUMsR0FDaEIsQ0FFQSxJQUFJTyxHQUFhN2IsR0FBUyxTQUFVOEUsRUFBS3RILEVBQVNxSSxFQUFRaVcsR0FFeEQsR0FBS3RlLEVBQVF1ZSxPQUFiLENBQ0EsSUFNSUMsRUFOQTFiLEdBQUt3RSxFQUFJOEksUUFBVTlJLEVBQUk4SSxRQUFRLEdBQUs5SSxHQUFLZ0osUUFDekN2TixHQUFLdUUsRUFBSThJLFFBQVU5SSxFQUFJOEksUUFBUSxHQUFLOUksR0FBS2lKLFFBQ3pDa08sRUFBT3plLEVBQVEwZSxrQkFDZkMsRUFBUTNlLEVBQVE0ZSxZQUNoQnZkLEVBQWN2RCxJQUNkK2dCLEdBQXFCLEVBR3JCbkIsS0FBaUJyVixJQUNuQnFWLEdBQWVyVixFQUNmNFYsS0FDQVIsR0FBV3pkLEVBQVF1ZSxPQUNuQkMsRUFBaUJ4ZSxFQUFROGUsVUFFUixJQUFickIsS0FDRkEsR0FBVzlkLEVBQTJCMEksR0FBUSxLQUlsRCxJQUFJMFcsRUFBWSxFQUNaQyxFQUFnQnZCLEdBRXBCLEVBQUcsQ0FDRCxJQUFJN2lCLEVBQUtva0IsRUFDTC9hLEVBQU9oRyxFQUFRckQsR0FDZjRELEVBQU15RixFQUFLekYsSUFDWEUsRUFBU3VGLEVBQUt2RixPQUNkRCxFQUFPd0YsRUFBS3hGLEtBQ1pFLEVBQVFzRixFQUFLdEYsTUFDYkUsRUFBUW9GLEVBQUtwRixNQUNiRCxFQUFTcUYsRUFBS3JGLE9BQ2RxZ0IsT0FBYSxFQUNiQyxPQUFhLEVBQ2J0ZCxFQUFjaEgsRUFBR2dILFlBQ2pCRSxFQUFlbEgsRUFBR2tILGFBQ2xCbU0sRUFBUXhSLEVBQUk3QixHQUNadWtCLEVBQWF2a0IsRUFBRzBHLFdBQ2hCOGQsRUFBYXhrQixFQUFHMkcsVUFFaEIzRyxJQUFPeUcsR0FDVDRkLEVBQWFwZ0IsRUFBUStDLElBQW9DLFNBQXBCcU0sRUFBTWpNLFdBQTRDLFdBQXBCaU0sRUFBTWpNLFdBQThDLFlBQXBCaU0sRUFBTWpNLFdBQ3pHa2QsRUFBYXRnQixFQUFTa0QsSUFBcUMsU0FBcEJtTSxFQUFNaE0sV0FBNEMsV0FBcEJnTSxFQUFNaE0sV0FBOEMsWUFBcEJnTSxFQUFNaE0sYUFFM0dnZCxFQUFhcGdCLEVBQVErQyxJQUFvQyxTQUFwQnFNLEVBQU1qTSxXQUE0QyxXQUFwQmlNLEVBQU1qTSxXQUN6RWtkLEVBQWF0Z0IsRUFBU2tELElBQXFDLFNBQXBCbU0sRUFBTWhNLFdBQTRDLFdBQXBCZ00sRUFBTWhNLFlBRzdFLElBQUlvZCxFQUFLSixJQUFlM2MsS0FBS2lVLElBQUk1WCxFQUFRbUUsSUFBTTJiLEdBQVFVLEVBQWF0Z0IsRUFBUStDLElBQWdCVSxLQUFLaVUsSUFBSTlYLEVBQU9xRSxJQUFNMmIsS0FBVVUsR0FDeEhHLEVBQUtKLElBQWU1YyxLQUFLaVUsSUFBSTdYLEVBQVNxRSxJQUFNMGIsR0FBUVcsRUFBYXhnQixFQUFTa0QsSUFBaUJRLEtBQUtpVSxJQUFJL1gsRUFBTXVFLElBQU0wYixLQUFVVyxHQUU5SCxJQUFLckIsR0FBWWdCLEdBQ2YsSUFBSyxJQUFJbG5CLEVBQUksRUFBR0EsR0FBS2tuQixFQUFXbG5CLElBQ3pCa21CLEdBQVlsbUIsS0FDZmttQixHQUFZbG1CLEdBQUssQ0FBQyxHQUtwQmttQixHQUFZZ0IsR0FBV00sSUFBTUEsR0FBTXRCLEdBQVlnQixHQUFXTyxJQUFNQSxHQUFNdkIsR0FBWWdCLEdBQVdua0IsS0FBT0EsSUFDdEdtakIsR0FBWWdCLEdBQVdua0IsR0FBS0EsRUFDNUJtakIsR0FBWWdCLEdBQVdNLEdBQUtBLEVBQzVCdEIsR0FBWWdCLEdBQVdPLEdBQUtBLEVBQzVCakUsY0FBYzBDLEdBQVlnQixHQUFXWixLQUUzQixHQUFOa0IsR0FBaUIsR0FBTkMsSUFDYlQsR0FBcUIsRUFHckJkLEdBQVlnQixHQUFXWixJQUFNaEcsWUFBWSxXQUVuQ21HLEdBQTZCLElBQWZsbEIsS0FBS21tQixPQUNyQmxmLEdBQVNrTCxPQUFPa0wsYUFBYW9ILElBSS9CLElBQUkyQixFQUFnQnpCLEdBQVkza0IsS0FBS21tQixPQUFPRCxHQUFLdkIsR0FBWTNrQixLQUFLbW1CLE9BQU9ELEdBQUtYLEVBQVEsRUFDbEZjLEVBQWdCMUIsR0FBWTNrQixLQUFLbW1CLE9BQU9GLEdBQUt0QixHQUFZM2tCLEtBQUttbUIsT0FBT0YsR0FBS1YsRUFBUSxFQUV4RCxtQkFBbkJILEdBQ29JLGFBQXpJQSxFQUFlcmxCLEtBQUtrSCxHQUFTRSxRQUFRMUUsV0FBVzBILEdBQVVrYyxFQUFlRCxFQUFlbFksRUFBS3VXLEdBQVlFLEdBQVkza0IsS0FBS21tQixPQUFPM2tCLEtBS3ZJaUksRUFBU2tiLEdBQVkza0IsS0FBS21tQixPQUFPM2tCLEdBQUk2a0IsRUFBZUQsRUFDdEQsRUFBRXBWLEtBQUssQ0FDTG1WLE1BQU9SLElBQ0wsTUFJUkEsR0FDRixPQUFTL2UsRUFBUTBmLGNBQWdCVixJQUFrQjNkLElBQWdCMmQsRUFBZ0JyZixFQUEyQnFmLEdBQWUsS0FFN0hoQixHQUFZYSxDQS9GUyxDQWdHdkIsR0FBRyxJQUVDYyxHQUFPLFNBQWN2WCxHQUN2QixJQUFJVSxFQUFnQlYsRUFBS1UsY0FDckJDLEVBQWNYLEVBQUtXLFlBQ25Cc0IsRUFBU2pDLEVBQUtpQyxPQUNkaUIsRUFBaUJsRCxFQUFLa0QsZUFDdEJZLEVBQXdCOUQsRUFBSzhELHNCQUM3Qk4sRUFBcUJ4RCxFQUFLd0QsbUJBQzFCRSxFQUF1QjFELEVBQUswRCxxQkFDaEMsR0FBS2hELEVBQUwsQ0FDQSxJQUFJOFcsRUFBYTdXLEdBQWV1QyxFQUNoQ00sSUFDQSxJQUFJZ0osRUFBUTlMLEVBQWMrVyxnQkFBa0IvVyxFQUFjK1csZUFBZTluQixPQUFTK1EsRUFBYytXLGVBQWUsR0FBSy9XLEVBQ2hIbFIsRUFBUytELFNBQVMwYixpQkFBaUJ6QyxFQUFNdEUsUUFBU3NFLEVBQU1yRSxTQUM1RHpFLElBRUk4VCxJQUFlQSxFQUFXaGxCLEdBQUc2WixTQUFTN2MsS0FDeENzVSxFQUFzQixTQUN0QjlTLEtBQUswbUIsUUFBUSxDQUNYelYsT0FBUUEsRUFDUnRCLFlBQWFBLElBWEcsQ0FjdEIsRUFFQSxTQUFTZ1gsS0FBVSxDQXNDbkIsU0FBU0MsS0FBVSxDQXBDbkJELEdBQU9ubkIsVUFBWSxDQUNqQnFuQixXQUFZLEtBQ1pDLFVBQVcsU0FBbUJDLEdBQzVCLElBQUl2WCxFQUFvQnVYLEVBQU12WCxrQkFDOUJ4UCxLQUFLNm1CLFdBQWFyWCxDQUNwQixFQUNBa1gsUUFBUyxTQUFpQk0sR0FDeEIsSUFBSS9WLEVBQVMrVixFQUFNL1YsT0FDZnRCLEVBQWNxWCxFQUFNclgsWUFDeEIzUCxLQUFLaU8sU0FBU3hELHdCQUVWa0YsR0FDRkEsRUFBWWxGLHdCQUdkLElBQUlpUyxFQUFjaFcsRUFBUzFHLEtBQUtpTyxTQUFTek0sR0FBSXhCLEtBQUs2bUIsV0FBWTdtQixLQUFLNEcsU0FFL0Q4VixFQUNGMWMsS0FBS2lPLFNBQVN6TSxHQUFHcWQsYUFBYTVOLEVBQVF5TCxHQUV0QzFjLEtBQUtpTyxTQUFTek0sR0FBR2lkLFlBQVl4TixHQUcvQmpSLEtBQUtpTyxTQUFTeEMsYUFFVmtFLEdBQ0ZBLEVBQVlsRSxZQUVoQixFQUNBd2IsS0FBTVYsSUFHUjNtQixFQUFTK21CLEdBQVEsQ0FDZjlZLFdBQVksa0JBS2QrWSxHQUFPcG5CLFVBQVksQ0FDakJrbkIsUUFBUyxTQUFpQlEsR0FDeEIsSUFBSWpXLEVBQVNpVyxFQUFNalcsT0FFZmtXLEVBRGNELEVBQU12WCxhQUNZM1AsS0FBS2lPLFNBQ3pDa1osRUFBZTFjLHdCQUNmd0csRUFBT3hPLFlBQWN3TyxFQUFPeE8sV0FBV3lmLFlBQVlqUixHQUNuRGtXLEVBQWUxYixZQUNqQixFQUNBd2IsS0FBTVYsSUFHUjNtQixFQUFTZ25CLEdBQVEsQ0FDZi9ZLFdBQVksa0JBNHNCZDVHLEdBQVN3RyxNQUFNLElBdC9CZixXQUNFLFNBQVMyWixJQVNQLElBQUssSUFBSTFsQixLQVJUMUIsS0FBS3VPLFNBQVcsQ0FDZDRXLFFBQVEsRUFDUmtDLHlCQUF5QixFQUN6Qi9CLGtCQUFtQixHQUNuQkUsWUFBYSxHQUNiYyxjQUFjLEdBR0R0bUIsS0FDUSxNQUFqQjBCLEVBQUdvTyxPQUFPLElBQWtDLG1CQUFiOVAsS0FBSzBCLEtBQ3RDMUIsS0FBSzBCLEdBQU0xQixLQUFLMEIsR0FBSXNQLEtBQUtoUixNQUcvQixDQXlGQSxPQXZGQW9uQixFQUFXNW5CLFVBQVksQ0FDckJ1UyxZQUFhLFNBQXFCL0MsR0FDaEMsSUFBSVUsRUFBZ0JWLEVBQUtVLGNBRXJCMVAsS0FBS2lPLFNBQVM0TCxnQkFDaEJ0WSxFQUFHZ0IsU0FBVSxXQUFZdkMsS0FBS3NuQixtQkFFMUJ0bkIsS0FBSzRHLFFBQVFnVCxlQUNmclksRUFBR2dCLFNBQVUsY0FBZXZDLEtBQUt1bkIsMkJBQ3hCN1gsRUFBY3NILFFBQ3ZCelYsRUFBR2dCLFNBQVUsWUFBYXZDLEtBQUt1bkIsMkJBRS9CaG1CLEVBQUdnQixTQUFVLFlBQWF2QyxLQUFLdW5CLDBCQUdyQyxFQUNBQyxrQkFBbUIsU0FBMkJULEdBQzVDLElBQUlyWCxFQUFnQnFYLEVBQU1yWCxjQUdyQjFQLEtBQUs0RyxRQUFRNmdCLGdCQUFtQi9YLEVBQWNULFFBQ2pEalAsS0FBS3NuQixrQkFBa0I1WCxFQUUzQixFQUNBdVgsS0FBTSxXQUNBam5CLEtBQUtpTyxTQUFTNEwsZ0JBQ2hCalksRUFBSVcsU0FBVSxXQUFZdkMsS0FBS3NuQixvQkFFL0IxbEIsRUFBSVcsU0FBVSxjQUFldkMsS0FBS3VuQiwyQkFDbEMzbEIsRUFBSVcsU0FBVSxZQUFhdkMsS0FBS3VuQiwyQkFDaEMzbEIsRUFBSVcsU0FBVSxZQUFhdkMsS0FBS3VuQiw0QkFHbEN2QyxLQUNBSCxLQXhwRUpsWixhQUFhOUksR0FDYkEsT0FBbUIsQ0F5cEVqQixFQUNBNmtCLFFBQVMsV0FDUGpELEdBQWFILEdBQWVELEdBQVdPLEdBQVlGLEdBQTZCSCxHQUFrQkMsR0FBa0IsS0FDcEhHLEdBQVlobUIsT0FBUyxDQUN2QixFQUNBNG9CLDBCQUEyQixTQUFtQ3JaLEdBQzVEbE8sS0FBS3NuQixrQkFBa0JwWixHQUFLLEVBQzlCLEVBQ0FvWixrQkFBbUIsU0FBMkJwWixFQUFLMlAsR0FDakQsSUFBSW5TLEVBQVExTCxLQUVSMEosR0FBS3dFLEVBQUk4SSxRQUFVOUksRUFBSThJLFFBQVEsR0FBSzlJLEdBQUtnSixRQUN6Q3ZOLEdBQUt1RSxFQUFJOEksUUFBVTlJLEVBQUk4SSxRQUFRLEdBQUs5SSxHQUFLaUosUUFDekM5TyxFQUFPOUYsU0FBUzBiLGlCQUFpQnZVLEVBQUdDLEdBTXhDLEdBTEE4YSxHQUFhdlcsRUFLVDJQLEdBQVk3ZCxLQUFLNEcsUUFBUXlnQix5QkFBMkJ0bUIsR0FBUUQsR0FBY0csRUFBUSxDQUNwRmdrQixHQUFXL1csRUFBS2xPLEtBQUs0RyxRQUFTeUIsRUFBTXdWLEdBRXBDLElBQUk4SixFQUFpQnBoQixFQUEyQjhCLEdBQU0sSUFFbER1YyxJQUFlRixJQUE4QmhiLElBQU02YSxJQUFtQjVhLElBQU02YSxLQUM5RUUsSUFBOEJNLEtBRTlCTixHQUE2QjNGLGFBQVksV0FDdkMsSUFBSTZJLEVBQVVyaEIsRUFBMkJoRSxTQUFTMGIsaUJBQWlCdlUsRUFBR0MsSUFBSSxHQUV0RWllLElBQVlELElBQ2RBLEVBQWlCQyxFQUNqQi9DLE1BR0ZJLEdBQVcvVyxFQUFLeEMsRUFBTTlFLFFBQVNnaEIsRUFBUy9KLEVBQzFDLEdBQUcsSUFDSDBHLEdBQWtCN2EsRUFDbEI4YSxHQUFrQjdhLEVBRXRCLEtBQU8sQ0FFTCxJQUFLM0osS0FBSzRHLFFBQVEwZixjQUFnQi9mLEVBQTJCOEIsR0FBTSxLQUFVM0QsSUFFM0UsWUFEQW1nQixLQUlGSSxHQUFXL1csRUFBS2xPLEtBQUs0RyxRQUFTTCxFQUEyQjhCLEdBQU0sSUFBUSxFQUN6RSxDQUNGLEdBRUt6SSxFQUFTd25CLEVBQVksQ0FDMUJ2WixXQUFZLFNBQ1pOLHFCQUFxQixHQUV6QixHQTI0QkF0RyxHQUFTd0csTUFBTW1aLEdBQVFELEksSUFFdkJrQixHQUFlNWdCLEdDanNIZixNQUFNNmdCLElBQWUsRUFHZkMsR0FBZSxXQUdmQyxHQWlKTixXQUNJLE1BQU1wbkIsRUFBWUYsT0FBT0MsVUFBVUMsVUFDN0JxbkIsRUFBV3ZuQixPQUFPQyxVQUFVc25CLFNBT2xDLE9BQUlBLEVBQVNDLGNBQWNDLFdBQVcsT0FDM0IsUUFDQUYsRUFBU0MsY0FBY0MsV0FBVyxNQUNsQyxNQUNBRixFQUFTQyxjQUFjQyxXQUFXLE9BQ2xDLFVBQ0EsVUFBVWpRLEtBQUt0WCxHQUNmLFVBQ0EsUUFBUXNYLEtBQUsrUCxHQUNiLFFBQ0csSUFFbEIsQ0F0S1dHLEdBQ0xDLEdBQVksQ0FBQyxVQUFXLFFBQVMsTUFBTyxRQUM5QyxJQUFJQyxHQUFPLEdBRVBBLEdBRE8sVUFBUE4sR0FDTyxPQUNPLFlBQVBBLEdBQ0EsT0FDTyxVQUFQQSxHQUNBLFNBQ0csUUFHZCxNQUFNTyxHQUFlaG1CLFNBQVNpbUIsZUFBZSxhQUd2Q0MsR0FBT2xtQixTQUFTaW1CLGVBQWUsUUFDL0JFLEdBQVNubUIsU0FBU2ltQixlQUFlLFFBQ2pDRyxHQUFVcG1CLFNBQVNpbUIsZUFBZSxXQUNsQ0ksR0FBV3JtQixTQUFTaW1CLGVBQWUsWUFDbkNLLEdBQU10bUIsU0FBU2ltQixlQUFlLE9BQzlCTSxHQUFRdm1CLFNBQVNpbUIsZUFBZSxTQUNoQ08sR0FBT3htQixTQUFTaW1CLGVBQWUsZUFPL0JRLElBSmF6bUIsU0FBU2ltQixlQUFlLGNBQ3JCam1CLFNBQVNpbUIsZUFBZSxpQkFHM0JqbUIsU0FBU2ltQixlQUFlLGVBQ3JDUyxHQUFhMW1CLFNBQVNpbUIsZUFBZSxjQUNyQ1UsR0FBVTNtQixTQUFTaW1CLGVBQWUsV0FDbENXLEdBQWdCNW1CLFNBQVNpbUIsZUFBZSxpQkFDeENZLEdBQWM3bUIsU0FBU2ltQixlQUFlLGVBQ3RDYSxHQUFVOW1CLFNBQVNpbUIsZUFBZSxXQUNsQ2MsR0FBWS9tQixTQUFTaW1CLGVBQWUsYUFDcENlLEdBQWNobkIsU0FBU2ltQixlQUFlLGVBQ3RDZ0IsR0FBU2puQixTQUFTaW1CLGVBQWUsVUFDakNpQixHQUFXbG5CLFNBQVNpbUIsZUFBZSxZQUNuQ2tCLEdBQVVubkIsU0FBU2ltQixlQUFlLFdBQ2xDbUIsR0FBVXBuQixTQUFTaW1CLGVBQWUsV0FDbENvQixHQUFzQnJuQixTQUFTaW1CLGVBQWUsdUJBQzlDcUIsR0FBcUJ0bkIsU0FBU2ltQixlQUFlLHNCQUM3Q3NCLEdBQWtCdm5CLFNBQVNpbUIsZUFBZSxtQkFDMUN1QixHQUFrQnhuQixTQUFTaW1CLGVBQWUsbUJBQzFDd0IsR0FBbUJ6bkIsU0FBU2ltQixlQUFlLG9CQUMzQ3lCLEdBQTJCMW5CLFNBQVNpbUIsZUFBZSw0QkFDbkQwQixHQUFzQjNuQixTQUFTaW1CLGVBQWUsdUJBQzlDMkIsR0FBeUI1bkIsU0FBU2ltQixlQUFlLGNBQ2pENEIsR0FBVzduQixTQUFTaW1CLGVBQWUsWUFDbkM2QixHQUFpQjluQixTQUFTaW1CLGVBQWUsa0JBQ3pDOEIsR0FBaUIvbkIsU0FBU2ltQixlQUFlLGtCQUN6QytCLEdBQW9CaG9CLFNBQVNpbUIsZUFBZSxxQkFDNUNnQyxHQUFZam9CLFNBQVNpbUIsZUFBZSxhQUdwQ2lDLEdBQWNsb0IsU0FBU2ltQixlQUFlLFlBQ3RDa0MsR0FBZW5vQixTQUFTaW1CLGVBQWUsYUFDdkNtQyxHQUFlcG9CLFNBQVNpbUIsZUFBZSxzQkFDdkNvQyxHQUEwQnJvQixTQUFTaW1CLGVBQWUsd0JBQ2xEcUMsR0FBMEJ0b0IsU0FBU2ltQixlQUFlLHdCQUNsRHNDLEdBQVd2b0IsU0FBU2ltQixlQUFlLFNBR25DdUMsR0FBVXhvQixTQUFTaW1CLGVBQWUsUUFDbEN3QyxHQUFTem9CLFNBQVNpbUIsZUFBZSxtQkFDakN5QyxHQUEwQjFvQixTQUFTaW1CLGVBQWUsd0JBS2xEMEMsSUFKZTNvQixTQUFTaW1CLGVBQWUsYUFDbkJqbUIsU0FBU2ltQixlQUFlLGtCQUc5QmptQixTQUFTaW1CLGVBQWUsYUFDdEMyQyxHQUFZNW9CLFNBQVNpbUIsZUFBZSxVQUdwQzRDLEdBQVNDLFFBQVFDLEtBQUtDLFdBQVcsVUFDakNDLEdBQVNILFFBQVFDLEtBQUtDLFdBQVcsVUFDakNFLEdBQThCSixRQUFRQyxLQUFLQyxXQUFXLCtCQUN0REcsR0FBa0JMLFFBQVFDLEtBQUtDLFdBQVcsbUJBQzFDSSxHQUFrQk4sUUFBUUMsS0FBS0MsV0FBVyxvQkFDMUNLLEdBQXFCUCxRQUFRQyxLQUFLQyxXQUFXLHNCQUM3Q00sR0FBOEJSLFFBQVFDLEtBQUtDLFdBQVcsK0JBQ3RETyxHQUFnQ1QsUUFBUUMsS0FBS0MsV0FBVyxpQ0FHOUQsSUFBSVEsR0FDQUMsR0FDQUMsR0FDQUMsR0FDQUMsR0FDQUMsR0FDQUMsR0FDQUMsR0FDQUMsR0FDQUMsR0FDQUMsR0FDQUMsR0FDQUMsR0FBaUIsS0FHakJDLEdBQXdCLEVBQ3hCQyxHQUFnQixDQUFDLEVBQ2pCQyxHQUFjLENBQUMsRUFvRW5CQyxlQUFlQyxHQUFZQyxFQUFRbGMsU0FDekJzYSxRQUFRNkIsUUFBUUMsWUFBWSxDQUFFRixPQUFRQSxFQUFRbGMsS0FBTXFjLEtBQUtDLE1BQU1ELEtBQUtFLFVBQVV2YyxNQUMvRXdjLE9BQU1yaUIsSUFDQzRjLElBQWMwRixRQUFRQyxNQUFNdmlCLEVBQUEsR0FFNUMsQ0FvREEsU0FBU3dpQixHQUFRRCxHQUNUM0YsSUFBYzBGLFFBQVFHLElBQUksR0FBR0YsSUFDckMsQ0FFQSxTQUFTRyxHQUFtQjFpQixHQUN4QkEsRUFBRTJMLGtCQThWTixTQUE0QjNMLEdBRXhCLElBQUkyaUIsRUFBVzNpQixFQUFFMU0sT0FBT3FrQixRQUFRLE1BQ2hDLElBQUtnTCxFQUFVLE9BQ2YsSUFBSXpTLEVBQUt5UyxFQUFTcEwsYUFBYSxNQUMzQnFMLEVBQUtELEVBQVNwckIsV0FDZHFsQixJQUFjMEYsUUFBUUcsSUFBSXZTLEdBRTlCMFMsRUFBRzVMLFlBQVkyTCxVQUNSaEIsR0FBY3pSLEdBQ2pCME0sSUFBYzBGLFFBQVFHLElBQUlkLElBRTlCRyxHQUFZLG9CQUFxQkgsR0FDckMsQ0ExV0lrQixDQUFtQjdpQixFQUN2QixDQUVBLFNBQVM4aUIsS0FDTCxHQUE2QyxRQUF6Q3BELEdBQXdCcG5CLE1BQU13RCxRQUFtQixDQUNqRDRqQixHQUF3QnBuQixNQUFNd0QsUUFBVSxPQUN4QzZqQixHQUF3QnJuQixNQUFNd0QsUUFBVSxRQUN4QyxJQUFLLElBQUl4RixLQUFNZSxTQUFTeWdCLGlCQUFpQixVQUFXeGhCLEVBQUdnQyxNQUFNd0QsUUFBVSxjQUMzRSxLQUFPLENBQ0g0akIsR0FBd0JwbkIsTUFBTXdELFFBQVUsUUFDeEM2akIsR0FBd0JybkIsTUFBTXdELFFBQVUsT0FDeEMsSUFBSyxJQUFJeEYsS0FBTWUsU0FBU3lnQixpQkFBaUIsVUFBV3hoQixFQUFHZ0MsTUFBTXdELFFBQVUsTUFDM0UsQ0FDSixDQUdBLFNBQVNpbkIsS0FDTCxNQUFNQyxFQUFNM3JCLFNBQVNpbUIsZUFBZSxpQkFDL0IyRixHQUFRRCxJQUFNM0YsR0FBYXJHLFlBQVlnTSxHQUU1Q3JCLEdBZ2dDSixTQUFxQnRvQixHQUNqQixJQUFJNnBCLEVBQWFoQixLQUFLQyxNQUFNRCxLQUFLRSxVQUFVL29CLElBQ3ZDRSxFQUFJM0csT0FBT0QsS0FBSzBHLEdBQU01RixPQUN0QjB2QixFQUFpQixHQUNqQkMsRUFBYSxHQUNiQyxFQUFNLEVBQ056RyxJQUFjMEYsUUFBUUcsSUFBSXBwQixHQUU5QixJQUFLLElBQUk2VyxLQUFNN1csRUFDUHVqQixJQUFjMEYsUUFBUUcsSUFBSSxRQUFRdlMsS0FFbEMrUyxHQUFRNXBCLEVBQUs2VyxHQUFJMVQsU0FDakJuRCxFQUFLNlcsR0FBSTFULE1BQVFqRCxFQUFJLEVBQ3JCQSxLQUVKNHBCLEVBQWVod0IsS0FBS2tHLEVBQUs2VyxHQUFJMVQsT0FDN0I0bUIsRUFBV2p3QixLQUFLK2MsR0FHcEIsSUFBSyxJQUFJM2MsRUFBSSxFQUFHQSxFQUFJZ0csRUFBSSxFQUFHaEcsSUFBSyxDQUM1Qjh2QixFQUFNcmxCLEtBQUtxbEIsT0FBT0YsR0FDbEIsSUFBSUcsRUFBTUgsRUFBZWp1QixRQUFRbXVCLEdBQ2pDRixFQUFlaGpCLE9BQU9takIsRUFBSyxHQUUzQkosRUFEU0UsRUFBV2pqQixPQUFPbWpCLEVBQUssSUFDakI5bUIsTUFBUWpKLENBQzNCLENBRUEsT0FBTzJ2QixDQUNYLENBNWhDb0JLLENBQVk1QixJQUM1QkQsR0FBd0I5dUIsT0FBT0QsS0FBS2d2QixJQUFlbHVCLE9BQ25ELElBQUkrdkIsRUFBbUJuc0IsU0FBU2lTLGNBQWMsTUFDOUNrYSxFQUFpQkMsYUFBYSxLQUFNLGlCQUNwQyxJQUFLLElBQUlsd0IsRUFBSSxFQUFHQSxFQUFJbXVCLEdBQXdCLEVBQUdudUIsSUFDM0MsSUFBSyxJQUFJMmMsS0FBTXlSLEdBQ1gsR0FBSUEsR0FBY3pSLEdBQUkxVCxRQUFVakosRUFBRyxDQUMvQixJQUFJbXdCLEVBQWUvQixHQUFjelIsR0FDN0J5UyxFQUFXZ0IsR0FBZXpULEVBQUl3VCxFQUFjQSxFQUFhRSxRQUM3REosRUFBaUJqUSxZQUFZb1AsR0FHekJlLEVBQWFFLFFBQVVGLEVBQWFHLGVBQ3BDSCxFQUFhRyxjQUFjbHdCLFNBQVFtd0IsSUFDL0IsSUFBSUMsRUFBU0osR0FBZUcsRUFBRzVULEdBQUk0VCxHQUFJLEdBQ3ZDbkIsRUFBU3FCLGNBQWMsY0FBY3pRLFlBQVl3USxFQUFBLEdBRzdELENBR1IxRyxHQUFhOUosWUFBWWlRLEdBQ3pCOUIsR0FBd0I4QixFQUFpQlMsV0FBV3h3QixPQUdwRCxJQUFJa3BCLEdBQVM2RyxFQUFrQixDQUMzQnRZLE1BQU8sU0FDUDZCLE9BQVEsUUFDUnZOLFVBQVcsSUFFWCtPLGdCQUFnQixFQUVoQjJWLE1BQU9DLElBRWYsQ0FHQSxTQUFTQyxHQUFhQyxFQUFjQyxFQUFVQyxHQUMxQyxJQUFJdFQsRUFBUzVaLFNBQVNpUyxjQUFjLFVBQ2hDa2IsRUFBVW50QixTQUFTaVMsY0FBYyxLQU1yQyxPQUxBMkgsRUFBT3dTLGFBQWEsT0FBUSxVQUM1QnhTLEVBQU93UyxhQUFhLFFBQVNhLEdBQzdCclQsRUFBT3dTLGFBQWEsUUFBU2MsR0FDN0JDLEVBQVFmLGFBQWEsUUFBUyxRQUFVWSxHQUN4Q3BULEVBQU9zQyxZQUFZaVIsR0FDWnZULENBQ1gsQ0FHQSxTQUFTMFMsR0FBZXpULEVBQUl3VCxFQUFjZSxHQUFXLEdBQ2pELEdBQUlBLEVBQVksT0FBT0MsR0FBaUJoQixFQUFhNXJCLEtBQU00ckIsRUFBYWlCLFNBRXhFLE1BQU1DLEVBQW1CbEIsRUFBYTVyQixLQUNoQzZxQixFQUFXdHJCLFNBQVNpUyxjQUFjLE1BR2xDdWIsRUFBc0J4dEIsU0FBU2lTLGNBQWMsU0FDN0N3YixFQUF3Qnp0QixTQUFTaVMsY0FBYyxTQUMvQ3liLEVBQWUxdEIsU0FBU2lTLGNBQWMsU0FDdEMwYixFQUF3QjN0QixTQUFTaVMsY0FBYyxTQUMvQzJiLEVBQWlCNXRCLFNBQVNpUyxjQUFjLFNBQ3hDNGIsRUFBbUI3dEIsU0FBU2lTLGNBQWMsU0FDMUM2YixFQUFhOXRCLFNBQVNpUyxjQUFjLFNBSXBDOGIsRUFBYS90QixTQUFTaVMsY0FBYyxLQUMxQzhiLEVBQVdwdEIsVUFBVXF0QixJQUFJLE9BQVEsT0FBUSxrQkFDekMsTUFBTUMsRUFBZWxCLEdBQWEsZ0JBQWlCLFNBQVVsRSxHQUFTLElBQU0wRSxHQXdINUUsT0FySEFDLEVBQW9CcHVCLGlCQUFpQixRQUFTOHVCLElBRzlDVCxFQUFzQnJ1QixpQkFBaUIsTUFBTyt1QixJQUM5Q1YsRUFBc0JydUIsaUJBQWlCLFFBQVMrdUIsSUFDaERWLEVBQXNCcnVCLGlCQUFpQixTQUFVdUosSUFDN0NtaEIsR0FBOEJuaEIsRUFDOUJTLGFBQWFvZ0IsSUFDYkEsR0FBOEJ2aUIsV0FBV2tuQixHQUF5Qi9ELEdBQUEsSUFFdEVxRCxFQUFzQnJ1QixpQkFBaUIsVUFBV3VKLElBQzlDbWhCLEdBQThCbmhCLEVBQzlCUyxhQUFhb2dCLElBQ2IyRSxJQUFBLElBSUpULEVBQWF0dUIsaUJBQWlCLFFBQVNndkIsSUFDdkNWLEVBQWF0dUIsaUJBQWlCLFNBQVVndkIsSUFDeENWLEVBQWF0dUIsaUJBQWlCLFNBQVMsS0FDbkNnSyxhQUFhcWdCLElBQ2JBLEdBQXFCeGlCLFdBQVdtbkIsR0FBZ0JoRSxHQUFBLElBRXBEc0QsRUFBYXR1QixpQkFBaUIsV0FBWXVKLElBQ3RDb2hCLEdBQXFCcGhCLEVBQ3JCUyxhQUFhcWdCLEdBQUEsSUFJakJrRSxFQUFzQnZ1QixpQkFBaUIsUUFBU2l2QixJQUNoRFYsRUFBc0J2dUIsaUJBQWlCLFdBQVlGLElBQy9DcXJCLEdBQVlyckIsRUFBTTNDLEtBQU8sRUFBQyxFQUFNMkMsRUFBTW92QixNQUNsQy9JLElBQWMwRixRQUFRRyxJQUFJYixHQUFBLElBSWxDcUQsRUFBZXh1QixpQkFBaUIsUUFBU212QixJQUd6Q1YsRUFBaUJ6dUIsaUJBQWlCLFFBQVNvdkIsSUFDM0NYLEVBQWlCenVCLGlCQUFpQixTQUFVb3ZCLElBQzVDWCxFQUFpQnp1QixpQkFBaUIsU0FBUyxLQUN2Q2dLLGFBQWF3Z0IsSUFDYkEsR0FBeUIzaUIsV0FBV3VuQixHQUFvQnBFLEdBQUEsSUFFNUR5RCxFQUFpQnp1QixpQkFBaUIsV0FBWXVKLElBQzFDdWhCLEdBQXlCdmhCLEVBQ3pCUyxhQUFhd2dCLEdBQUEsSUFJakJrRSxFQUFXMXVCLGlCQUFpQixRQUFTcXZCLElBQ3JDWCxFQUFXMXVCLGlCQUFpQixTQUFVcXZCLElBQ3RDWCxFQUFXMXVCLGlCQUFpQixTQUFTLEtBQ2pDZ0ssYUFBYXlnQixJQUNiQSxHQUFtQjVpQixXQUFXd25CLEdBQWNyRSxHQUFBLElBRWhEMEQsRUFBVzF1QixpQkFBaUIsV0FBWXVKLElBQ3BDd2hCLEdBQW1CeGhCLEVBQ25CUyxhQUFheWdCLEdBQUEsSUFJakJvRSxFQUFhN3VCLGlCQUFpQixRQUFTaXNCLElBR3ZDQyxFQUFTYyxhQUFhLEtBQU12VCxHQUU1QjJVLEVBQW9CcEIsYUFBYSxPQUFRLFlBQ3pDb0IsRUFBb0JwQixhQUFhLFFBQVNqRCxJQUMxQ3FFLEVBQW9CcEIsYUFBYSxLQUFNdlQsRUFBSyxRQUM1QzJVLEVBQW9COVQsUUFBVTJTLEVBQWFxQyxLQUUzQ2pCLEVBQXNCckIsYUFBYSxPQUFRLFFBQzNDcUIsRUFBc0JyQixhQUFhLEtBQU12VCxFQUFLLFNBQzlDNFUsRUFBc0JyQixhQUFhLGNBQWVoRCxJQUNsRHFFLEVBQXNCckIsYUFBYSxRQUFTbUIsR0FFNUNHLEVBQWF0QixhQUFhLE9BQVEsUUFDbENzQixFQUFhdEIsYUFBYSxLQUFNdlQsRUFBSyxPQUNyQzZVLEVBQWF0QixhQUFhLFFBQVMsV0FDbkNzQixFQUFhdEIsYUFBYSxjQUFlL0MsSUFDekNxRSxFQUFhdEIsYUFBYSxRQUFTQyxFQUFhaUIsU0FFaERLLEVBQXNCdkIsYUFBYSxPQUFRLFFBQzNDdUIsRUFBc0J2QixhQUFhLEtBQU12VCxFQUFLLFNBQzlDOFUsRUFBc0J2QixhQUFhLFFBQVMsZUFDNUN1QixFQUFzQnZCLGFBQWEsY0FBZTlDLElBQ2xEcUUsRUFBc0J2QixhQUFhLFFBQVNDLEVBQWFzQyxrQkFFekRmLEVBQWV4QixhQUFhLE9BQVEsWUFDcEN3QixFQUFleEIsYUFBYSxLQUFNdlQsRUFBSyxPQUN2QytVLEVBQWV4QixhQUFhLFFBQVNsRCxJQUNyQzBFLEVBQWVsVSxRQUFVMlMsRUFBYXVDLFNBRXRDZixFQUFpQnpCLGFBQWEsT0FBUSxPQUN0Q3lCLEVBQWlCekIsYUFBYSxRQUFTQyxFQUFhd0MsS0FFcERmLEVBQVcxQixhQUFhLE9BQVEsUUFDaEMwQixFQUFXMUIsYUFBYSxRQUFTLFNBQzVCUixHQUFRUyxFQUFheUMsT0FHdEJoQixFQUFXMUIsYUFBYSxRQUFTNUcsR0FBYWxRLFlBRjlDd1ksRUFBVzFCLGFBQWEsUUFBUyxJQUFNQyxFQUFheUMsTUFBTXZvQixLQUFPLElBQU04bEIsRUFBYXlDLE1BQU1DLE9BTTlGekQsRUFBU3BQLFlBQVlzUixHQUNyQmxDLEVBQVNwUCxZQUFZdVIsR0FDckJuQyxFQUFTcFAsWUFBWXdSLEdBQ3JCcEMsRUFBU3BQLFlBQVl5UixHQUNyQnJDLEVBQVNwUCxZQUFZMFIsR0FDckJ0QyxFQUFTcFAsWUFBWTJSLEdBQ3JCdkMsRUFBU3BQLFlBQVk0UixHQUNyQnhDLEVBQVNwUCxZQUFZNlIsR0FDckJ6QyxFQUFTcFAsWUFBWStSLEdBRWQzQyxDQUNYLENBRUEsU0FBUytCLEdBQWlCNXNCLEVBQU02c0IsR0FDNUIsTUFBTXJ1QixFQUFLZSxTQUFTaW1CLGVBQWUsb0JBQzdCK0ksRUFBYWh2QixTQUFTaVMsY0FBYyxNQUNwQ2dkLEVBQU9qdkIsU0FBU2lTLGNBQWMsUUFDOUJpZCxFQUFrQmx2QixTQUFTaVMsY0FBYyxTQUN6Q2tkLEVBQXFCbnZCLFNBQVNpUyxjQUFjLFNBQzVDbWQsRUFBWXB2QixTQUFTaVMsY0FBYyxPQUd6Q2lkLEVBQWdCOXZCLGlCQUFpQixNQUFPaXdCLElBQ3hDSCxFQUFnQjl2QixpQkFBaUIsUUFBU2l3QixJQUMxQ0gsRUFBZ0I5dkIsaUJBQWlCLFNBQVV1SixJQUN2Q3NoQixHQUF3QnRoQixFQUN4QlMsYUFBYXNnQixJQUNiQSxHQUF3QnppQixXQUFXb29CLEdBQW1CakYsR0FBQSxJQUUxRDhFLEVBQWdCOXZCLGlCQUFpQixVQUFXdUosSUFDeENzaEIsR0FBd0J0aEIsRUFDeEJTLGFBQWFzZ0IsSUFDYjJGLElBQUEsSUFJSkYsRUFBbUIvdkIsaUJBQWlCLFFBQVNrd0IsSUFDN0NILEVBQW1CL3ZCLGlCQUFpQixTQUFVa3dCLElBQzlDSCxFQUFtQi92QixpQkFBaUIsU0FBUyxLQUN6Q2dLLGFBQWF1Z0IsSUFDYkEsR0FBMkIxaUIsV0FBV3FvQixHQUFzQmxGLEdBQUEsSUFFaEUrRSxFQUFtQi92QixpQkFBaUIsV0FBWXVKLElBQzVDcWhCLEdBQTJCcmhCLEVBQzNCUyxhQUFhdWdCLEdBQUEsSUFLakIsTUFBTTRGLEVBQVN2dkIsU0FBU2lTLGNBQWMsT0FDdENzZCxFQUFPbkQsYUFBYSxRQUFTLE9BQzdCLE1BQU0yQixFQUFhL3RCLFNBQVNpUyxjQUFjLFFBQzFDOGIsRUFBV3B0QixVQUFVcXRCLElBQUksT0FBUSxPQUFRLGtCQUN6QyxNQUFNQyxFQUFlbEIsR0FBYSxnQkFBaUIsU0FBVSxHQUFHbEUsTUFBVXBvQixLQUFRd29CLE1Ba0NsRixPQWpDQXNHLEVBQU9yVCxZQUFZNlIsR0FDbkJ3QixFQUFPclQsWUFBWStSLEdBRW5CZSxFQUFXNUMsYUFBYSxLQUFNM3JCLEdBQzlCdXVCLEVBQVc1QyxhQUFhLFFBQVMsVUFFakM2QyxFQUFLN0MsYUFBYSxRQUFTLG1CQUUzQjhDLEVBQWdCOUMsYUFBYSxPQUFRLFFBQ3JDOEMsRUFBZ0I5QyxhQUFhLHdCQUF5QixjQUN0RDhDLEVBQWdCOUMsYUFBYSxRQUFTM3JCLEdBRXRDMHVCLEVBQW1CL0MsYUFBYSxPQUFRLFFBQ3hDK0MsRUFBbUIvQyxhQUFhLFFBQVMsV0FDekMrQyxFQUFtQi9DLGFBQWEsd0JBQXlCLHNCQUN6RCtDLEVBQW1CL0MsYUFBYSxRQUFTa0IsR0FFekM4QixFQUFVaEQsYUFBYSxRQUFTLGFBRWhDNEMsRUFBVzlTLFlBQVkrUyxHQUN2QkQsRUFBVzlTLFlBQVlnVCxHQUN2QkYsRUFBVzlTLFlBQVlpVCxHQUN2QkgsRUFBVzlTLFlBQVlxVCxHQUN2QlAsRUFBVzlTLFlBQVlrVCxHQUd2QixJQUFJOUosR0FBU3JtQixFQUFHMHRCLGNBQWMsY0FBZSxDQUN6QzlZLE1BQU8sU0FDUDFMLFVBQVcsSUFDWCtPLGdCQUFnQixFQUNoQjJWLE1BQU9DLEtBR0prQyxDQUNYLENBbURBLFNBQVNRLEdBQWVDLEdBQ2hCbEssSUFBYzBGLFFBQVFHLElBQUksb0NBQW9DcUUsRUFBUUMsWUFDakQsbUJBQXJCRCxFQUFRQyxVQUNSQyxJQUVSLENBRUEsU0FBU0MsR0FBWTFFLEdBQ2IzRixJQUFjMEYsUUFBUUMsTUFBTUEsRUFDcEMsQ0FrQkEsU0FBU2dELEdBQWV2bEIsR0FDcEIsSUFDSWtRLEVBRFdsUSxFQUFFMU0sT0FBT2lFLFdBQ05nZ0IsYUFBYSxNQUMzQjJQLEVBQVVsbkIsRUFBRTFNLE9BQU95ZCxRQUV2QjRRLEdBQWN6UixHQUFJLEtBQVVnWCxFQUU1QnBGLEdBQVksb0JBQXFCSCxHQUNyQyxDQUVBLFNBQVM2RCxHQUF3QnhsQixHQUM3QixHQUFJQSxHQUNJQSxFQUFFMU0sT0FBT2lCLE9BQVM0c0IsR0FBNEI3dEIsT0FBT2lCLE1BQU8sT0FFcEUsSUFBSWdDLEVBQVF5SixHQUFLbWhCLEdBQ2pCLElBQUs1cUIsRUFBTyxPQUNaLElBQ0kyWixFQURXM1osRUFBTWpELE9BQU9pRSxXQUNWZ2dCLGFBQWEsTUFDM0JxTixFQUFtQnJ1QixFQUFNakQsT0FBT2lCLE1BRXBDb3RCLEdBQWN6UixHQUFJLEtBQVUwVSxFQUU1QjlDLEdBQVksb0JBQXFCSCxHQUNyQyxDQUVBLFNBQVMrRSxHQUFrQjFtQixHQUN2QixHQUFJQSxHQUNJQSxFQUFFMU0sT0FBT2lCLE9BQVMrc0IsR0FBc0JodUIsT0FBT2lCLE1BQU8sT0FFOUQsSUFBSWdDLEVBQVF5SixHQUFLc2hCLEdBQ2pCLElBQUsvcUIsRUFBTyxPQUNaLElBQ0kyWixFQURXM1osRUFBTWpELE9BQU9pRSxXQUNWZ2dCLGFBQWEsTUFDM0JxTixFQUFtQnJ1QixFQUFNakQsT0FBT2lCLE1BRXBDb3RCLEdBQWN6UixHQUFJLEtBQVUwVSxFQUU1QjlDLEdBQVksb0JBQXFCSCxHQUNyQyxDQUVBLFNBQVM4RCxHQUFlemxCLEdBQ3BCLEdBQUlBLEdBQ0lBLEVBQUUxTSxPQUFPaUIsT0FBUzZzQixHQUFtQjl0QixPQUFPaUIsTUFBTyxPQUUzRCxJQUFJZ0MsRUFBUXlKLEdBQUtvaEIsR0FDakIsSUFBSzdxQixFQUFPLE9BQ1osSUFDSTJaLEVBRFczWixFQUFNakQsT0FBT2lFLFdBQ1ZnZ0IsYUFBYSxNQUMzQm9OLEVBQVVwdUIsRUFBTWpELE9BQU9pQixNQUUzQm90QixHQUFjelIsR0FBSSxRQUFheVUsRUFFL0I3QyxHQUFZLG9CQUFxQkgsR0FDckMsQ0FFQSxTQUFTZ0YsR0FBcUIzbUIsR0FDMUIsR0FBSUEsR0FDSUEsRUFBRTFNLE9BQU9pQixPQUFTOHNCLEdBQXlCL3RCLE9BQU9pQixNQUFPLE9BRWpFLElBQUlnQyxFQUFReUosR0FBS3FoQixHQUNqQixJQUFLOXFCLEVBQU8sT0FDWixJQUNJMlosRUFEVzNaLEVBQU1qRCxPQUFPaUUsV0FDVmdnQixhQUFhLE1BQzNCb04sRUFBVXB1QixFQUFNakQsT0FBT2lCLE1BRTNCb3RCLEdBQWN6UixHQUFJLFFBQWF5VSxFQUUvQjdDLEdBQVksb0JBQXFCSCxHQUNyQyxDQUVBLFNBQVMrRCxHQUF1QjFsQixHQUM1QixHQUEwQixVQUF0QkEsRUFBRTFNLE9BQU9tSixTQUFzQixPQUNuQyxHQUFZLFVBQVJxZ0IsSUFBbUI5YyxFQUFFbW5CLFVBQXFCLFlBQVBySyxJQUEyQixVQUFQQSxLQUFtQjljLEVBQUVvbkIsUUFBVSxPQUMxRnBuQixFQUFFMEwsaUJBQ0VrUixJQUFjMEYsUUFBUUcsSUFBSTNGLElBQzFCRixJQUFjMEYsUUFBUUcsSUFBSWIsSUFDOUIsSUFDSTFSLEVBRFdsUSxFQUFFMU0sT0FBT2lFLFdBQ05nZ0IsYUFBYSxNQUMzQjhQLEVBQVFod0IsU0FBU2ltQixlQUFlcE4sRUFBSyxTQUNyQzhWLEVBQW1CLEdBQ25CcEosSUFBYzBGLFFBQVFHLElBQUl6aUIsR0FDOUIsSUFBSyxJQUFJek0sRUFBSSxFQUFHQSxFQUFJNHBCLEdBQVUxcEIsT0FBUUYsSUFBSyxDQUN2QyxNQUFNK3pCLEVBQVduSyxHQUFVNXBCLEdBRTNCLEdBRElxcEIsSUFBYzBGLFFBQVFHLElBQUk2RSxHQUN4QkEsS0FBWTFGLEdBQWxCLENBQ0EsT0FBUTBGLEdBQ0osSUFBSyxVQUNEdEIsR0FBc0MsUUFDdEMsTUFDSixJQUFLLFFBQ0RBLEdBQXNDLFNBQ3RDLE1BQ0osSUFBSyxNQUNEQSxHQUFzQyxPQUN0QyxNQUNKLElBQUssT0FDREEsR0FBc0M1SSxVQUl2Q3dFLEdBQVkwRixFQWhCc0IsQ0FpQjdDLENBQ0kxSyxJQUFjMEYsUUFBUUcsSUFBSSxpQkFBaUJ1RCxLQUMzQ3BKLElBQWMwRixRQUFRRyxJQUFJLHlCQUMxQjdGLElBQWMwRixRQUFRRyxJQUFJYixJQUM5QixJQUFLLElBQUlodUIsS0FBT2d1QixHQUNSaEYsSUFBYzBGLFFBQVFHLElBQUk3dUIsR0FDbkIsVUFBUGtwQixJQUFrQmtKLEVBQWlCdUIsU0FBUyxPQUM1Q3ZCLEdBQW9CcEUsR0FBWWh1QixHQUFLLEdBQUdrRCxVQUFVLEdBQUdrbUIsY0FFckRnSixHQUFvQnB5QixFQUFJb3BCLGNBR2hDcUssRUFBTTl5QixNQUFReXhCLEVBQ2RwRSxHQUFjLENBQUMsRUFDZkQsR0FBY3pSLEdBQUksaUJBQXNCOFYsRUFFeENsRSxHQUFZLG9CQUFxQkgsR0FDckMsQ0FFQSxTQUFTaUUsR0FBZ0I1bEIsR0FDakI0YyxJQUFjMEYsUUFBUUcsSUFBSWQsSUFDMUIvRSxJQUFjMEYsUUFBUUcsSUFBSXppQixFQUFFMU0sUUFDaEMsSUFDSTRjLEVBRFdsUSxFQUFFMU0sT0FBT2lFLFdBQ05nZ0IsYUFBYSxNQUMzQmlRLEVBQVd4bkIsRUFBRTFNLE9BQU95ZCxRQUV4QjRRLEdBQWN6UixHQUFJLFNBQWNzWCxFQUVoQzFGLEdBQVksb0JBQXFCSCxHQUNyQyxDQUVBLFNBQVNrRSxHQUFtQjdsQixHQUN4QixHQUFJQSxHQUNJQSxFQUFFMU0sT0FBT2lCLE9BQVNndEIsR0FBdUJqdUIsT0FBT2lCLE1BQU8sT0FFL0QsSUFBSWdDLEVBQVF5SixHQUFLdWhCLEdBQ2pCLElBQUtockIsRUFBTyxPQUNaLElBQ0kyWixFQURXM1osRUFBTWpELE9BQU9pRSxXQUNWZ2dCLGFBQWEsTUFDM0JrUSxFQUFjbHhCLEVBQU1qRCxPQUFPaUIsTUFFL0JvdEIsR0FBY3pSLEdBQUksSUFBU3VYLEVBRTNCM0YsR0FBWSxvQkFBcUJILEdBQ3JDLENBRUEsU0FBU21FLEdBQWE5bEIsR0FDbEIsR0FBSUEsR0FDSUEsRUFBRTFNLE9BQU9pQixPQUFTaXRCLEdBQWlCbHVCLE9BQU9pQixNQUFPLE9BRXpELE1BQU1nQyxFQUFReUosR0FBS3doQixHQUNuQixJQUFLanJCLEVBQU8sT0FDWixNQUNNMlosRUFEVzNaLEVBQU1qRCxPQUFPaUUsV0FDVmdnQixhQUFhLE1BQzNCbVEsRUFBY254QixFQUFNakQsT0FBT2lCLE1BQzNCb3pCLEVBQVlELEVBQVlFLFlBQVksS0FDcENocUIsRUFBTzhwQixFQUFZam9CLE1BQU0sRUFBR2tvQixHQUM1QnZCLEVBQVFzQixFQUFZL2MsTUFBTSxLQUFLa2QsTUFFckNsRyxHQUFjelIsR0FBSSxNQUFXLENBQUMsRUFDOUJ5UixHQUFjelIsR0FBSSxNQUFTLEtBQVV0UyxFQUNyQytqQixHQUFjelIsR0FBSSxNQUFTLE1BQVdrVyxFQUV0Q3RFLEdBQVksb0JBQXFCSCxHQUNyQyxDQWdFQSxTQUFTd0MsS0FDRHZILElBQWMwRixRQUFRRyxJQUFJLGdDQUFpQ2QsSUFDL0RBLEdBL0RKLFdBQ0ksSUFBSW1HLEVBQW1CLENBQUMsRUFDeEJBLEVBQW1CbkcsR0FDbkJBLEdBQWdCLENBQUMsRUFFakIsSUFDSW9HLEVBRG1CMXdCLFNBQVNpbUIsZUFBZSxpQkFDZDJHLFdBQ2pDdkMsR0FBd0JxRyxFQUFVdDBCLE9BQ2xDLElBQUssSUFBSUYsRUFBSSxFQUFHQSxFQUFJbXVCLEdBQXVCbnVCLElBQUssQ0FDNUMsSUFBSTh6QixFQUFRVSxFQUFVeDBCLEdBQUd1aEIsV0FDekIsR0FBYSxNQUFUdVMsR0FBb0MsVUFBbkJBLEVBQU01cUIsVUFBdUQsYUFBL0I0cUIsRUFBTTlQLGFBQWEsUUFBd0IsQ0FDMUYsSUFBSXlRLEVBQVFYLEVBQU03VixZQUNkbVQsRUFBVXFELEVBQU14VyxZQUNoQndVLEVBQW1CckIsRUFBUW5ULFlBQzNCZ1csRUFBV3hCLEVBQWlCeFUsWUFDNUIwVSxFQUFNc0IsRUFBU2hXLFlBQ2Z5VyxFQUFXL0IsRUFBSTFVLFlBQ25CbVEsR0FBY29HLEVBQVV4MEIsR0FBRzJjLElBQU0sQ0FBQyxFQUNsQ3lSLEdBQWNvRyxFQUFVeDBCLEdBQUcyYyxJQUFJLE1BQVczYyxFQUMxQ291QixHQUFjb0csRUFBVXgwQixHQUFHMmMsSUFBSSxLQUFVOFgsRUFBTXp6QixNQUMvQ290QixHQUFjb0csRUFBVXgwQixHQUFHMmMsSUFBSSxRQUFheVUsRUFBUXB3QixNQUNwRG90QixHQUFjb0csRUFBVXgwQixHQUFHMmMsSUFBSSxpQkFBc0I4VixFQUFpQnp4QixNQUN0RW90QixHQUFjb0csRUFBVXgwQixHQUFHMmMsSUFBSSxTQUFjc1gsRUFBU3pXLFFBQ3RENFEsR0FBY29HLEVBQVV4MEIsR0FBRzJjLElBQUksSUFBU2dXLEVBQUkzeEIsTUFDNUNvdEIsR0FBY29HLEVBQVV4MEIsR0FBRzJjLElBQUksTUFBVyxDQUFDLEVBQzNDeVIsR0FBY29HLEVBQVV4MEIsR0FBRzJjLElBQUksTUFBUyxLQUFVK1gsRUFBUzF6QixNQUFNb1csTUFBTSxLQUFLLEdBQzVFZ1gsR0FBY29HLEVBQVV4MEIsR0FBRzJjLElBQUksTUFBUyxNQUFXK1gsRUFBUzF6QixNQUFNb1csTUFBTSxLQUFLa2QsTUFDN0VsRyxHQUFjb0csRUFBVXgwQixHQUFHMmMsSUFBSSxLQUFVbVgsRUFBTXRXLFFBQy9DNFEsR0FBY29HLEVBQVV4MEIsR0FBRzJjLElBQUksT0FBWTRYLEVBQWlCQyxFQUFVeDBCLEdBQUcyYyxJQUFJZ1ksTUFDakYsTUFFSyxHQUFJSCxFQUFVeDBCLEdBQUd5RSxVQUFVbVksU0FBUyxVQUFXLENBQ2hELElBQUl5VCxFQUFTLENBQ1RwbkIsTUFBT2pKLEVBQ1B1RSxLQUFNaXdCLEVBQVV4MEIsR0FBRzJjLEdBQ25CeVUsUUFBU29ELEVBQVV4MEIsR0FBR3l3QixjQUFjLGlCQUFpQnp2QixNQUNyRHF2QixRQUFRLEVBQ1JDLGNBQWUsSUFJbkJrRSxFQUFVeDBCLEdBQUd1a0IsaUJBQWlCLE1BQU1ua0IsU0FBUTBSLElBQ3hDdWUsRUFBT0MsY0FBYzF3QixLQUFLLENBQ3RCcUosTUFBT2pKLEVBQ1B1RSxLQUFNdU4sRUFBSzZLLEdBQ1h5VSxRQUFTdGYsRUFBSzJlLGNBQWMsaUJBQWlCenZCLE1BQzdDMHhCLFNBQVU1Z0IsRUFBSzJlLGNBQWMsb0JBQzdCa0MsSUFBSzdnQixFQUFLMmUsY0FBYyxxQkFBcUJ6dkIsTUFDN0N3eEIsS0FBTTFnQixFQUFLeVAsV0FBVy9ELFNBRzFCLElBR0o0USxHQUFjb0csRUFBVXgwQixHQUFHMmMsSUFBTTBULENBQ3JDLENBQ0osQ0FDQSxPQUFPakMsRUFDWCxDQUtvQndHLEdBQ1p2TCxJQUFjMEYsUUFBUUcsSUFBSSwrQkFBZ0NkLElBQzlERyxHQUFZLG9CQUFxQkgsR0FDckMsQ0FvR0EsU0FBU3lHLEtBRUw3SyxHQUFLeE0sU0FBVSxFQUNmeU0sR0FBT2pwQixNQUFRLEtBQ2ZrcEIsR0FBUWxwQixNQUFRLEtBQ2hCc3BCLEdBQUt0cEIsTUFBUSxLQUNibXBCLEdBQVMzTSxTQUFVLEVBQ25CNE0sR0FBSXBwQixNQUFRLEtBQ1pxcEIsR0FBTXJwQixNQUFRLElBQ2xCLENBUUEsU0FBUzh6QixHQUFXM3NCLEdBQ2hCLElBQUl1bkIsR0FBUXZuQixHQUFaLENBWUEsT0FYSWtoQixLQUNBMEYsUUFBUUcsSUFBSSw4Q0FDWkgsUUFBUUcsSUFBSS9tQixLQUdXLElBQXZCQSxFQUFRNHNCLFdBQ1J4SyxHQUFXL00sU0FBVSxFQUVyQitNLEdBQVcvTSxTQUFVLEVBR2pCclYsRUFBUTZzQixTQUNaLElBQUssYUF3QkwsUUFDSXhLLEdBQVdoTixTQUFVLEVBQ3JCdU4sR0FBT2htQixNQUFNa3dCLFdBQWEsVUFDMUJqSyxHQUFTam1CLE1BQU1rd0IsV0FBYSxVQUM1QmhLLEdBQVFsbUIsTUFBTWt3QixXQUFhLFNBQzNCLE1BdkJKLElBQUssVUFDRHhLLEdBQVFqTixTQUFVLEVBQ2xCdU4sR0FBT2htQixNQUFNa3dCLFdBQWEsU0FDMUJqSyxHQUFTam1CLE1BQU1rd0IsV0FBYSxTQUM1QmhLLEdBQVFsbUIsTUFBTWt3QixXQUFhLFNBQzNCLE1BQ0osSUFBSyxnQkFDRHZLLEdBQWNsTixTQUFVLEVBQ3hCdU4sR0FBT2htQixNQUFNa3dCLFdBQWEsVUFDMUJqSyxHQUFTam1CLE1BQU1rd0IsV0FBYSxTQUM1QmhLLEdBQVFsbUIsTUFBTWt3QixXQUFhLFVBQzNCLE1BQ0osSUFBSyxjQUNEdEssR0FBWW5OLFNBQVUsRUFDdEJ1TixHQUFPaG1CLE1BQU1rd0IsV0FBYSxTQUMxQmpLLEdBQVNqbUIsTUFBTWt3QixXQUFhLFNBQzVCaEssR0FBUWxtQixNQUFNa3dCLFdBQWEsU0FxRm5DLFFBM0UwQixJQUF0QjlzQixFQUFRK3NCLFVBQ1JySyxHQUFVck4sU0FBVSxFQUdwQnFOLEdBQVVyTixTQUFVLEdBR0EsSUFBcEJyVixFQUFRZ3RCLFFBQ1JqSyxHQUFRMU4sU0FBVSxFQUdsQjBOLEdBQVExTixTQUFVLEdBR00sSUFBeEJyVixFQUFRaXRCLFlBQ1J0SyxHQUFZdE4sU0FBVSxFQUd0QnNOLEdBQVl0TixTQUFVLEVBSVUsUUFBaENyVixFQUFRa3RCLHFCQUN3QixXQUFoQ2x0QixFQUFRa3RCLHFCQUN3QixTQUFoQ2x0QixFQUFRa3RCLG9CQUVSbEssR0FBb0JucUIsTUFBUW1ILEVBQVFrdEIsb0JBR3BDbEssR0FBb0JucUIsTUFBUSxVQUdBLElBQTVCbUgsRUFBUW10QixnQkFDUmpLLEdBQWdCN04sU0FBVSxFQUcxQjZOLEdBQWdCN04sU0FBVSxHQUdLLElBQS9CclYsRUFBUW90QixtQkFDUm5LLEdBQW1CNU4sU0FBVSxFQUc3QjROLEdBQW1CNU4sU0FBVSxFQUdqQzhOLEdBQWdCOU4sUUFBVXJWLEVBQVFxdEIsa0JBQW1CLEdBRXBCLElBQTdCcnRCLEVBQVFzdEIsaUJBQ1JsSyxHQUFpQi9OLFNBQVUsRUFHM0IrTixHQUFpQi9OLFNBQVUsR0FHVSxJQUFyQ3JWLEVBQVF1dEIseUJBQ1JsSyxHQUF5QmhPLFNBQVUsRUFHbkNnTyxHQUF5QmhPLFNBQVUsR0FHSCxJQUFoQ3JWLEVBQVF3dEIsb0JBQ1JsSyxHQUFvQmpPLFNBQVUsRUFHOUJpTyxHQUFvQmpPLFNBQVUsR0FHVCxJQUFyQnJWLEVBQVF5dEIsU0FDUmpLLEdBQVNuTyxTQUFVLEVBRW5CbU8sR0FBU25PLFNBQVUsRUFHZnJWLEVBQVEwdEIsV0FDWixJQUFLLGlCQUNEakssR0FBZXBPLFNBQVUsRUFDekIsTUFDSixJQUFLLGlCQUNEcU8sR0FBZXJPLFNBQVUsRUFDekIsTUFDSixJQUFLLG9CQUNEc08sR0FBa0J0TyxTQUFVLEVBTXBDa08sR0FBdUIxcUIsTUFBUW1ILEVBQVEydEIsWUFBYyxRQXRJL0IsQ0F1STFCLENBR0F4SCxlQUFlbUYsS0FDWCxJQUNJLE1BQ010ckIsU0FEYXlrQixRQUFRbUosUUFBUUMsS0FBSzFhLElBQUksT0FDdkJuVCxRQUNyQmltQixTQUFzQnhCLFFBQVFtSixRQUFRRSxNQUFNM2EsSUFBSSxNQUM1QytOLEtBQ0EwRixRQUFRRyxJQUFJLGtEQUNaSCxRQUFRRyxJQUFJZCxLQUVoQm9CLEtBQ0tFLEdBQVF2bkIsSUFBVTJzQixHQUFXM3NCLEdBQzlCa2hCLEtBQ0EwRixRQUFRRyxJQUFJL21CLEdBQ1o0bUIsUUFBUUcsSUFBSSw0QkFFcEIsQ0FBRSxNQUFPaFEsR0FDRG1LLElBQWMwRixRQUFRQyxNQUFNOVAsRUFDcEMsQ0FDSixDQStCQSxTQUFTZ1gsS0FDRHpMLEdBQVFqTixTQUFXbU4sR0FBWW5OLFNBQy9CdU4sR0FBT2htQixNQUFNa3dCLFdBQWEsU0FDMUJqSyxHQUFTam1CLE1BQU1rd0IsV0FBYSxTQUM1QmhLLEdBQVFsbUIsTUFBTWt3QixXQUFhLFdBRTNCbEssR0FBT2htQixNQUFNa3dCLFdBQWEsVUFDdEJ2SyxHQUFjbE4sU0FDZHdOLEdBQVNqbUIsTUFBTWt3QixXQUFhLFNBQzVCaEssR0FBUWxtQixNQUFNa3dCLFdBQWEsWUFFM0JqSyxHQUFTam1CLE1BQU1rd0IsV0FBYSxVQUM1QmhLLEdBQVFsbUIsTUFBTWt3QixXQUFhLFdBSW5DLElBQUkzaUIsRUFBTyxDQUFDLEVBQ1pBLEVBQUssUUFBYXhPLFNBQVMyc0IsY0FBYyxpQ0FBaUN6dkIsTUFDMUVzUixFQUFLLFVBQWV1WSxHQUFVck4sUUFDOUJsTCxFQUFLLFFBQWE0WSxHQUFRMU4sUUFDMUJsTCxFQUFLLFlBQWlCd1ksR0FBWXROLFFBQ2xDK1EsR0FBWSxnQkFBaUJqYyxFQUNqQyxDQWtDQSxTQUFTNmpCLEtBTUw1SCxHQUFZLHFCQUFzQixDQUFFNkgsYUFMakIsQ0FDZlYseUJBQTBCbEssR0FBeUJoTyxRQUNuRGlZLGlCQUFrQmxLLEdBQWlCL04sUUFDbkNtWSxvQkFBcUJsSyxHQUFvQmpPLFVBR2pELENBaUJBLFNBQVM2WSxHQUFlOXVCLEVBQUdzWSxHQUN2QixPQUFPdFksRUFBSXNZLENBQ2YsQ0FFQSxTQUFTeVcsR0FBZS91QixFQUFHc1ksR0FDdkIsT0FBT3RZLEVBQUVraUIsY0FBYzhNLGNBQWMxVyxFQUFFNEosY0FDM0MsQ0EyQkEsU0FBUytNLEdBQWlCQyxFQUFXM1osR0FDakMsSUFBSTRaLEVBQWU1eUIsU0FBU3lnQixpQkFBaUIsSUFBTWtTLEVBQVksS0FFL0QsSUFBSyxJQUFJejJCLEtBQUswMkIsRUFDVixJQUNJLEdBQW9DLE1BQWhDQSxFQUFhMTJCLEdBQUdna0IsYUFBc0IsU0FDMUMsSUFBSTJTLEVBQWNELEVBQWExMkIsR0FBR2drQixhQUFheVMsR0FDM0NsRCxFQUFVM0csUUFBUUMsS0FBS0MsV0FBVzZKLEdBQ3RDLE9BQVE3WixHQUNKLElBQUssY0FDRDRaLEVBQWExMkIsR0FBR3NhLFlBQWNpWixFQUM5QixNQUNKLElBQUssY0FDRG1ELEVBQWExMkIsR0FBRzQyQixZQUFjckQsRUFDOUIsTUFDSixJQUFLLFFBQ0RtRCxFQUFhMTJCLEdBQUc2MkIsTUFBUXRELEVBS3BDLENBQUUsTUFBT3VELEdBQ0R6TixJQUFjMEYsUUFBUUMsTUFBTSxtQkFBbUIwSCxFQUFhMTJCLHdCQUNwRSxDQUVSLENBa0NBLFNBQVMwdkIsR0FBUTF1QixHQUNiLE1BQXFCLGlCQUFWQSxJQUNlLGlCQUFWQSxFQUFtRCxJQUF4QkEsRUFBTTZjLE9BQU8zZCxPQUMvQ29rQixNQUFNeVMsUUFBUS8xQixHQUFnQyxJQUFqQkEsRUFBTWQsT0FDbEIsaUJBQVZjLEVBQ0ssT0FBVkEsR0FBZ0QsSUFBOUIzQixPQUFPRCxLQUFLNEIsR0FBT2QsT0FDcEIsa0JBQVZjLElBQ0xBLEVBQ2pCLENBM3JDQThDLFNBQVNaLGlCQUFpQixtQkFBb0J1d0IsSUFDOUM3RyxRQUFRbUosUUFBUWlCLFVBQVVDLGFBdUUxQixTQUE2QkMsRUFBU0MsR0FDbEMsR0FBYSxVQUFUQSxFQUFrQixDQUNsQixJQUFJNUMsRUFBbUI1RixLQUFLQyxNQUFNRCxLQUFLRSxVQUFVVCxLQUNqREEsR0FBZ0IsQ0FBQyxFQUNqQixJQUFJZ0osRUFBTS8zQixPQUFPRCxLQUFLODNCLEdBQ2xCN04sS0FDQTBGLFFBQVFHLElBQUlnSSxHQUNabkksUUFBUUcsSUFBSWtJLElBRWhCLElBQUssSUFBSXphLEtBQU15YSxPQUNrQm5sQixJQUF6QmlsQixFQUFRdmEsR0FBSTBhLFdBR1poTyxJQUFjMEYsUUFBUUcsSUFBSXZTLEdBQzlCeVIsR0FBY3pSLEdBQU11YSxFQUFRdmEsR0FBSTBhLFNBQzVCaE8sS0FDQTBGLFFBQVFHLElBQUksaUJBQWlCdlMsUUFDN0JvUyxRQUFRRyxJQUFJZCxHQUFjelIsT0FHN0J0ZCxPQUFPRCxLQUFLZ3ZCLElBQWVsdUIsT0FBUyxJQUFHa3VCLEdBQWdCbUcsR0FDeERsTCxJQUFjMEYsUUFBUUcsSUFBSWQsSUFDOUJvQixJQUNKLE1BQU8sR0FBYSxTQUFUMkgsRUFBaUIsQ0FDeEIsSUFBSTdrQixFQUFPLENBQUMsRUFDUmdsQixFQUFhajRCLE9BQU9ELEtBQUs4M0IsR0FDekI3TixLQUNBMEYsUUFBUUcsSUFBSWdJLEdBQ1puSSxRQUFRRyxJQUFJb0ksSUFFaEIsSUFBSyxJQUFJQyxLQUFhRCxPQUNrQnJsQixJQUFoQ2lsQixFQUFRSyxHQUFXRixXQUF3Qi9rQixFQUFLaWxCLEdBQWFMLEVBQVFLLEdBQVdGLFVBQ2hGaE8sS0FDQTBGLFFBQVFHLElBQUlxSSxHQUNaeEksUUFBUUcsSUFBSWdJLEVBQVFLLEdBQVdGLFVBQy9CdEksUUFBUUcsSUFBSSw0Q0FHaEI3RixJQUFjMEYsUUFBUUcsSUFBSTVjLEdBQzlCLE1BQU1uSyxFQUFVbUssRUFBS25LLFFBQ2hCdW5CLEdBQVF2bkIsSUFBVTJzQixHQUFXM3NCLEVBQ3RDLENBQ0osSUE3R0FvaUIsR0FBV3JuQixpQkFBaUIsU0E2L0I1QixXQUVJcXJCLEdBQVksc0JBQXVCLENBQUV3RyxXQUQ1QnhLLEdBQVcvTSxTQUV4QixJQS8vQkE2TixHQUFnQm5vQixpQkFBaUIsU0FnaUNqQyxXQUVJcXJCLEdBQVksd0JBQXlCLENBQUUrRyxnQkFEN0JqSyxHQUFnQjdOLFNBRTlCLElBbGlDQThOLEdBQWdCcG9CLGlCQUFpQixTQXdpQ2pDLFdBQ0lxckIsR0FBWSx3QkFBeUIsQ0FBRWlILGdCQUFpQmxLLEdBQWdCOU4sU0FDNUUsSUF6aUNBb04sR0FBUTFuQixpQkFBaUIsUUFBU2d6QixJQUNsQ3JMLEdBQVUzbkIsaUJBQWlCLFFBQVNnekIsSUFDcENoTCxHQUFRaG9CLGlCQUFpQixRQUFTZ3pCLElBQ2xDcEwsR0FBWTVuQixpQkFBaUIsUUFBU2d6QixJQUN0Qy9LLEdBQW9Cam9CLGlCQUFpQixTQXVpQ3JDLFdBRUlxckIsR0FBWSw0QkFBNkIsQ0FBRThHLG9CQURoQ2xLLEdBQW9CbnFCLE9BRW5DLElBemlDQW9xQixHQUFtQmxvQixpQkFBaUIsU0E4aENwQyxXQUNJcXJCLEdBQVksMkJBQTRCLENBQUVnSCxtQkFBb0JuSyxHQUFtQjVOLFNBQ3JGLElBL2hDQWtPLEdBQXVCeG9CLGlCQUFpQixVQTBpQ3hDLFdBQ0lxckIsR0FBWSwwQkFBMkIsQ0FDbkN1SCxXQUFZcEssR0FBdUIxcUIsTUFDbkN3MkIsY0FBZTlMLEdBQXVCK0wsZ0JBQWdCLEdBQUdDLFFBQVEvRSxLQUV6RSxJQTlpQ0FwSCxHQUFpQnJvQixpQkFBaUIsUUFBU2l6QixJQUMzQzNLLEdBQXlCdG9CLGlCQUFpQixRQUFTaXpCLElBQ25EMUssR0FBb0J2b0IsaUJBQWlCLFFBQVNpekIsSUFDOUN4SyxHQUFTem9CLGlCQUFpQixTQXNqQzFCLFdBRUlxckIsR0FBWSxpQkFBa0IsQ0FBRXFILFNBRFpqSyxHQUFTbk8sU0FFakMsSUF4akNBdU8sR0FBVTdvQixpQkFBaUIsU0E0Z0MzQixXQUNJLElBQUlvUCxFQUFPLENBQUMsRUFDWkEsRUFBSyxVQUFleE8sU0FBUzJzQixjQUFjLG9DQUFvQ3p2QixNQUMvRXV0QixHQUFZLGtCQUFtQmpjLEVBQ25DLElBN2dDQTBaLEdBQVk5b0IsaUJBQWlCLFNBMFk3QixXQUNJLElBQ0lzeEIsRUFEbUIxd0IsU0FBU2ltQixlQUFlLGlCQUNkMkcsV0FDakMsSUFBSyxJQUFJMXdCLEVBQUksRUFBR0EsRUFBSXcwQixFQUFVdDBCLE9BQVFGLElBQUssQ0FDdkMsSUFBSTh6QixFQUFRVSxFQUFVeDBCLEdBQUd1aEIsV0FDWixNQUFUdVMsR0FBbUMsU0FBbEJBLEVBQU01cUIsVUFBcUQsWUFBOUI0cUIsRUFBTTlQLGFBQWEsVUFDakU4UCxFQUFNdFcsU0FBVSxFQUV4QixDQUNBb1QsSUFDSixJQW5aQTNFLEdBQWEvb0IsaUJBQWlCLFNBcVo5QixXQUNJLElBQ0lzeEIsRUFEbUIxd0IsU0FBU2ltQixlQUFlLGlCQUNkMkcsV0FDakMsSUFBSyxJQUFJMXdCLEVBQUksRUFBR0EsRUFBSXcwQixFQUFVdDBCLE9BQVFGLElBQUssQ0FDdkMsSUFBSTh6QixFQUFRVSxFQUFVeDBCLEdBQUd1aEIsV0FDWixNQUFUdVMsR0FBbUMsU0FBbEJBLEVBQU01cUIsVUFBcUQsWUFBOUI0cUIsRUFBTTlQLGFBQWEsVUFDakU4UCxFQUFNdFcsU0FBVSxFQUV4QixDQUNBb1QsSUFDSixJQTlaQTFFLEdBQWFocEIsaUJBQWlCLFNBZ2E5QixXQUNJLElBQUlxdEIsRUFBSyxHQUNMb0gsRUFBVSxFQUNkLElBQUssSUFBSWhiLEtBQU15UixHQUNYbUMsRUFBRzN3QixLQUFLd3VCLEdBQWN6UixHQUFJcFksTUFFOUJnc0IsRUFpcUJKLFNBQTRCcUgsR0FDeEIsSUFBSUMsRUFBVSxHQUNWQyxFQUFRLEdBQ1osSUFBSyxJQUFJaG1CLEtBQVE4bEIsRUFDUkcsTUFBTWpyQixPQUFPZ0YsSUFHZGdtQixFQUFNbDRCLEtBQUtrUyxHQUZYK2xCLEVBQVFqNEIsS0FBS2tOLE9BQU9nRixJQU81QixPQUZBK2xCLEVBQVVBLEVBQVF4ZSxLQUFLZ2QsSUFDdkJ5QixFQUFRQSxFQUFNemUsS0FBS2lkLElBQ1p1QixFQUFReG9CLE9BQU95b0IsRUFDMUIsQ0E5cUJTRSxDQUFtQnpILEdBQ3BCbEgsSUFBYzBGLFFBQVFHLElBQUlxQixHQUM5QixJQUFLLElBQUloc0IsS0FBUWdzQixFQUNiLElBQUssSUFBSTVULEtBQU15UixHQUNQQSxHQUFjelIsR0FBSXBZLE1BQVFBLElBQzFCNnBCLEdBQWN6UixHQUFJMVQsTUFBUTB1QixFQUMxQkEsS0FJWm5JLEtBQ0FvQixJQUNKLElBamJBekUsR0FBd0JqcEIsaUJBQWlCLFFBQVNxc0IsSUFDbERuRCxHQUF3QmxwQixpQkFBaUIsUUFBU3FzQixJQUNsRGxELEdBQVNucEIsaUJBQWlCLFNBaWIxQixXQUNrQnFyQixHQUFZLFFBQVMsTUFDM0IwSixLQUFLM0UsR0FBZ0JJLEdBQ2pDLElBamJBcEgsR0FBUXBwQixpQkFBaUIsU0EwckJ6QixXQUNJcXJCLEdBQVksbUJBQW9CLENBQzVCb0UsSUFBSzd1QixTQUFTaW1CLGVBQWUsT0FBTy9vQixPQUU1QyxJQTdyQkF1ckIsR0FBT3JwQixpQkFBaUIsU0ErckJ4QixXQUNJLE1BQU15WixFQUFLc04sR0FBT2pwQixNQUFNMkQsUUFBUSxJQUFLLEtBQUs4a0IsY0FDcEN3RyxFQUFtQm5zQixTQUFTaW1CLGVBQWUsaUJBQzNDMWYsRUFBT2dnQixHQUFNcnBCLE1BQU1vVyxNQUFNLEtBQUssR0FDOUJ5YixFQUFReEksR0FBTXJwQixNQUFNb1csTUFBTSxLQUFLa2QsTUFDckMsSUFBSTRELEVBQVM5TixHQUFJcHBCLE1BQ2JtM0IsRUFBVSxHQUdURCxFQUFPeE8sV0FBVyxjQUNmd08sRUFBT3hPLFdBQVcsV0FDbEJ3TyxFQUFPdnpCLFFBQVEsVUFBVyxZQUUxQnV6QixHQUFVLFdBQWFBLEdBTTNCQyxFQURBRCxFQUFPbEUsU0FBUyxpQkFDTmtFLEVBQU92ekIsUUFBUSxnQkFBaUIsUUFDbkN1ekIsRUFBT2xFLFNBQVMsTUFDYmtFLEVBQU92ekIsUUFBUSxLQUFNLFFBRXJCdXpCLEVBQVMsT0FJdkIsR0FBSTlOLEdBQUlnTyxTQUFTQyxlQW9WckIsU0FBb0IxRixHQUNoQixJQUVJLE9BREEsSUFBSTJGLElBQUkzRixJQUNELENBQ1gsQ0FBRSxNQUFPbG1CLEdBRUwsT0FBTyxDQUNYLENBQ0osQ0E1VnNDOHJCLENBQVdKLEdBRXpDLFlBcm9CSjVKLEdBQVksU0Fvb0JEbEIsSUFJWGUsR0FBY3pSLEdBQU0sQ0FDaEIxVCxNQUFPa2xCLEdBQ1A1cEIsS0FBTTBsQixHQUFPanBCLE1BQ2Jvd0IsUUFBU2xILEdBQVFscEIsTUFDakJ5eEIsaUJBQWtCbkksR0FBS3RwQixNQUN2QjB4QixTQUFVdkksR0FBUzNNLFFBQ25CbVYsSUFBS3ZJLEdBQUlwcEIsTUFDVHd4QixLQUFNeEksR0FBS3hNLFFBQ1hnYixhQUFjLE1BR2xCcEssR0FBY3pSLEdBQUksTUFBVyxDQUFDLEVBQzlCeVIsR0FBY3pSLEdBQUksTUFBUyxLQUFVdFMsRUFDckMrakIsR0FBY3pSLEdBQUksTUFBUyxNQUFXa1csRUFFbEN4SixJQUFjMEYsUUFBUUcsSUFBSSxzQkFBd0J2UyxFQUFLLEtBQU9nUyxLQUFLRSxVQUFVVCxHQUFjelIsS0FFL0YsTUFBTXlTLEVBQVdnQixHQUFlelQsRUFBSXlSLEdBQWN6UixJQUFLLEdBQ3ZEc1QsRUFBaUJqUSxZQUFZb1AsR0FFN0JiLEdBQVkscUJBQXNCLENBQzlCNVIsR0FBSUEsRUFDSndULGFBQWMvQixHQUFjelIsS0FJaENrWSxJQUNKLElBenZCQXJJLEdBQXdCdHBCLGlCQUFpQixRQUFTMnhCLElBS2xEcEksR0FBWXZwQixpQkFBaUIsU0FxOEI3QixXQUNJMHRCLEtBQ0EsSUFBSTZILEVBQWlCLElBQUlDLEtBQUssQ0FBQy9KLEtBQUtFLFVBQVVULEdBQWUsS0FBTSxJQUFLLENBQ3BFdFIsS0FBTSxZQUNOdlksS0FBTSx1QkFHVmdxQixHQUFZLDBCQUEyQnRzQixPQUFPcTJCLElBQUlLLGdCQUFnQkYsR0FDdEUsSUE1OEJBL0wsR0FBVXhwQixpQkFBaUIsVUE4OEIzQixXQUNJMHBCLFFBQVFtSixRQUFRRSxNQUFNM2UsUUFBUTJnQixNQUFLLEtBQy9CLElBQ0lXLEVBRFM5MEIsU0FBU2ltQixlQUFlLFVBQ2Y4TyxNQUFNLEdBQ3hCQyxFQUFTLElBQUlDLFdBQ2pCRCxFQUFPRSxPQUFTLFNBQVVoMkIsR0FDdEJvckIsR0FBZ0JPLEtBQUtDLE1BQU01ckIsRUFBTWpELE9BQU9rNUIsUUFDeEN6SixLQUNBb0IsSUFDSixFQUNBa0ksRUFBT0ksV0FBV04sRUFBQSxHQUNuQjNKLEdBQ1AsSUFtSEl1SCxHQUFpQixZQUFhLGVBQzlCQSxHQUFpQix3QkFBeUIsZUFDMUNBLEdBQWlCLGtCQUFtQiIsInNvdXJjZXMiOlsibm9kZV9tb2R1bGVzL3NvcnRhYmxlanMvbW9kdWxhci9zb3J0YWJsZS5lc20uanMiLCJzcmMvc2NyaXB0cy9vcHRpb25zLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIi8qKiFcbiAqIFNvcnRhYmxlIDEuMTUuMFxuICogQGF1dGhvclx0UnViYVhhICAgPHRyYXNoQHJ1YmF4YS5vcmc+XG4gKiBAYXV0aG9yXHRvd2VubSAgICA8b3dlbjIzMzU1QGdtYWlsLmNvbT5cbiAqIEBsaWNlbnNlIE1JVFxuICovXG5mdW5jdGlvbiBvd25LZXlzKG9iamVjdCwgZW51bWVyYWJsZU9ubHkpIHtcbiAgdmFyIGtleXMgPSBPYmplY3Qua2V5cyhvYmplY3QpO1xuXG4gIGlmIChPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzKSB7XG4gICAgdmFyIHN5bWJvbHMgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzKG9iamVjdCk7XG5cbiAgICBpZiAoZW51bWVyYWJsZU9ubHkpIHtcbiAgICAgIHN5bWJvbHMgPSBzeW1ib2xzLmZpbHRlcihmdW5jdGlvbiAoc3ltKSB7XG4gICAgICAgIHJldHVybiBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKG9iamVjdCwgc3ltKS5lbnVtZXJhYmxlO1xuICAgICAgfSk7XG4gICAgfVxuXG4gICAga2V5cy5wdXNoLmFwcGx5KGtleXMsIHN5bWJvbHMpO1xuICB9XG5cbiAgcmV0dXJuIGtleXM7XG59XG5cbmZ1bmN0aW9uIF9vYmplY3RTcHJlYWQyKHRhcmdldCkge1xuICBmb3IgKHZhciBpID0gMTsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykge1xuICAgIHZhciBzb3VyY2UgPSBhcmd1bWVudHNbaV0gIT0gbnVsbCA/IGFyZ3VtZW50c1tpXSA6IHt9O1xuXG4gICAgaWYgKGkgJSAyKSB7XG4gICAgICBvd25LZXlzKE9iamVjdChzb3VyY2UpLCB0cnVlKS5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHtcbiAgICAgICAgX2RlZmluZVByb3BlcnR5KHRhcmdldCwga2V5LCBzb3VyY2Vba2V5XSk7XG4gICAgICB9KTtcbiAgICB9IGVsc2UgaWYgKE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3JzKSB7XG4gICAgICBPYmplY3QuZGVmaW5lUHJvcGVydGllcyh0YXJnZXQsIE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3JzKHNvdXJjZSkpO1xuICAgIH0gZWxzZSB7XG4gICAgICBvd25LZXlzKE9iamVjdChzb3VyY2UpKS5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHtcbiAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwga2V5LCBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKHNvdXJjZSwga2V5KSk7XG4gICAgICB9KTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gdGFyZ2V0O1xufVxuXG5mdW5jdGlvbiBfdHlwZW9mKG9iaikge1xuICBcIkBiYWJlbC9oZWxwZXJzIC0gdHlwZW9mXCI7XG5cbiAgaWYgKHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiAmJiB0eXBlb2YgU3ltYm9sLml0ZXJhdG9yID09PSBcInN5bWJvbFwiKSB7XG4gICAgX3R5cGVvZiA9IGZ1bmN0aW9uIChvYmopIHtcbiAgICAgIHJldHVybiB0eXBlb2Ygb2JqO1xuICAgIH07XG4gIH0gZWxzZSB7XG4gICAgX3R5cGVvZiA9IGZ1bmN0aW9uIChvYmopIHtcbiAgICAgIHJldHVybiBvYmogJiYgdHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIG9iai5jb25zdHJ1Y3RvciA9PT0gU3ltYm9sICYmIG9iaiAhPT0gU3ltYm9sLnByb3RvdHlwZSA/IFwic3ltYm9sXCIgOiB0eXBlb2Ygb2JqO1xuICAgIH07XG4gIH1cblxuICByZXR1cm4gX3R5cGVvZihvYmopO1xufVxuXG5mdW5jdGlvbiBfZGVmaW5lUHJvcGVydHkob2JqLCBrZXksIHZhbHVlKSB7XG4gIGlmIChrZXkgaW4gb2JqKSB7XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KG9iaiwga2V5LCB7XG4gICAgICB2YWx1ZTogdmFsdWUsXG4gICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgICAgd3JpdGFibGU6IHRydWVcbiAgICB9KTtcbiAgfSBlbHNlIHtcbiAgICBvYmpba2V5XSA9IHZhbHVlO1xuICB9XG5cbiAgcmV0dXJuIG9iajtcbn1cblxuZnVuY3Rpb24gX2V4dGVuZHMoKSB7XG4gIF9leHRlbmRzID0gT2JqZWN0LmFzc2lnbiB8fCBmdW5jdGlvbiAodGFyZ2V0KSB7XG4gICAgZm9yICh2YXIgaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHtcbiAgICAgIHZhciBzb3VyY2UgPSBhcmd1bWVudHNbaV07XG5cbiAgICAgIGZvciAodmFyIGtleSBpbiBzb3VyY2UpIHtcbiAgICAgICAgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChzb3VyY2UsIGtleSkpIHtcbiAgICAgICAgICB0YXJnZXRba2V5XSA9IHNvdXJjZVtrZXldO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIHRhcmdldDtcbiAgfTtcblxuICByZXR1cm4gX2V4dGVuZHMuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbn1cblxuZnVuY3Rpb24gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2Uoc291cmNlLCBleGNsdWRlZCkge1xuICBpZiAoc291cmNlID09IG51bGwpIHJldHVybiB7fTtcbiAgdmFyIHRhcmdldCA9IHt9O1xuICB2YXIgc291cmNlS2V5cyA9IE9iamVjdC5rZXlzKHNvdXJjZSk7XG4gIHZhciBrZXksIGk7XG5cbiAgZm9yIChpID0gMDsgaSA8IHNvdXJjZUtleXMubGVuZ3RoOyBpKyspIHtcbiAgICBrZXkgPSBzb3VyY2VLZXlzW2ldO1xuICAgIGlmIChleGNsdWRlZC5pbmRleE9mKGtleSkgPj0gMCkgY29udGludWU7XG4gICAgdGFyZ2V0W2tleV0gPSBzb3VyY2Vba2V5XTtcbiAgfVxuXG4gIHJldHVybiB0YXJnZXQ7XG59XG5cbmZ1bmN0aW9uIF9vYmplY3RXaXRob3V0UHJvcGVydGllcyhzb3VyY2UsIGV4Y2x1ZGVkKSB7XG4gIGlmIChzb3VyY2UgPT0gbnVsbCkgcmV0dXJuIHt9O1xuXG4gIHZhciB0YXJnZXQgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZShzb3VyY2UsIGV4Y2x1ZGVkKTtcblxuICB2YXIga2V5LCBpO1xuXG4gIGlmIChPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzKSB7XG4gICAgdmFyIHNvdXJjZVN5bWJvbEtleXMgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzKHNvdXJjZSk7XG5cbiAgICBmb3IgKGkgPSAwOyBpIDwgc291cmNlU3ltYm9sS2V5cy5sZW5ndGg7IGkrKykge1xuICAgICAga2V5ID0gc291cmNlU3ltYm9sS2V5c1tpXTtcbiAgICAgIGlmIChleGNsdWRlZC5pbmRleE9mKGtleSkgPj0gMCkgY29udGludWU7XG4gICAgICBpZiAoIU9iamVjdC5wcm90b3R5cGUucHJvcGVydHlJc0VudW1lcmFibGUuY2FsbChzb3VyY2UsIGtleSkpIGNvbnRpbnVlO1xuICAgICAgdGFyZ2V0W2tleV0gPSBzb3VyY2Vba2V5XTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gdGFyZ2V0O1xufVxuXG5mdW5jdGlvbiBfdG9Db25zdW1hYmxlQXJyYXkoYXJyKSB7XG4gIHJldHVybiBfYXJyYXlXaXRob3V0SG9sZXMoYXJyKSB8fCBfaXRlcmFibGVUb0FycmF5KGFycikgfHwgX3Vuc3VwcG9ydGVkSXRlcmFibGVUb0FycmF5KGFycikgfHwgX25vbkl0ZXJhYmxlU3ByZWFkKCk7XG59XG5cbmZ1bmN0aW9uIF9hcnJheVdpdGhvdXRIb2xlcyhhcnIpIHtcbiAgaWYgKEFycmF5LmlzQXJyYXkoYXJyKSkgcmV0dXJuIF9hcnJheUxpa2VUb0FycmF5KGFycik7XG59XG5cbmZ1bmN0aW9uIF9pdGVyYWJsZVRvQXJyYXkoaXRlcikge1xuICBpZiAodHlwZW9mIFN5bWJvbCAhPT0gXCJ1bmRlZmluZWRcIiAmJiBpdGVyW1N5bWJvbC5pdGVyYXRvcl0gIT0gbnVsbCB8fCBpdGVyW1wiQEBpdGVyYXRvclwiXSAhPSBudWxsKSByZXR1cm4gQXJyYXkuZnJvbShpdGVyKTtcbn1cblxuZnVuY3Rpb24gX3Vuc3VwcG9ydGVkSXRlcmFibGVUb0FycmF5KG8sIG1pbkxlbikge1xuICBpZiAoIW8pIHJldHVybjtcbiAgaWYgKHR5cGVvZiBvID09PSBcInN0cmluZ1wiKSByZXR1cm4gX2FycmF5TGlrZVRvQXJyYXkobywgbWluTGVuKTtcbiAgdmFyIG4gPSBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwobykuc2xpY2UoOCwgLTEpO1xuICBpZiAobiA9PT0gXCJPYmplY3RcIiAmJiBvLmNvbnN0cnVjdG9yKSBuID0gby5jb25zdHJ1Y3Rvci5uYW1lO1xuICBpZiAobiA9PT0gXCJNYXBcIiB8fCBuID09PSBcIlNldFwiKSByZXR1cm4gQXJyYXkuZnJvbShvKTtcbiAgaWYgKG4gPT09IFwiQXJndW1lbnRzXCIgfHwgL14oPzpVaXxJKW50KD86OHwxNnwzMikoPzpDbGFtcGVkKT9BcnJheSQvLnRlc3QobikpIHJldHVybiBfYXJyYXlMaWtlVG9BcnJheShvLCBtaW5MZW4pO1xufVxuXG5mdW5jdGlvbiBfYXJyYXlMaWtlVG9BcnJheShhcnIsIGxlbikge1xuICBpZiAobGVuID09IG51bGwgfHwgbGVuID4gYXJyLmxlbmd0aCkgbGVuID0gYXJyLmxlbmd0aDtcblxuICBmb3IgKHZhciBpID0gMCwgYXJyMiA9IG5ldyBBcnJheShsZW4pOyBpIDwgbGVuOyBpKyspIGFycjJbaV0gPSBhcnJbaV07XG5cbiAgcmV0dXJuIGFycjI7XG59XG5cbmZ1bmN0aW9uIF9ub25JdGVyYWJsZVNwcmVhZCgpIHtcbiAgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkludmFsaWQgYXR0ZW1wdCB0byBzcHJlYWQgbm9uLWl0ZXJhYmxlIGluc3RhbmNlLlxcbkluIG9yZGVyIHRvIGJlIGl0ZXJhYmxlLCBub24tYXJyYXkgb2JqZWN0cyBtdXN0IGhhdmUgYSBbU3ltYm9sLml0ZXJhdG9yXSgpIG1ldGhvZC5cIik7XG59XG5cbnZhciB2ZXJzaW9uID0gXCIxLjE1LjBcIjtcblxuZnVuY3Rpb24gdXNlckFnZW50KHBhdHRlcm4pIHtcbiAgaWYgKHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnICYmIHdpbmRvdy5uYXZpZ2F0b3IpIHtcbiAgICByZXR1cm4gISEgLypAX19QVVJFX18qL25hdmlnYXRvci51c2VyQWdlbnQubWF0Y2gocGF0dGVybik7XG4gIH1cbn1cblxudmFyIElFMTFPckxlc3MgPSB1c2VyQWdlbnQoLyg/OlRyaWRlbnQuKnJ2WyA6XT8xMVxcLnxtc2llfGllbW9iaWxlfFdpbmRvd3MgUGhvbmUpL2kpO1xudmFyIEVkZ2UgPSB1c2VyQWdlbnQoL0VkZ2UvaSk7XG52YXIgRmlyZUZveCA9IHVzZXJBZ2VudCgvZmlyZWZveC9pKTtcbnZhciBTYWZhcmkgPSB1c2VyQWdlbnQoL3NhZmFyaS9pKSAmJiAhdXNlckFnZW50KC9jaHJvbWUvaSkgJiYgIXVzZXJBZ2VudCgvYW5kcm9pZC9pKTtcbnZhciBJT1MgPSB1c2VyQWdlbnQoL2lQKGFkfG9kfGhvbmUpL2kpO1xudmFyIENocm9tZUZvckFuZHJvaWQgPSB1c2VyQWdlbnQoL2Nocm9tZS9pKSAmJiB1c2VyQWdlbnQoL2FuZHJvaWQvaSk7XG5cbnZhciBjYXB0dXJlTW9kZSA9IHtcbiAgY2FwdHVyZTogZmFsc2UsXG4gIHBhc3NpdmU6IGZhbHNlXG59O1xuXG5mdW5jdGlvbiBvbihlbCwgZXZlbnQsIGZuKSB7XG4gIGVsLmFkZEV2ZW50TGlzdGVuZXIoZXZlbnQsIGZuLCAhSUUxMU9yTGVzcyAmJiBjYXB0dXJlTW9kZSk7XG59XG5cbmZ1bmN0aW9uIG9mZihlbCwgZXZlbnQsIGZuKSB7XG4gIGVsLnJlbW92ZUV2ZW50TGlzdGVuZXIoZXZlbnQsIGZuLCAhSUUxMU9yTGVzcyAmJiBjYXB0dXJlTW9kZSk7XG59XG5cbmZ1bmN0aW9uIG1hdGNoZXMoXG4vKipIVE1MRWxlbWVudCovXG5lbCxcbi8qKlN0cmluZyovXG5zZWxlY3Rvcikge1xuICBpZiAoIXNlbGVjdG9yKSByZXR1cm47XG4gIHNlbGVjdG9yWzBdID09PSAnPicgJiYgKHNlbGVjdG9yID0gc2VsZWN0b3Iuc3Vic3RyaW5nKDEpKTtcblxuICBpZiAoZWwpIHtcbiAgICB0cnkge1xuICAgICAgaWYgKGVsLm1hdGNoZXMpIHtcbiAgICAgICAgcmV0dXJuIGVsLm1hdGNoZXMoc2VsZWN0b3IpO1xuICAgICAgfSBlbHNlIGlmIChlbC5tc01hdGNoZXNTZWxlY3Rvcikge1xuICAgICAgICByZXR1cm4gZWwubXNNYXRjaGVzU2VsZWN0b3Ioc2VsZWN0b3IpO1xuICAgICAgfSBlbHNlIGlmIChlbC53ZWJraXRNYXRjaGVzU2VsZWN0b3IpIHtcbiAgICAgICAgcmV0dXJuIGVsLndlYmtpdE1hdGNoZXNTZWxlY3RvcihzZWxlY3Rvcik7XG4gICAgICB9XG4gICAgfSBjYXRjaCAoXykge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBmYWxzZTtcbn1cblxuZnVuY3Rpb24gZ2V0UGFyZW50T3JIb3N0KGVsKSB7XG4gIHJldHVybiBlbC5ob3N0ICYmIGVsICE9PSBkb2N1bWVudCAmJiBlbC5ob3N0Lm5vZGVUeXBlID8gZWwuaG9zdCA6IGVsLnBhcmVudE5vZGU7XG59XG5cbmZ1bmN0aW9uIGNsb3Nlc3QoXG4vKipIVE1MRWxlbWVudCovXG5lbCxcbi8qKlN0cmluZyovXG5zZWxlY3Rvcixcbi8qKkhUTUxFbGVtZW50Ki9cbmN0eCwgaW5jbHVkZUNUWCkge1xuICBpZiAoZWwpIHtcbiAgICBjdHggPSBjdHggfHwgZG9jdW1lbnQ7XG5cbiAgICBkbyB7XG4gICAgICBpZiAoc2VsZWN0b3IgIT0gbnVsbCAmJiAoc2VsZWN0b3JbMF0gPT09ICc+JyA/IGVsLnBhcmVudE5vZGUgPT09IGN0eCAmJiBtYXRjaGVzKGVsLCBzZWxlY3RvcikgOiBtYXRjaGVzKGVsLCBzZWxlY3RvcikpIHx8IGluY2x1ZGVDVFggJiYgZWwgPT09IGN0eCkge1xuICAgICAgICByZXR1cm4gZWw7XG4gICAgICB9XG5cbiAgICAgIGlmIChlbCA9PT0gY3R4KSBicmVhaztcbiAgICAgIC8qIGpzaGludCBib3NzOnRydWUgKi9cbiAgICB9IHdoaWxlIChlbCA9IGdldFBhcmVudE9ySG9zdChlbCkpO1xuICB9XG5cbiAgcmV0dXJuIG51bGw7XG59XG5cbnZhciBSX1NQQUNFID0gL1xccysvZztcblxuZnVuY3Rpb24gdG9nZ2xlQ2xhc3MoZWwsIG5hbWUsIHN0YXRlKSB7XG4gIGlmIChlbCAmJiBuYW1lKSB7XG4gICAgaWYgKGVsLmNsYXNzTGlzdCkge1xuICAgICAgZWwuY2xhc3NMaXN0W3N0YXRlID8gJ2FkZCcgOiAncmVtb3ZlJ10obmFtZSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHZhciBjbGFzc05hbWUgPSAoJyAnICsgZWwuY2xhc3NOYW1lICsgJyAnKS5yZXBsYWNlKFJfU1BBQ0UsICcgJykucmVwbGFjZSgnICcgKyBuYW1lICsgJyAnLCAnICcpO1xuICAgICAgZWwuY2xhc3NOYW1lID0gKGNsYXNzTmFtZSArIChzdGF0ZSA/ICcgJyArIG5hbWUgOiAnJykpLnJlcGxhY2UoUl9TUEFDRSwgJyAnKTtcbiAgICB9XG4gIH1cbn1cblxuZnVuY3Rpb24gY3NzKGVsLCBwcm9wLCB2YWwpIHtcbiAgdmFyIHN0eWxlID0gZWwgJiYgZWwuc3R5bGU7XG5cbiAgaWYgKHN0eWxlKSB7XG4gICAgaWYgKHZhbCA9PT0gdm9pZCAwKSB7XG4gICAgICBpZiAoZG9jdW1lbnQuZGVmYXVsdFZpZXcgJiYgZG9jdW1lbnQuZGVmYXVsdFZpZXcuZ2V0Q29tcHV0ZWRTdHlsZSkge1xuICAgICAgICB2YWwgPSBkb2N1bWVudC5kZWZhdWx0Vmlldy5nZXRDb21wdXRlZFN0eWxlKGVsLCAnJyk7XG4gICAgICB9IGVsc2UgaWYgKGVsLmN1cnJlbnRTdHlsZSkge1xuICAgICAgICB2YWwgPSBlbC5jdXJyZW50U3R5bGU7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBwcm9wID09PSB2b2lkIDAgPyB2YWwgOiB2YWxbcHJvcF07XG4gICAgfSBlbHNlIHtcbiAgICAgIGlmICghKHByb3AgaW4gc3R5bGUpICYmIHByb3AuaW5kZXhPZignd2Via2l0JykgPT09IC0xKSB7XG4gICAgICAgIHByb3AgPSAnLXdlYmtpdC0nICsgcHJvcDtcbiAgICAgIH1cblxuICAgICAgc3R5bGVbcHJvcF0gPSB2YWwgKyAodHlwZW9mIHZhbCA9PT0gJ3N0cmluZycgPyAnJyA6ICdweCcpO1xuICAgIH1cbiAgfVxufVxuXG5mdW5jdGlvbiBtYXRyaXgoZWwsIHNlbGZPbmx5KSB7XG4gIHZhciBhcHBsaWVkVHJhbnNmb3JtcyA9ICcnO1xuXG4gIGlmICh0eXBlb2YgZWwgPT09ICdzdHJpbmcnKSB7XG4gICAgYXBwbGllZFRyYW5zZm9ybXMgPSBlbDtcbiAgfSBlbHNlIHtcbiAgICBkbyB7XG4gICAgICB2YXIgdHJhbnNmb3JtID0gY3NzKGVsLCAndHJhbnNmb3JtJyk7XG5cbiAgICAgIGlmICh0cmFuc2Zvcm0gJiYgdHJhbnNmb3JtICE9PSAnbm9uZScpIHtcbiAgICAgICAgYXBwbGllZFRyYW5zZm9ybXMgPSB0cmFuc2Zvcm0gKyAnICcgKyBhcHBsaWVkVHJhbnNmb3JtcztcbiAgICAgIH1cbiAgICAgIC8qIGpzaGludCBib3NzOnRydWUgKi9cblxuICAgIH0gd2hpbGUgKCFzZWxmT25seSAmJiAoZWwgPSBlbC5wYXJlbnROb2RlKSk7XG4gIH1cblxuICB2YXIgbWF0cml4Rm4gPSB3aW5kb3cuRE9NTWF0cml4IHx8IHdpbmRvdy5XZWJLaXRDU1NNYXRyaXggfHwgd2luZG93LkNTU01hdHJpeCB8fCB3aW5kb3cuTVNDU1NNYXRyaXg7XG4gIC8qanNoaW50IC1XMDU2ICovXG5cbiAgcmV0dXJuIG1hdHJpeEZuICYmIG5ldyBtYXRyaXhGbihhcHBsaWVkVHJhbnNmb3Jtcyk7XG59XG5cbmZ1bmN0aW9uIGZpbmQoY3R4LCB0YWdOYW1lLCBpdGVyYXRvcikge1xuICBpZiAoY3R4KSB7XG4gICAgdmFyIGxpc3QgPSBjdHguZ2V0RWxlbWVudHNCeVRhZ05hbWUodGFnTmFtZSksXG4gICAgICAgIGkgPSAwLFxuICAgICAgICBuID0gbGlzdC5sZW5ndGg7XG5cbiAgICBpZiAoaXRlcmF0b3IpIHtcbiAgICAgIGZvciAoOyBpIDwgbjsgaSsrKSB7XG4gICAgICAgIGl0ZXJhdG9yKGxpc3RbaV0sIGkpO1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBsaXN0O1xuICB9XG5cbiAgcmV0dXJuIFtdO1xufVxuXG5mdW5jdGlvbiBnZXRXaW5kb3dTY3JvbGxpbmdFbGVtZW50KCkge1xuICB2YXIgc2Nyb2xsaW5nRWxlbWVudCA9IGRvY3VtZW50LnNjcm9sbGluZ0VsZW1lbnQ7XG5cbiAgaWYgKHNjcm9sbGluZ0VsZW1lbnQpIHtcbiAgICByZXR1cm4gc2Nyb2xsaW5nRWxlbWVudDtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50O1xuICB9XG59XG4vKipcbiAqIFJldHVybnMgdGhlIFwiYm91bmRpbmcgY2xpZW50IHJlY3RcIiBvZiBnaXZlbiBlbGVtZW50XG4gKiBAcGFyYW0gIHtIVE1MRWxlbWVudH0gZWwgICAgICAgICAgICAgICAgICAgICAgIFRoZSBlbGVtZW50IHdob3NlIGJvdW5kaW5nQ2xpZW50UmVjdCBpcyB3YW50ZWRcbiAqIEBwYXJhbSAge1tCb29sZWFuXX0gcmVsYXRpdmVUb0NvbnRhaW5pbmdCbG9jayAgV2hldGhlciB0aGUgcmVjdCBzaG91bGQgYmUgcmVsYXRpdmUgdG8gdGhlIGNvbnRhaW5pbmcgYmxvY2sgb2YgKGluY2x1ZGluZykgdGhlIGNvbnRhaW5lclxuICogQHBhcmFtICB7W0Jvb2xlYW5dfSByZWxhdGl2ZVRvTm9uU3RhdGljUGFyZW50ICBXaGV0aGVyIHRoZSByZWN0IHNob3VsZCBiZSByZWxhdGl2ZSB0byB0aGUgcmVsYXRpdmUgcGFyZW50IG9mIChpbmNsdWRpbmcpIHRoZSBjb250YWllbnJcbiAqIEBwYXJhbSAge1tCb29sZWFuXX0gdW5kb1NjYWxlICAgICAgICAgICAgICAgICAgV2hldGhlciB0aGUgY29udGFpbmVyJ3Mgc2NhbGUoKSBzaG91bGQgYmUgdW5kb25lXG4gKiBAcGFyYW0gIHtbSFRNTEVsZW1lbnRdfSBjb250YWluZXIgICAgICAgICAgICAgIFRoZSBwYXJlbnQgdGhlIGVsZW1lbnQgd2lsbCBiZSBwbGFjZWQgaW5cbiAqIEByZXR1cm4ge09iamVjdH0gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgVGhlIGJvdW5kaW5nQ2xpZW50UmVjdCBvZiBlbCwgd2l0aCBzcGVjaWZpZWQgYWRqdXN0bWVudHNcbiAqL1xuXG5cbmZ1bmN0aW9uIGdldFJlY3QoZWwsIHJlbGF0aXZlVG9Db250YWluaW5nQmxvY2ssIHJlbGF0aXZlVG9Ob25TdGF0aWNQYXJlbnQsIHVuZG9TY2FsZSwgY29udGFpbmVyKSB7XG4gIGlmICghZWwuZ2V0Qm91bmRpbmdDbGllbnRSZWN0ICYmIGVsICE9PSB3aW5kb3cpIHJldHVybjtcbiAgdmFyIGVsUmVjdCwgdG9wLCBsZWZ0LCBib3R0b20sIHJpZ2h0LCBoZWlnaHQsIHdpZHRoO1xuXG4gIGlmIChlbCAhPT0gd2luZG93ICYmIGVsLnBhcmVudE5vZGUgJiYgZWwgIT09IGdldFdpbmRvd1Njcm9sbGluZ0VsZW1lbnQoKSkge1xuICAgIGVsUmVjdCA9IGVsLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO1xuICAgIHRvcCA9IGVsUmVjdC50b3A7XG4gICAgbGVmdCA9IGVsUmVjdC5sZWZ0O1xuICAgIGJvdHRvbSA9IGVsUmVjdC5ib3R0b207XG4gICAgcmlnaHQgPSBlbFJlY3QucmlnaHQ7XG4gICAgaGVpZ2h0ID0gZWxSZWN0LmhlaWdodDtcbiAgICB3aWR0aCA9IGVsUmVjdC53aWR0aDtcbiAgfSBlbHNlIHtcbiAgICB0b3AgPSAwO1xuICAgIGxlZnQgPSAwO1xuICAgIGJvdHRvbSA9IHdpbmRvdy5pbm5lckhlaWdodDtcbiAgICByaWdodCA9IHdpbmRvdy5pbm5lcldpZHRoO1xuICAgIGhlaWdodCA9IHdpbmRvdy5pbm5lckhlaWdodDtcbiAgICB3aWR0aCA9IHdpbmRvdy5pbm5lcldpZHRoO1xuICB9XG5cbiAgaWYgKChyZWxhdGl2ZVRvQ29udGFpbmluZ0Jsb2NrIHx8IHJlbGF0aXZlVG9Ob25TdGF0aWNQYXJlbnQpICYmIGVsICE9PSB3aW5kb3cpIHtcbiAgICAvLyBBZGp1c3QgZm9yIHRyYW5zbGF0ZSgpXG4gICAgY29udGFpbmVyID0gY29udGFpbmVyIHx8IGVsLnBhcmVudE5vZGU7IC8vIHNvbHZlcyAjMTEyMyAoc2VlOiBodHRwczovL3N0YWNrb3ZlcmZsb3cuY29tL2EvMzc5NTM4MDYvNjA4ODMxMilcbiAgICAvLyBOb3QgbmVlZGVkIG9uIDw9IElFMTFcblxuICAgIGlmICghSUUxMU9yTGVzcykge1xuICAgICAgZG8ge1xuICAgICAgICBpZiAoY29udGFpbmVyICYmIGNvbnRhaW5lci5nZXRCb3VuZGluZ0NsaWVudFJlY3QgJiYgKGNzcyhjb250YWluZXIsICd0cmFuc2Zvcm0nKSAhPT0gJ25vbmUnIHx8IHJlbGF0aXZlVG9Ob25TdGF0aWNQYXJlbnQgJiYgY3NzKGNvbnRhaW5lciwgJ3Bvc2l0aW9uJykgIT09ICdzdGF0aWMnKSkge1xuICAgICAgICAgIHZhciBjb250YWluZXJSZWN0ID0gY29udGFpbmVyLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpOyAvLyBTZXQgcmVsYXRpdmUgdG8gZWRnZXMgb2YgcGFkZGluZyBib3ggb2YgY29udGFpbmVyXG5cbiAgICAgICAgICB0b3AgLT0gY29udGFpbmVyUmVjdC50b3AgKyBwYXJzZUludChjc3MoY29udGFpbmVyLCAnYm9yZGVyLXRvcC13aWR0aCcpKTtcbiAgICAgICAgICBsZWZ0IC09IGNvbnRhaW5lclJlY3QubGVmdCArIHBhcnNlSW50KGNzcyhjb250YWluZXIsICdib3JkZXItbGVmdC13aWR0aCcpKTtcbiAgICAgICAgICBib3R0b20gPSB0b3AgKyBlbFJlY3QuaGVpZ2h0O1xuICAgICAgICAgIHJpZ2h0ID0gbGVmdCArIGVsUmVjdC53aWR0aDtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgICAvKiBqc2hpbnQgYm9zczp0cnVlICovXG5cbiAgICAgIH0gd2hpbGUgKGNvbnRhaW5lciA9IGNvbnRhaW5lci5wYXJlbnROb2RlKTtcbiAgICB9XG4gIH1cblxuICBpZiAodW5kb1NjYWxlICYmIGVsICE9PSB3aW5kb3cpIHtcbiAgICAvLyBBZGp1c3QgZm9yIHNjYWxlKClcbiAgICB2YXIgZWxNYXRyaXggPSBtYXRyaXgoY29udGFpbmVyIHx8IGVsKSxcbiAgICAgICAgc2NhbGVYID0gZWxNYXRyaXggJiYgZWxNYXRyaXguYSxcbiAgICAgICAgc2NhbGVZID0gZWxNYXRyaXggJiYgZWxNYXRyaXguZDtcblxuICAgIGlmIChlbE1hdHJpeCkge1xuICAgICAgdG9wIC89IHNjYWxlWTtcbiAgICAgIGxlZnQgLz0gc2NhbGVYO1xuICAgICAgd2lkdGggLz0gc2NhbGVYO1xuICAgICAgaGVpZ2h0IC89IHNjYWxlWTtcbiAgICAgIGJvdHRvbSA9IHRvcCArIGhlaWdodDtcbiAgICAgIHJpZ2h0ID0gbGVmdCArIHdpZHRoO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiB7XG4gICAgdG9wOiB0b3AsXG4gICAgbGVmdDogbGVmdCxcbiAgICBib3R0b206IGJvdHRvbSxcbiAgICByaWdodDogcmlnaHQsXG4gICAgd2lkdGg6IHdpZHRoLFxuICAgIGhlaWdodDogaGVpZ2h0XG4gIH07XG59XG4vKipcbiAqIENoZWNrcyBpZiBhIHNpZGUgb2YgYW4gZWxlbWVudCBpcyBzY3JvbGxlZCBwYXN0IGEgc2lkZSBvZiBpdHMgcGFyZW50c1xuICogQHBhcmFtICB7SFRNTEVsZW1lbnR9ICBlbCAgICAgICAgICAgVGhlIGVsZW1lbnQgd2hvJ3Mgc2lkZSBiZWluZyBzY3JvbGxlZCBvdXQgb2YgdmlldyBpcyBpbiBxdWVzdGlvblxuICogQHBhcmFtICB7U3RyaW5nfSAgICAgICBlbFNpZGUgICAgICAgU2lkZSBvZiB0aGUgZWxlbWVudCBpbiBxdWVzdGlvbiAoJ3RvcCcsICdsZWZ0JywgJ3JpZ2h0JywgJ2JvdHRvbScpXG4gKiBAcGFyYW0gIHtTdHJpbmd9ICAgICAgIHBhcmVudFNpZGUgICBTaWRlIG9mIHRoZSBwYXJlbnQgaW4gcXVlc3Rpb24gKCd0b3AnLCAnbGVmdCcsICdyaWdodCcsICdib3R0b20nKVxuICogQHJldHVybiB7SFRNTEVsZW1lbnR9ICAgICAgICAgICAgICAgVGhlIHBhcmVudCBzY3JvbGwgZWxlbWVudCB0aGF0IHRoZSBlbCdzIHNpZGUgaXMgc2Nyb2xsZWQgcGFzdCwgb3IgbnVsbCBpZiB0aGVyZSBpcyBubyBzdWNoIGVsZW1lbnRcbiAqL1xuXG5cbmZ1bmN0aW9uIGlzU2Nyb2xsZWRQYXN0KGVsLCBlbFNpZGUsIHBhcmVudFNpZGUpIHtcbiAgdmFyIHBhcmVudCA9IGdldFBhcmVudEF1dG9TY3JvbGxFbGVtZW50KGVsLCB0cnVlKSxcbiAgICAgIGVsU2lkZVZhbCA9IGdldFJlY3QoZWwpW2VsU2lkZV07XG4gIC8qIGpzaGludCBib3NzOnRydWUgKi9cblxuICB3aGlsZSAocGFyZW50KSB7XG4gICAgdmFyIHBhcmVudFNpZGVWYWwgPSBnZXRSZWN0KHBhcmVudClbcGFyZW50U2lkZV0sXG4gICAgICAgIHZpc2libGUgPSB2b2lkIDA7XG5cbiAgICBpZiAocGFyZW50U2lkZSA9PT0gJ3RvcCcgfHwgcGFyZW50U2lkZSA9PT0gJ2xlZnQnKSB7XG4gICAgICB2aXNpYmxlID0gZWxTaWRlVmFsID49IHBhcmVudFNpZGVWYWw7XG4gICAgfSBlbHNlIHtcbiAgICAgIHZpc2libGUgPSBlbFNpZGVWYWwgPD0gcGFyZW50U2lkZVZhbDtcbiAgICB9XG5cbiAgICBpZiAoIXZpc2libGUpIHJldHVybiBwYXJlbnQ7XG4gICAgaWYgKHBhcmVudCA9PT0gZ2V0V2luZG93U2Nyb2xsaW5nRWxlbWVudCgpKSBicmVhaztcbiAgICBwYXJlbnQgPSBnZXRQYXJlbnRBdXRvU2Nyb2xsRWxlbWVudChwYXJlbnQsIGZhbHNlKTtcbiAgfVxuXG4gIHJldHVybiBmYWxzZTtcbn1cbi8qKlxuICogR2V0cyBudGggY2hpbGQgb2YgZWwsIGlnbm9yaW5nIGhpZGRlbiBjaGlsZHJlbiwgc29ydGFibGUncyBlbGVtZW50cyAoZG9lcyBub3QgaWdub3JlIGNsb25lIGlmIGl0J3MgdmlzaWJsZSlcbiAqIGFuZCBub24tZHJhZ2dhYmxlIGVsZW1lbnRzXG4gKiBAcGFyYW0gIHtIVE1MRWxlbWVudH0gZWwgICAgICAgVGhlIHBhcmVudCBlbGVtZW50XG4gKiBAcGFyYW0gIHtOdW1iZXJ9IGNoaWxkTnVtICAgICAgVGhlIGluZGV4IG9mIHRoZSBjaGlsZFxuICogQHBhcmFtICB7T2JqZWN0fSBvcHRpb25zICAgICAgIFBhcmVudCBTb3J0YWJsZSdzIG9wdGlvbnNcbiAqIEByZXR1cm4ge0hUTUxFbGVtZW50fSAgICAgICAgICBUaGUgY2hpbGQgYXQgaW5kZXggY2hpbGROdW0sIG9yIG51bGwgaWYgbm90IGZvdW5kXG4gKi9cblxuXG5mdW5jdGlvbiBnZXRDaGlsZChlbCwgY2hpbGROdW0sIG9wdGlvbnMsIGluY2x1ZGVEcmFnRWwpIHtcbiAgdmFyIGN1cnJlbnRDaGlsZCA9IDAsXG4gICAgICBpID0gMCxcbiAgICAgIGNoaWxkcmVuID0gZWwuY2hpbGRyZW47XG5cbiAgd2hpbGUgKGkgPCBjaGlsZHJlbi5sZW5ndGgpIHtcbiAgICBpZiAoY2hpbGRyZW5baV0uc3R5bGUuZGlzcGxheSAhPT0gJ25vbmUnICYmIGNoaWxkcmVuW2ldICE9PSBTb3J0YWJsZS5naG9zdCAmJiAoaW5jbHVkZURyYWdFbCB8fCBjaGlsZHJlbltpXSAhPT0gU29ydGFibGUuZHJhZ2dlZCkgJiYgY2xvc2VzdChjaGlsZHJlbltpXSwgb3B0aW9ucy5kcmFnZ2FibGUsIGVsLCBmYWxzZSkpIHtcbiAgICAgIGlmIChjdXJyZW50Q2hpbGQgPT09IGNoaWxkTnVtKSB7XG4gICAgICAgIHJldHVybiBjaGlsZHJlbltpXTtcbiAgICAgIH1cblxuICAgICAgY3VycmVudENoaWxkKys7XG4gICAgfVxuXG4gICAgaSsrO1xuICB9XG5cbiAgcmV0dXJuIG51bGw7XG59XG4vKipcbiAqIEdldHMgdGhlIGxhc3QgY2hpbGQgaW4gdGhlIGVsLCBpZ25vcmluZyBnaG9zdEVsIG9yIGludmlzaWJsZSBlbGVtZW50cyAoY2xvbmVzKVxuICogQHBhcmFtICB7SFRNTEVsZW1lbnR9IGVsICAgICAgIFBhcmVudCBlbGVtZW50XG4gKiBAcGFyYW0gIHtzZWxlY3Rvcn0gc2VsZWN0b3IgICAgQW55IG90aGVyIGVsZW1lbnRzIHRoYXQgc2hvdWxkIGJlIGlnbm9yZWRcbiAqIEByZXR1cm4ge0hUTUxFbGVtZW50fSAgICAgICAgICBUaGUgbGFzdCBjaGlsZCwgaWdub3JpbmcgZ2hvc3RFbFxuICovXG5cblxuZnVuY3Rpb24gbGFzdENoaWxkKGVsLCBzZWxlY3Rvcikge1xuICB2YXIgbGFzdCA9IGVsLmxhc3RFbGVtZW50Q2hpbGQ7XG5cbiAgd2hpbGUgKGxhc3QgJiYgKGxhc3QgPT09IFNvcnRhYmxlLmdob3N0IHx8IGNzcyhsYXN0LCAnZGlzcGxheScpID09PSAnbm9uZScgfHwgc2VsZWN0b3IgJiYgIW1hdGNoZXMobGFzdCwgc2VsZWN0b3IpKSkge1xuICAgIGxhc3QgPSBsYXN0LnByZXZpb3VzRWxlbWVudFNpYmxpbmc7XG4gIH1cblxuICByZXR1cm4gbGFzdCB8fCBudWxsO1xufVxuLyoqXG4gKiBSZXR1cm5zIHRoZSBpbmRleCBvZiBhbiBlbGVtZW50IHdpdGhpbiBpdHMgcGFyZW50IGZvciBhIHNlbGVjdGVkIHNldCBvZlxuICogZWxlbWVudHNcbiAqIEBwYXJhbSAge0hUTUxFbGVtZW50fSBlbFxuICogQHBhcmFtICB7c2VsZWN0b3J9IHNlbGVjdG9yXG4gKiBAcmV0dXJuIHtudW1iZXJ9XG4gKi9cblxuXG5mdW5jdGlvbiBpbmRleChlbCwgc2VsZWN0b3IpIHtcbiAgdmFyIGluZGV4ID0gMDtcblxuICBpZiAoIWVsIHx8ICFlbC5wYXJlbnROb2RlKSB7XG4gICAgcmV0dXJuIC0xO1xuICB9XG4gIC8qIGpzaGludCBib3NzOnRydWUgKi9cblxuXG4gIHdoaWxlIChlbCA9IGVsLnByZXZpb3VzRWxlbWVudFNpYmxpbmcpIHtcbiAgICBpZiAoZWwubm9kZU5hbWUudG9VcHBlckNhc2UoKSAhPT0gJ1RFTVBMQVRFJyAmJiBlbCAhPT0gU29ydGFibGUuY2xvbmUgJiYgKCFzZWxlY3RvciB8fCBtYXRjaGVzKGVsLCBzZWxlY3RvcikpKSB7XG4gICAgICBpbmRleCsrO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBpbmRleDtcbn1cbi8qKlxuICogUmV0dXJucyB0aGUgc2Nyb2xsIG9mZnNldCBvZiB0aGUgZ2l2ZW4gZWxlbWVudCwgYWRkZWQgd2l0aCBhbGwgdGhlIHNjcm9sbCBvZmZzZXRzIG9mIHBhcmVudCBlbGVtZW50cy5cbiAqIFRoZSB2YWx1ZSBpcyByZXR1cm5lZCBpbiByZWFsIHBpeGVscy5cbiAqIEBwYXJhbSAge0hUTUxFbGVtZW50fSBlbFxuICogQHJldHVybiB7QXJyYXl9ICAgICAgICAgICAgIE9mZnNldHMgaW4gdGhlIGZvcm1hdCBvZiBbbGVmdCwgdG9wXVxuICovXG5cblxuZnVuY3Rpb24gZ2V0UmVsYXRpdmVTY3JvbGxPZmZzZXQoZWwpIHtcbiAgdmFyIG9mZnNldExlZnQgPSAwLFxuICAgICAgb2Zmc2V0VG9wID0gMCxcbiAgICAgIHdpblNjcm9sbGVyID0gZ2V0V2luZG93U2Nyb2xsaW5nRWxlbWVudCgpO1xuXG4gIGlmIChlbCkge1xuICAgIGRvIHtcbiAgICAgIHZhciBlbE1hdHJpeCA9IG1hdHJpeChlbCksXG4gICAgICAgICAgc2NhbGVYID0gZWxNYXRyaXguYSxcbiAgICAgICAgICBzY2FsZVkgPSBlbE1hdHJpeC5kO1xuICAgICAgb2Zmc2V0TGVmdCArPSBlbC5zY3JvbGxMZWZ0ICogc2NhbGVYO1xuICAgICAgb2Zmc2V0VG9wICs9IGVsLnNjcm9sbFRvcCAqIHNjYWxlWTtcbiAgICB9IHdoaWxlIChlbCAhPT0gd2luU2Nyb2xsZXIgJiYgKGVsID0gZWwucGFyZW50Tm9kZSkpO1xuICB9XG5cbiAgcmV0dXJuIFtvZmZzZXRMZWZ0LCBvZmZzZXRUb3BdO1xufVxuLyoqXG4gKiBSZXR1cm5zIHRoZSBpbmRleCBvZiB0aGUgb2JqZWN0IHdpdGhpbiB0aGUgZ2l2ZW4gYXJyYXlcbiAqIEBwYXJhbSAge0FycmF5fSBhcnIgICBBcnJheSB0aGF0IG1heSBvciBtYXkgbm90IGhvbGQgdGhlIG9iamVjdFxuICogQHBhcmFtICB7T2JqZWN0fSBvYmogIEFuIG9iamVjdCB0aGF0IGhhcyBhIGtleS12YWx1ZSBwYWlyIHVuaXF1ZSB0byBhbmQgaWRlbnRpY2FsIHRvIGEga2V5LXZhbHVlIHBhaXIgaW4gdGhlIG9iamVjdCB5b3Ugd2FudCB0byBmaW5kXG4gKiBAcmV0dXJuIHtOdW1iZXJ9ICAgICAgVGhlIGluZGV4IG9mIHRoZSBvYmplY3QgaW4gdGhlIGFycmF5LCBvciAtMVxuICovXG5cblxuZnVuY3Rpb24gaW5kZXhPZk9iamVjdChhcnIsIG9iaikge1xuICBmb3IgKHZhciBpIGluIGFycikge1xuICAgIGlmICghYXJyLmhhc093blByb3BlcnR5KGkpKSBjb250aW51ZTtcblxuICAgIGZvciAodmFyIGtleSBpbiBvYmopIHtcbiAgICAgIGlmIChvYmouaGFzT3duUHJvcGVydHkoa2V5KSAmJiBvYmpba2V5XSA9PT0gYXJyW2ldW2tleV0pIHJldHVybiBOdW1iZXIoaSk7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIC0xO1xufVxuXG5mdW5jdGlvbiBnZXRQYXJlbnRBdXRvU2Nyb2xsRWxlbWVudChlbCwgaW5jbHVkZVNlbGYpIHtcbiAgLy8gc2tpcCB0byB3aW5kb3dcbiAgaWYgKCFlbCB8fCAhZWwuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KSByZXR1cm4gZ2V0V2luZG93U2Nyb2xsaW5nRWxlbWVudCgpO1xuICB2YXIgZWxlbSA9IGVsO1xuICB2YXIgZ290U2VsZiA9IGZhbHNlO1xuXG4gIGRvIHtcbiAgICAvLyB3ZSBkb24ndCBuZWVkIHRvIGdldCBlbGVtIGNzcyBpZiBpdCBpc24ndCBldmVuIG92ZXJmbG93aW5nIGluIHRoZSBmaXJzdCBwbGFjZSAocGVyZm9ybWFuY2UpXG4gICAgaWYgKGVsZW0uY2xpZW50V2lkdGggPCBlbGVtLnNjcm9sbFdpZHRoIHx8IGVsZW0uY2xpZW50SGVpZ2h0IDwgZWxlbS5zY3JvbGxIZWlnaHQpIHtcbiAgICAgIHZhciBlbGVtQ1NTID0gY3NzKGVsZW0pO1xuXG4gICAgICBpZiAoZWxlbS5jbGllbnRXaWR0aCA8IGVsZW0uc2Nyb2xsV2lkdGggJiYgKGVsZW1DU1Mub3ZlcmZsb3dYID09ICdhdXRvJyB8fCBlbGVtQ1NTLm92ZXJmbG93WCA9PSAnc2Nyb2xsJykgfHwgZWxlbS5jbGllbnRIZWlnaHQgPCBlbGVtLnNjcm9sbEhlaWdodCAmJiAoZWxlbUNTUy5vdmVyZmxvd1kgPT0gJ2F1dG8nIHx8IGVsZW1DU1Mub3ZlcmZsb3dZID09ICdzY3JvbGwnKSkge1xuICAgICAgICBpZiAoIWVsZW0uZ2V0Qm91bmRpbmdDbGllbnRSZWN0IHx8IGVsZW0gPT09IGRvY3VtZW50LmJvZHkpIHJldHVybiBnZXRXaW5kb3dTY3JvbGxpbmdFbGVtZW50KCk7XG4gICAgICAgIGlmIChnb3RTZWxmIHx8IGluY2x1ZGVTZWxmKSByZXR1cm4gZWxlbTtcbiAgICAgICAgZ290U2VsZiA9IHRydWU7XG4gICAgICB9XG4gICAgfVxuICAgIC8qIGpzaGludCBib3NzOnRydWUgKi9cblxuICB9IHdoaWxlIChlbGVtID0gZWxlbS5wYXJlbnROb2RlKTtcblxuICByZXR1cm4gZ2V0V2luZG93U2Nyb2xsaW5nRWxlbWVudCgpO1xufVxuXG5mdW5jdGlvbiBleHRlbmQoZHN0LCBzcmMpIHtcbiAgaWYgKGRzdCAmJiBzcmMpIHtcbiAgICBmb3IgKHZhciBrZXkgaW4gc3JjKSB7XG4gICAgICBpZiAoc3JjLmhhc093blByb3BlcnR5KGtleSkpIHtcbiAgICAgICAgZHN0W2tleV0gPSBzcmNba2V5XTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICByZXR1cm4gZHN0O1xufVxuXG5mdW5jdGlvbiBpc1JlY3RFcXVhbChyZWN0MSwgcmVjdDIpIHtcbiAgcmV0dXJuIE1hdGgucm91bmQocmVjdDEudG9wKSA9PT0gTWF0aC5yb3VuZChyZWN0Mi50b3ApICYmIE1hdGgucm91bmQocmVjdDEubGVmdCkgPT09IE1hdGgucm91bmQocmVjdDIubGVmdCkgJiYgTWF0aC5yb3VuZChyZWN0MS5oZWlnaHQpID09PSBNYXRoLnJvdW5kKHJlY3QyLmhlaWdodCkgJiYgTWF0aC5yb3VuZChyZWN0MS53aWR0aCkgPT09IE1hdGgucm91bmQocmVjdDIud2lkdGgpO1xufVxuXG52YXIgX3Rocm90dGxlVGltZW91dDtcblxuZnVuY3Rpb24gdGhyb3R0bGUoY2FsbGJhY2ssIG1zKSB7XG4gIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgaWYgKCFfdGhyb3R0bGVUaW1lb3V0KSB7XG4gICAgICB2YXIgYXJncyA9IGFyZ3VtZW50cyxcbiAgICAgICAgICBfdGhpcyA9IHRoaXM7XG5cbiAgICAgIGlmIChhcmdzLmxlbmd0aCA9PT0gMSkge1xuICAgICAgICBjYWxsYmFjay5jYWxsKF90aGlzLCBhcmdzWzBdKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGNhbGxiYWNrLmFwcGx5KF90aGlzLCBhcmdzKTtcbiAgICAgIH1cblxuICAgICAgX3Rocm90dGxlVGltZW91dCA9IHNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xuICAgICAgICBfdGhyb3R0bGVUaW1lb3V0ID0gdm9pZCAwO1xuICAgICAgfSwgbXMpO1xuICAgIH1cbiAgfTtcbn1cblxuZnVuY3Rpb24gY2FuY2VsVGhyb3R0bGUoKSB7XG4gIGNsZWFyVGltZW91dChfdGhyb3R0bGVUaW1lb3V0KTtcbiAgX3Rocm90dGxlVGltZW91dCA9IHZvaWQgMDtcbn1cblxuZnVuY3Rpb24gc2Nyb2xsQnkoZWwsIHgsIHkpIHtcbiAgZWwuc2Nyb2xsTGVmdCArPSB4O1xuICBlbC5zY3JvbGxUb3AgKz0geTtcbn1cblxuZnVuY3Rpb24gY2xvbmUoZWwpIHtcbiAgdmFyIFBvbHltZXIgPSB3aW5kb3cuUG9seW1lcjtcbiAgdmFyICQgPSB3aW5kb3cualF1ZXJ5IHx8IHdpbmRvdy5aZXB0bztcblxuICBpZiAoUG9seW1lciAmJiBQb2x5bWVyLmRvbSkge1xuICAgIHJldHVybiBQb2x5bWVyLmRvbShlbCkuY2xvbmVOb2RlKHRydWUpO1xuICB9IGVsc2UgaWYgKCQpIHtcbiAgICByZXR1cm4gJChlbCkuY2xvbmUodHJ1ZSlbMF07XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIGVsLmNsb25lTm9kZSh0cnVlKTtcbiAgfVxufVxuXG5mdW5jdGlvbiBzZXRSZWN0KGVsLCByZWN0KSB7XG4gIGNzcyhlbCwgJ3Bvc2l0aW9uJywgJ2Fic29sdXRlJyk7XG4gIGNzcyhlbCwgJ3RvcCcsIHJlY3QudG9wKTtcbiAgY3NzKGVsLCAnbGVmdCcsIHJlY3QubGVmdCk7XG4gIGNzcyhlbCwgJ3dpZHRoJywgcmVjdC53aWR0aCk7XG4gIGNzcyhlbCwgJ2hlaWdodCcsIHJlY3QuaGVpZ2h0KTtcbn1cblxuZnVuY3Rpb24gdW5zZXRSZWN0KGVsKSB7XG4gIGNzcyhlbCwgJ3Bvc2l0aW9uJywgJycpO1xuICBjc3MoZWwsICd0b3AnLCAnJyk7XG4gIGNzcyhlbCwgJ2xlZnQnLCAnJyk7XG4gIGNzcyhlbCwgJ3dpZHRoJywgJycpO1xuICBjc3MoZWwsICdoZWlnaHQnLCAnJyk7XG59XG5cbnZhciBleHBhbmRvID0gJ1NvcnRhYmxlJyArIG5ldyBEYXRlKCkuZ2V0VGltZSgpO1xuXG5mdW5jdGlvbiBBbmltYXRpb25TdGF0ZU1hbmFnZXIoKSB7XG4gIHZhciBhbmltYXRpb25TdGF0ZXMgPSBbXSxcbiAgICAgIGFuaW1hdGlvbkNhbGxiYWNrSWQ7XG4gIHJldHVybiB7XG4gICAgY2FwdHVyZUFuaW1hdGlvblN0YXRlOiBmdW5jdGlvbiBjYXB0dXJlQW5pbWF0aW9uU3RhdGUoKSB7XG4gICAgICBhbmltYXRpb25TdGF0ZXMgPSBbXTtcbiAgICAgIGlmICghdGhpcy5vcHRpb25zLmFuaW1hdGlvbikgcmV0dXJuO1xuICAgICAgdmFyIGNoaWxkcmVuID0gW10uc2xpY2UuY2FsbCh0aGlzLmVsLmNoaWxkcmVuKTtcbiAgICAgIGNoaWxkcmVuLmZvckVhY2goZnVuY3Rpb24gKGNoaWxkKSB7XG4gICAgICAgIGlmIChjc3MoY2hpbGQsICdkaXNwbGF5JykgPT09ICdub25lJyB8fCBjaGlsZCA9PT0gU29ydGFibGUuZ2hvc3QpIHJldHVybjtcbiAgICAgICAgYW5pbWF0aW9uU3RhdGVzLnB1c2goe1xuICAgICAgICAgIHRhcmdldDogY2hpbGQsXG4gICAgICAgICAgcmVjdDogZ2V0UmVjdChjaGlsZClcbiAgICAgICAgfSk7XG5cbiAgICAgICAgdmFyIGZyb21SZWN0ID0gX29iamVjdFNwcmVhZDIoe30sIGFuaW1hdGlvblN0YXRlc1thbmltYXRpb25TdGF0ZXMubGVuZ3RoIC0gMV0ucmVjdCk7IC8vIElmIGFuaW1hdGluZzogY29tcGVuc2F0ZSBmb3IgY3VycmVudCBhbmltYXRpb25cblxuXG4gICAgICAgIGlmIChjaGlsZC50aGlzQW5pbWF0aW9uRHVyYXRpb24pIHtcbiAgICAgICAgICB2YXIgY2hpbGRNYXRyaXggPSBtYXRyaXgoY2hpbGQsIHRydWUpO1xuXG4gICAgICAgICAgaWYgKGNoaWxkTWF0cml4KSB7XG4gICAgICAgICAgICBmcm9tUmVjdC50b3AgLT0gY2hpbGRNYXRyaXguZjtcbiAgICAgICAgICAgIGZyb21SZWN0LmxlZnQgLT0gY2hpbGRNYXRyaXguZTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBjaGlsZC5mcm9tUmVjdCA9IGZyb21SZWN0O1xuICAgICAgfSk7XG4gICAgfSxcbiAgICBhZGRBbmltYXRpb25TdGF0ZTogZnVuY3Rpb24gYWRkQW5pbWF0aW9uU3RhdGUoc3RhdGUpIHtcbiAgICAgIGFuaW1hdGlvblN0YXRlcy5wdXNoKHN0YXRlKTtcbiAgICB9LFxuICAgIHJlbW92ZUFuaW1hdGlvblN0YXRlOiBmdW5jdGlvbiByZW1vdmVBbmltYXRpb25TdGF0ZSh0YXJnZXQpIHtcbiAgICAgIGFuaW1hdGlvblN0YXRlcy5zcGxpY2UoaW5kZXhPZk9iamVjdChhbmltYXRpb25TdGF0ZXMsIHtcbiAgICAgICAgdGFyZ2V0OiB0YXJnZXRcbiAgICAgIH0pLCAxKTtcbiAgICB9LFxuICAgIGFuaW1hdGVBbGw6IGZ1bmN0aW9uIGFuaW1hdGVBbGwoY2FsbGJhY2spIHtcbiAgICAgIHZhciBfdGhpcyA9IHRoaXM7XG5cbiAgICAgIGlmICghdGhpcy5vcHRpb25zLmFuaW1hdGlvbikge1xuICAgICAgICBjbGVhclRpbWVvdXQoYW5pbWF0aW9uQ2FsbGJhY2tJZCk7XG4gICAgICAgIGlmICh0eXBlb2YgY2FsbGJhY2sgPT09ICdmdW5jdGlvbicpIGNhbGxiYWNrKCk7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgdmFyIGFuaW1hdGluZyA9IGZhbHNlLFxuICAgICAgICAgIGFuaW1hdGlvblRpbWUgPSAwO1xuICAgICAgYW5pbWF0aW9uU3RhdGVzLmZvckVhY2goZnVuY3Rpb24gKHN0YXRlKSB7XG4gICAgICAgIHZhciB0aW1lID0gMCxcbiAgICAgICAgICAgIHRhcmdldCA9IHN0YXRlLnRhcmdldCxcbiAgICAgICAgICAgIGZyb21SZWN0ID0gdGFyZ2V0LmZyb21SZWN0LFxuICAgICAgICAgICAgdG9SZWN0ID0gZ2V0UmVjdCh0YXJnZXQpLFxuICAgICAgICAgICAgcHJldkZyb21SZWN0ID0gdGFyZ2V0LnByZXZGcm9tUmVjdCxcbiAgICAgICAgICAgIHByZXZUb1JlY3QgPSB0YXJnZXQucHJldlRvUmVjdCxcbiAgICAgICAgICAgIGFuaW1hdGluZ1JlY3QgPSBzdGF0ZS5yZWN0LFxuICAgICAgICAgICAgdGFyZ2V0TWF0cml4ID0gbWF0cml4KHRhcmdldCwgdHJ1ZSk7XG5cbiAgICAgICAgaWYgKHRhcmdldE1hdHJpeCkge1xuICAgICAgICAgIC8vIENvbXBlbnNhdGUgZm9yIGN1cnJlbnQgYW5pbWF0aW9uXG4gICAgICAgICAgdG9SZWN0LnRvcCAtPSB0YXJnZXRNYXRyaXguZjtcbiAgICAgICAgICB0b1JlY3QubGVmdCAtPSB0YXJnZXRNYXRyaXguZTtcbiAgICAgICAgfVxuXG4gICAgICAgIHRhcmdldC50b1JlY3QgPSB0b1JlY3Q7XG5cbiAgICAgICAgaWYgKHRhcmdldC50aGlzQW5pbWF0aW9uRHVyYXRpb24pIHtcbiAgICAgICAgICAvLyBDb3VsZCBhbHNvIGNoZWNrIGlmIGFuaW1hdGluZ1JlY3QgaXMgYmV0d2VlbiBmcm9tUmVjdCBhbmQgdG9SZWN0XG4gICAgICAgICAgaWYgKGlzUmVjdEVxdWFsKHByZXZGcm9tUmVjdCwgdG9SZWN0KSAmJiAhaXNSZWN0RXF1YWwoZnJvbVJlY3QsIHRvUmVjdCkgJiYgLy8gTWFrZSBzdXJlIGFuaW1hdGluZ1JlY3QgaXMgb24gbGluZSBiZXR3ZWVuIHRvUmVjdCAmIGZyb21SZWN0XG4gICAgICAgICAgKGFuaW1hdGluZ1JlY3QudG9wIC0gdG9SZWN0LnRvcCkgLyAoYW5pbWF0aW5nUmVjdC5sZWZ0IC0gdG9SZWN0LmxlZnQpID09PSAoZnJvbVJlY3QudG9wIC0gdG9SZWN0LnRvcCkgLyAoZnJvbVJlY3QubGVmdCAtIHRvUmVjdC5sZWZ0KSkge1xuICAgICAgICAgICAgLy8gSWYgcmV0dXJuaW5nIHRvIHNhbWUgcGxhY2UgYXMgc3RhcnRlZCBmcm9tIGFuaW1hdGlvbiBhbmQgb24gc2FtZSBheGlzXG4gICAgICAgICAgICB0aW1lID0gY2FsY3VsYXRlUmVhbFRpbWUoYW5pbWF0aW5nUmVjdCwgcHJldkZyb21SZWN0LCBwcmV2VG9SZWN0LCBfdGhpcy5vcHRpb25zKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0gLy8gaWYgZnJvbVJlY3QgIT0gdG9SZWN0OiBhbmltYXRlXG5cblxuICAgICAgICBpZiAoIWlzUmVjdEVxdWFsKHRvUmVjdCwgZnJvbVJlY3QpKSB7XG4gICAgICAgICAgdGFyZ2V0LnByZXZGcm9tUmVjdCA9IGZyb21SZWN0O1xuICAgICAgICAgIHRhcmdldC5wcmV2VG9SZWN0ID0gdG9SZWN0O1xuXG4gICAgICAgICAgaWYgKCF0aW1lKSB7XG4gICAgICAgICAgICB0aW1lID0gX3RoaXMub3B0aW9ucy5hbmltYXRpb247XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgX3RoaXMuYW5pbWF0ZSh0YXJnZXQsIGFuaW1hdGluZ1JlY3QsIHRvUmVjdCwgdGltZSk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAodGltZSkge1xuICAgICAgICAgIGFuaW1hdGluZyA9IHRydWU7XG4gICAgICAgICAgYW5pbWF0aW9uVGltZSA9IE1hdGgubWF4KGFuaW1hdGlvblRpbWUsIHRpbWUpO1xuICAgICAgICAgIGNsZWFyVGltZW91dCh0YXJnZXQuYW5pbWF0aW9uUmVzZXRUaW1lcik7XG4gICAgICAgICAgdGFyZ2V0LmFuaW1hdGlvblJlc2V0VGltZXIgPSBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHRhcmdldC5hbmltYXRpb25UaW1lID0gMDtcbiAgICAgICAgICAgIHRhcmdldC5wcmV2RnJvbVJlY3QgPSBudWxsO1xuICAgICAgICAgICAgdGFyZ2V0LmZyb21SZWN0ID0gbnVsbDtcbiAgICAgICAgICAgIHRhcmdldC5wcmV2VG9SZWN0ID0gbnVsbDtcbiAgICAgICAgICAgIHRhcmdldC50aGlzQW5pbWF0aW9uRHVyYXRpb24gPSBudWxsO1xuICAgICAgICAgIH0sIHRpbWUpO1xuICAgICAgICAgIHRhcmdldC50aGlzQW5pbWF0aW9uRHVyYXRpb24gPSB0aW1lO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICAgIGNsZWFyVGltZW91dChhbmltYXRpb25DYWxsYmFja0lkKTtcblxuICAgICAgaWYgKCFhbmltYXRpbmcpIHtcbiAgICAgICAgaWYgKHR5cGVvZiBjYWxsYmFjayA9PT0gJ2Z1bmN0aW9uJykgY2FsbGJhY2soKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGFuaW1hdGlvbkNhbGxiYWNrSWQgPSBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICBpZiAodHlwZW9mIGNhbGxiYWNrID09PSAnZnVuY3Rpb24nKSBjYWxsYmFjaygpO1xuICAgICAgICB9LCBhbmltYXRpb25UaW1lKTtcbiAgICAgIH1cblxuICAgICAgYW5pbWF0aW9uU3RhdGVzID0gW107XG4gICAgfSxcbiAgICBhbmltYXRlOiBmdW5jdGlvbiBhbmltYXRlKHRhcmdldCwgY3VycmVudFJlY3QsIHRvUmVjdCwgZHVyYXRpb24pIHtcbiAgICAgIGlmIChkdXJhdGlvbikge1xuICAgICAgICBjc3ModGFyZ2V0LCAndHJhbnNpdGlvbicsICcnKTtcbiAgICAgICAgY3NzKHRhcmdldCwgJ3RyYW5zZm9ybScsICcnKTtcbiAgICAgICAgdmFyIGVsTWF0cml4ID0gbWF0cml4KHRoaXMuZWwpLFxuICAgICAgICAgICAgc2NhbGVYID0gZWxNYXRyaXggJiYgZWxNYXRyaXguYSxcbiAgICAgICAgICAgIHNjYWxlWSA9IGVsTWF0cml4ICYmIGVsTWF0cml4LmQsXG4gICAgICAgICAgICB0cmFuc2xhdGVYID0gKGN1cnJlbnRSZWN0LmxlZnQgLSB0b1JlY3QubGVmdCkgLyAoc2NhbGVYIHx8IDEpLFxuICAgICAgICAgICAgdHJhbnNsYXRlWSA9IChjdXJyZW50UmVjdC50b3AgLSB0b1JlY3QudG9wKSAvIChzY2FsZVkgfHwgMSk7XG4gICAgICAgIHRhcmdldC5hbmltYXRpbmdYID0gISF0cmFuc2xhdGVYO1xuICAgICAgICB0YXJnZXQuYW5pbWF0aW5nWSA9ICEhdHJhbnNsYXRlWTtcbiAgICAgICAgY3NzKHRhcmdldCwgJ3RyYW5zZm9ybScsICd0cmFuc2xhdGUzZCgnICsgdHJhbnNsYXRlWCArICdweCwnICsgdHJhbnNsYXRlWSArICdweCwwKScpO1xuICAgICAgICB0aGlzLmZvclJlcGFpbnREdW1teSA9IHJlcGFpbnQodGFyZ2V0KTsgLy8gcmVwYWludFxuXG4gICAgICAgIGNzcyh0YXJnZXQsICd0cmFuc2l0aW9uJywgJ3RyYW5zZm9ybSAnICsgZHVyYXRpb24gKyAnbXMnICsgKHRoaXMub3B0aW9ucy5lYXNpbmcgPyAnICcgKyB0aGlzLm9wdGlvbnMuZWFzaW5nIDogJycpKTtcbiAgICAgICAgY3NzKHRhcmdldCwgJ3RyYW5zZm9ybScsICd0cmFuc2xhdGUzZCgwLDAsMCknKTtcbiAgICAgICAgdHlwZW9mIHRhcmdldC5hbmltYXRlZCA9PT0gJ251bWJlcicgJiYgY2xlYXJUaW1lb3V0KHRhcmdldC5hbmltYXRlZCk7XG4gICAgICAgIHRhcmdldC5hbmltYXRlZCA9IHNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xuICAgICAgICAgIGNzcyh0YXJnZXQsICd0cmFuc2l0aW9uJywgJycpO1xuICAgICAgICAgIGNzcyh0YXJnZXQsICd0cmFuc2Zvcm0nLCAnJyk7XG4gICAgICAgICAgdGFyZ2V0LmFuaW1hdGVkID0gZmFsc2U7XG4gICAgICAgICAgdGFyZ2V0LmFuaW1hdGluZ1ggPSBmYWxzZTtcbiAgICAgICAgICB0YXJnZXQuYW5pbWF0aW5nWSA9IGZhbHNlO1xuICAgICAgICB9LCBkdXJhdGlvbik7XG4gICAgICB9XG4gICAgfVxuICB9O1xufVxuXG5mdW5jdGlvbiByZXBhaW50KHRhcmdldCkge1xuICByZXR1cm4gdGFyZ2V0Lm9mZnNldFdpZHRoO1xufVxuXG5mdW5jdGlvbiBjYWxjdWxhdGVSZWFsVGltZShhbmltYXRpbmdSZWN0LCBmcm9tUmVjdCwgdG9SZWN0LCBvcHRpb25zKSB7XG4gIHJldHVybiBNYXRoLnNxcnQoTWF0aC5wb3coZnJvbVJlY3QudG9wIC0gYW5pbWF0aW5nUmVjdC50b3AsIDIpICsgTWF0aC5wb3coZnJvbVJlY3QubGVmdCAtIGFuaW1hdGluZ1JlY3QubGVmdCwgMikpIC8gTWF0aC5zcXJ0KE1hdGgucG93KGZyb21SZWN0LnRvcCAtIHRvUmVjdC50b3AsIDIpICsgTWF0aC5wb3coZnJvbVJlY3QubGVmdCAtIHRvUmVjdC5sZWZ0LCAyKSkgKiBvcHRpb25zLmFuaW1hdGlvbjtcbn1cblxudmFyIHBsdWdpbnMgPSBbXTtcbnZhciBkZWZhdWx0cyA9IHtcbiAgaW5pdGlhbGl6ZUJ5RGVmYXVsdDogdHJ1ZVxufTtcbnZhciBQbHVnaW5NYW5hZ2VyID0ge1xuICBtb3VudDogZnVuY3Rpb24gbW91bnQocGx1Z2luKSB7XG4gICAgLy8gU2V0IGRlZmF1bHQgc3RhdGljIHByb3BlcnRpZXNcbiAgICBmb3IgKHZhciBvcHRpb24gaW4gZGVmYXVsdHMpIHtcbiAgICAgIGlmIChkZWZhdWx0cy5oYXNPd25Qcm9wZXJ0eShvcHRpb24pICYmICEob3B0aW9uIGluIHBsdWdpbikpIHtcbiAgICAgICAgcGx1Z2luW29wdGlvbl0gPSBkZWZhdWx0c1tvcHRpb25dO1xuICAgICAgfVxuICAgIH1cblxuICAgIHBsdWdpbnMuZm9yRWFjaChmdW5jdGlvbiAocCkge1xuICAgICAgaWYgKHAucGx1Z2luTmFtZSA9PT0gcGx1Z2luLnBsdWdpbk5hbWUpIHtcbiAgICAgICAgdGhyb3cgXCJTb3J0YWJsZTogQ2Fubm90IG1vdW50IHBsdWdpbiBcIi5jb25jYXQocGx1Z2luLnBsdWdpbk5hbWUsIFwiIG1vcmUgdGhhbiBvbmNlXCIpO1xuICAgICAgfVxuICAgIH0pO1xuICAgIHBsdWdpbnMucHVzaChwbHVnaW4pO1xuICB9LFxuICBwbHVnaW5FdmVudDogZnVuY3Rpb24gcGx1Z2luRXZlbnQoZXZlbnROYW1lLCBzb3J0YWJsZSwgZXZ0KSB7XG4gICAgdmFyIF90aGlzID0gdGhpcztcblxuICAgIHRoaXMuZXZlbnRDYW5jZWxlZCA9IGZhbHNlO1xuXG4gICAgZXZ0LmNhbmNlbCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIF90aGlzLmV2ZW50Q2FuY2VsZWQgPSB0cnVlO1xuICAgIH07XG5cbiAgICB2YXIgZXZlbnROYW1lR2xvYmFsID0gZXZlbnROYW1lICsgJ0dsb2JhbCc7XG4gICAgcGx1Z2lucy5mb3JFYWNoKGZ1bmN0aW9uIChwbHVnaW4pIHtcbiAgICAgIGlmICghc29ydGFibGVbcGx1Z2luLnBsdWdpbk5hbWVdKSByZXR1cm47IC8vIEZpcmUgZ2xvYmFsIGV2ZW50cyBpZiBpdCBleGlzdHMgaW4gdGhpcyBzb3J0YWJsZVxuXG4gICAgICBpZiAoc29ydGFibGVbcGx1Z2luLnBsdWdpbk5hbWVdW2V2ZW50TmFtZUdsb2JhbF0pIHtcbiAgICAgICAgc29ydGFibGVbcGx1Z2luLnBsdWdpbk5hbWVdW2V2ZW50TmFtZUdsb2JhbF0oX29iamVjdFNwcmVhZDIoe1xuICAgICAgICAgIHNvcnRhYmxlOiBzb3J0YWJsZVxuICAgICAgICB9LCBldnQpKTtcbiAgICAgIH0gLy8gT25seSBmaXJlIHBsdWdpbiBldmVudCBpZiBwbHVnaW4gaXMgZW5hYmxlZCBpbiB0aGlzIHNvcnRhYmxlLFxuICAgICAgLy8gYW5kIHBsdWdpbiBoYXMgZXZlbnQgZGVmaW5lZFxuXG5cbiAgICAgIGlmIChzb3J0YWJsZS5vcHRpb25zW3BsdWdpbi5wbHVnaW5OYW1lXSAmJiBzb3J0YWJsZVtwbHVnaW4ucGx1Z2luTmFtZV1bZXZlbnROYW1lXSkge1xuICAgICAgICBzb3J0YWJsZVtwbHVnaW4ucGx1Z2luTmFtZV1bZXZlbnROYW1lXShfb2JqZWN0U3ByZWFkMih7XG4gICAgICAgICAgc29ydGFibGU6IHNvcnRhYmxlXG4gICAgICAgIH0sIGV2dCkpO1xuICAgICAgfVxuICAgIH0pO1xuICB9LFxuICBpbml0aWFsaXplUGx1Z2luczogZnVuY3Rpb24gaW5pdGlhbGl6ZVBsdWdpbnMoc29ydGFibGUsIGVsLCBkZWZhdWx0cywgb3B0aW9ucykge1xuICAgIHBsdWdpbnMuZm9yRWFjaChmdW5jdGlvbiAocGx1Z2luKSB7XG4gICAgICB2YXIgcGx1Z2luTmFtZSA9IHBsdWdpbi5wbHVnaW5OYW1lO1xuICAgICAgaWYgKCFzb3J0YWJsZS5vcHRpb25zW3BsdWdpbk5hbWVdICYmICFwbHVnaW4uaW5pdGlhbGl6ZUJ5RGVmYXVsdCkgcmV0dXJuO1xuICAgICAgdmFyIGluaXRpYWxpemVkID0gbmV3IHBsdWdpbihzb3J0YWJsZSwgZWwsIHNvcnRhYmxlLm9wdGlvbnMpO1xuICAgICAgaW5pdGlhbGl6ZWQuc29ydGFibGUgPSBzb3J0YWJsZTtcbiAgICAgIGluaXRpYWxpemVkLm9wdGlvbnMgPSBzb3J0YWJsZS5vcHRpb25zO1xuICAgICAgc29ydGFibGVbcGx1Z2luTmFtZV0gPSBpbml0aWFsaXplZDsgLy8gQWRkIGRlZmF1bHQgb3B0aW9ucyBmcm9tIHBsdWdpblxuXG4gICAgICBfZXh0ZW5kcyhkZWZhdWx0cywgaW5pdGlhbGl6ZWQuZGVmYXVsdHMpO1xuICAgIH0pO1xuXG4gICAgZm9yICh2YXIgb3B0aW9uIGluIHNvcnRhYmxlLm9wdGlvbnMpIHtcbiAgICAgIGlmICghc29ydGFibGUub3B0aW9ucy5oYXNPd25Qcm9wZXJ0eShvcHRpb24pKSBjb250aW51ZTtcbiAgICAgIHZhciBtb2RpZmllZCA9IHRoaXMubW9kaWZ5T3B0aW9uKHNvcnRhYmxlLCBvcHRpb24sIHNvcnRhYmxlLm9wdGlvbnNbb3B0aW9uXSk7XG5cbiAgICAgIGlmICh0eXBlb2YgbW9kaWZpZWQgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgIHNvcnRhYmxlLm9wdGlvbnNbb3B0aW9uXSA9IG1vZGlmaWVkO1xuICAgICAgfVxuICAgIH1cbiAgfSxcbiAgZ2V0RXZlbnRQcm9wZXJ0aWVzOiBmdW5jdGlvbiBnZXRFdmVudFByb3BlcnRpZXMobmFtZSwgc29ydGFibGUpIHtcbiAgICB2YXIgZXZlbnRQcm9wZXJ0aWVzID0ge307XG4gICAgcGx1Z2lucy5mb3JFYWNoKGZ1bmN0aW9uIChwbHVnaW4pIHtcbiAgICAgIGlmICh0eXBlb2YgcGx1Z2luLmV2ZW50UHJvcGVydGllcyAhPT0gJ2Z1bmN0aW9uJykgcmV0dXJuO1xuXG4gICAgICBfZXh0ZW5kcyhldmVudFByb3BlcnRpZXMsIHBsdWdpbi5ldmVudFByb3BlcnRpZXMuY2FsbChzb3J0YWJsZVtwbHVnaW4ucGx1Z2luTmFtZV0sIG5hbWUpKTtcbiAgICB9KTtcbiAgICByZXR1cm4gZXZlbnRQcm9wZXJ0aWVzO1xuICB9LFxuICBtb2RpZnlPcHRpb246IGZ1bmN0aW9uIG1vZGlmeU9wdGlvbihzb3J0YWJsZSwgbmFtZSwgdmFsdWUpIHtcbiAgICB2YXIgbW9kaWZpZWRWYWx1ZTtcbiAgICBwbHVnaW5zLmZvckVhY2goZnVuY3Rpb24gKHBsdWdpbikge1xuICAgICAgLy8gUGx1Z2luIG11c3QgZXhpc3Qgb24gdGhlIFNvcnRhYmxlXG4gICAgICBpZiAoIXNvcnRhYmxlW3BsdWdpbi5wbHVnaW5OYW1lXSkgcmV0dXJuOyAvLyBJZiBzdGF0aWMgb3B0aW9uIGxpc3RlbmVyIGV4aXN0cyBmb3IgdGhpcyBvcHRpb24sIGNhbGwgaW4gdGhlIGNvbnRleHQgb2YgdGhlIFNvcnRhYmxlJ3MgaW5zdGFuY2Ugb2YgdGhpcyBwbHVnaW5cblxuICAgICAgaWYgKHBsdWdpbi5vcHRpb25MaXN0ZW5lcnMgJiYgdHlwZW9mIHBsdWdpbi5vcHRpb25MaXN0ZW5lcnNbbmFtZV0gPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgbW9kaWZpZWRWYWx1ZSA9IHBsdWdpbi5vcHRpb25MaXN0ZW5lcnNbbmFtZV0uY2FsbChzb3J0YWJsZVtwbHVnaW4ucGx1Z2luTmFtZV0sIHZhbHVlKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgICByZXR1cm4gbW9kaWZpZWRWYWx1ZTtcbiAgfVxufTtcblxuZnVuY3Rpb24gZGlzcGF0Y2hFdmVudChfcmVmKSB7XG4gIHZhciBzb3J0YWJsZSA9IF9yZWYuc29ydGFibGUsXG4gICAgICByb290RWwgPSBfcmVmLnJvb3RFbCxcbiAgICAgIG5hbWUgPSBfcmVmLm5hbWUsXG4gICAgICB0YXJnZXRFbCA9IF9yZWYudGFyZ2V0RWwsXG4gICAgICBjbG9uZUVsID0gX3JlZi5jbG9uZUVsLFxuICAgICAgdG9FbCA9IF9yZWYudG9FbCxcbiAgICAgIGZyb21FbCA9IF9yZWYuZnJvbUVsLFxuICAgICAgb2xkSW5kZXggPSBfcmVmLm9sZEluZGV4LFxuICAgICAgbmV3SW5kZXggPSBfcmVmLm5ld0luZGV4LFxuICAgICAgb2xkRHJhZ2dhYmxlSW5kZXggPSBfcmVmLm9sZERyYWdnYWJsZUluZGV4LFxuICAgICAgbmV3RHJhZ2dhYmxlSW5kZXggPSBfcmVmLm5ld0RyYWdnYWJsZUluZGV4LFxuICAgICAgb3JpZ2luYWxFdmVudCA9IF9yZWYub3JpZ2luYWxFdmVudCxcbiAgICAgIHB1dFNvcnRhYmxlID0gX3JlZi5wdXRTb3J0YWJsZSxcbiAgICAgIGV4dHJhRXZlbnRQcm9wZXJ0aWVzID0gX3JlZi5leHRyYUV2ZW50UHJvcGVydGllcztcbiAgc29ydGFibGUgPSBzb3J0YWJsZSB8fCByb290RWwgJiYgcm9vdEVsW2V4cGFuZG9dO1xuICBpZiAoIXNvcnRhYmxlKSByZXR1cm47XG4gIHZhciBldnQsXG4gICAgICBvcHRpb25zID0gc29ydGFibGUub3B0aW9ucyxcbiAgICAgIG9uTmFtZSA9ICdvbicgKyBuYW1lLmNoYXJBdCgwKS50b1VwcGVyQ2FzZSgpICsgbmFtZS5zdWJzdHIoMSk7IC8vIFN1cHBvcnQgZm9yIG5ldyBDdXN0b21FdmVudCBmZWF0dXJlXG5cbiAgaWYgKHdpbmRvdy5DdXN0b21FdmVudCAmJiAhSUUxMU9yTGVzcyAmJiAhRWRnZSkge1xuICAgIGV2dCA9IG5ldyBDdXN0b21FdmVudChuYW1lLCB7XG4gICAgICBidWJibGVzOiB0cnVlLFxuICAgICAgY2FuY2VsYWJsZTogdHJ1ZVxuICAgIH0pO1xuICB9IGVsc2Uge1xuICAgIGV2dCA9IGRvY3VtZW50LmNyZWF0ZUV2ZW50KCdFdmVudCcpO1xuICAgIGV2dC5pbml0RXZlbnQobmFtZSwgdHJ1ZSwgdHJ1ZSk7XG4gIH1cblxuICBldnQudG8gPSB0b0VsIHx8IHJvb3RFbDtcbiAgZXZ0LmZyb20gPSBmcm9tRWwgfHwgcm9vdEVsO1xuICBldnQuaXRlbSA9IHRhcmdldEVsIHx8IHJvb3RFbDtcbiAgZXZ0LmNsb25lID0gY2xvbmVFbDtcbiAgZXZ0Lm9sZEluZGV4ID0gb2xkSW5kZXg7XG4gIGV2dC5uZXdJbmRleCA9IG5ld0luZGV4O1xuICBldnQub2xkRHJhZ2dhYmxlSW5kZXggPSBvbGREcmFnZ2FibGVJbmRleDtcbiAgZXZ0Lm5ld0RyYWdnYWJsZUluZGV4ID0gbmV3RHJhZ2dhYmxlSW5kZXg7XG4gIGV2dC5vcmlnaW5hbEV2ZW50ID0gb3JpZ2luYWxFdmVudDtcbiAgZXZ0LnB1bGxNb2RlID0gcHV0U29ydGFibGUgPyBwdXRTb3J0YWJsZS5sYXN0UHV0TW9kZSA6IHVuZGVmaW5lZDtcblxuICB2YXIgYWxsRXZlbnRQcm9wZXJ0aWVzID0gX29iamVjdFNwcmVhZDIoX29iamVjdFNwcmVhZDIoe30sIGV4dHJhRXZlbnRQcm9wZXJ0aWVzKSwgUGx1Z2luTWFuYWdlci5nZXRFdmVudFByb3BlcnRpZXMobmFtZSwgc29ydGFibGUpKTtcblxuICBmb3IgKHZhciBvcHRpb24gaW4gYWxsRXZlbnRQcm9wZXJ0aWVzKSB7XG4gICAgZXZ0W29wdGlvbl0gPSBhbGxFdmVudFByb3BlcnRpZXNbb3B0aW9uXTtcbiAgfVxuXG4gIGlmIChyb290RWwpIHtcbiAgICByb290RWwuZGlzcGF0Y2hFdmVudChldnQpO1xuICB9XG5cbiAgaWYgKG9wdGlvbnNbb25OYW1lXSkge1xuICAgIG9wdGlvbnNbb25OYW1lXS5jYWxsKHNvcnRhYmxlLCBldnQpO1xuICB9XG59XG5cbnZhciBfZXhjbHVkZWQgPSBbXCJldnRcIl07XG5cbnZhciBwbHVnaW5FdmVudCA9IGZ1bmN0aW9uIHBsdWdpbkV2ZW50KGV2ZW50TmFtZSwgc29ydGFibGUpIHtcbiAgdmFyIF9yZWYgPSBhcmd1bWVudHMubGVuZ3RoID4gMiAmJiBhcmd1bWVudHNbMl0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1syXSA6IHt9LFxuICAgICAgb3JpZ2luYWxFdmVudCA9IF9yZWYuZXZ0LFxuICAgICAgZGF0YSA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllcyhfcmVmLCBfZXhjbHVkZWQpO1xuXG4gIFBsdWdpbk1hbmFnZXIucGx1Z2luRXZlbnQuYmluZChTb3J0YWJsZSkoZXZlbnROYW1lLCBzb3J0YWJsZSwgX29iamVjdFNwcmVhZDIoe1xuICAgIGRyYWdFbDogZHJhZ0VsLFxuICAgIHBhcmVudEVsOiBwYXJlbnRFbCxcbiAgICBnaG9zdEVsOiBnaG9zdEVsLFxuICAgIHJvb3RFbDogcm9vdEVsLFxuICAgIG5leHRFbDogbmV4dEVsLFxuICAgIGxhc3REb3duRWw6IGxhc3REb3duRWwsXG4gICAgY2xvbmVFbDogY2xvbmVFbCxcbiAgICBjbG9uZUhpZGRlbjogY2xvbmVIaWRkZW4sXG4gICAgZHJhZ1N0YXJ0ZWQ6IG1vdmVkLFxuICAgIHB1dFNvcnRhYmxlOiBwdXRTb3J0YWJsZSxcbiAgICBhY3RpdmVTb3J0YWJsZTogU29ydGFibGUuYWN0aXZlLFxuICAgIG9yaWdpbmFsRXZlbnQ6IG9yaWdpbmFsRXZlbnQsXG4gICAgb2xkSW5kZXg6IG9sZEluZGV4LFxuICAgIG9sZERyYWdnYWJsZUluZGV4OiBvbGREcmFnZ2FibGVJbmRleCxcbiAgICBuZXdJbmRleDogbmV3SW5kZXgsXG4gICAgbmV3RHJhZ2dhYmxlSW5kZXg6IG5ld0RyYWdnYWJsZUluZGV4LFxuICAgIGhpZGVHaG9zdEZvclRhcmdldDogX2hpZGVHaG9zdEZvclRhcmdldCxcbiAgICB1bmhpZGVHaG9zdEZvclRhcmdldDogX3VuaGlkZUdob3N0Rm9yVGFyZ2V0LFxuICAgIGNsb25lTm93SGlkZGVuOiBmdW5jdGlvbiBjbG9uZU5vd0hpZGRlbigpIHtcbiAgICAgIGNsb25lSGlkZGVuID0gdHJ1ZTtcbiAgICB9LFxuICAgIGNsb25lTm93U2hvd246IGZ1bmN0aW9uIGNsb25lTm93U2hvd24oKSB7XG4gICAgICBjbG9uZUhpZGRlbiA9IGZhbHNlO1xuICAgIH0sXG4gICAgZGlzcGF0Y2hTb3J0YWJsZUV2ZW50OiBmdW5jdGlvbiBkaXNwYXRjaFNvcnRhYmxlRXZlbnQobmFtZSkge1xuICAgICAgX2Rpc3BhdGNoRXZlbnQoe1xuICAgICAgICBzb3J0YWJsZTogc29ydGFibGUsXG4gICAgICAgIG5hbWU6IG5hbWUsXG4gICAgICAgIG9yaWdpbmFsRXZlbnQ6IG9yaWdpbmFsRXZlbnRcbiAgICAgIH0pO1xuICAgIH1cbiAgfSwgZGF0YSkpO1xufTtcblxuZnVuY3Rpb24gX2Rpc3BhdGNoRXZlbnQoaW5mbykge1xuICBkaXNwYXRjaEV2ZW50KF9vYmplY3RTcHJlYWQyKHtcbiAgICBwdXRTb3J0YWJsZTogcHV0U29ydGFibGUsXG4gICAgY2xvbmVFbDogY2xvbmVFbCxcbiAgICB0YXJnZXRFbDogZHJhZ0VsLFxuICAgIHJvb3RFbDogcm9vdEVsLFxuICAgIG9sZEluZGV4OiBvbGRJbmRleCxcbiAgICBvbGREcmFnZ2FibGVJbmRleDogb2xkRHJhZ2dhYmxlSW5kZXgsXG4gICAgbmV3SW5kZXg6IG5ld0luZGV4LFxuICAgIG5ld0RyYWdnYWJsZUluZGV4OiBuZXdEcmFnZ2FibGVJbmRleFxuICB9LCBpbmZvKSk7XG59XG5cbnZhciBkcmFnRWwsXG4gICAgcGFyZW50RWwsXG4gICAgZ2hvc3RFbCxcbiAgICByb290RWwsXG4gICAgbmV4dEVsLFxuICAgIGxhc3REb3duRWwsXG4gICAgY2xvbmVFbCxcbiAgICBjbG9uZUhpZGRlbixcbiAgICBvbGRJbmRleCxcbiAgICBuZXdJbmRleCxcbiAgICBvbGREcmFnZ2FibGVJbmRleCxcbiAgICBuZXdEcmFnZ2FibGVJbmRleCxcbiAgICBhY3RpdmVHcm91cCxcbiAgICBwdXRTb3J0YWJsZSxcbiAgICBhd2FpdGluZ0RyYWdTdGFydGVkID0gZmFsc2UsXG4gICAgaWdub3JlTmV4dENsaWNrID0gZmFsc2UsXG4gICAgc29ydGFibGVzID0gW10sXG4gICAgdGFwRXZ0LFxuICAgIHRvdWNoRXZ0LFxuICAgIGxhc3REeCxcbiAgICBsYXN0RHksXG4gICAgdGFwRGlzdGFuY2VMZWZ0LFxuICAgIHRhcERpc3RhbmNlVG9wLFxuICAgIG1vdmVkLFxuICAgIGxhc3RUYXJnZXQsXG4gICAgbGFzdERpcmVjdGlvbixcbiAgICBwYXN0Rmlyc3RJbnZlcnRUaHJlc2ggPSBmYWxzZSxcbiAgICBpc0NpcmN1bXN0YW50aWFsSW52ZXJ0ID0gZmFsc2UsXG4gICAgdGFyZ2V0TW92ZURpc3RhbmNlLFxuICAgIC8vIEZvciBwb3NpdGlvbmluZyBnaG9zdCBhYnNvbHV0ZWx5XG5naG9zdFJlbGF0aXZlUGFyZW50LFxuICAgIGdob3N0UmVsYXRpdmVQYXJlbnRJbml0aWFsU2Nyb2xsID0gW10sXG4gICAgLy8gKGxlZnQsIHRvcClcbl9zaWxlbnQgPSBmYWxzZSxcbiAgICBzYXZlZElucHV0Q2hlY2tlZCA9IFtdO1xuLyoqIEBjb25zdCAqL1xuXG52YXIgZG9jdW1lbnRFeGlzdHMgPSB0eXBlb2YgZG9jdW1lbnQgIT09ICd1bmRlZmluZWQnLFxuICAgIFBvc2l0aW9uR2hvc3RBYnNvbHV0ZWx5ID0gSU9TLFxuICAgIENTU0Zsb2F0UHJvcGVydHkgPSBFZGdlIHx8IElFMTFPckxlc3MgPyAnY3NzRmxvYXQnIDogJ2Zsb2F0JyxcbiAgICAvLyBUaGlzIHdpbGwgbm90IHBhc3MgZm9yIElFOSwgYmVjYXVzZSBJRTkgRG5EIG9ubHkgd29ya3Mgb24gYW5jaG9yc1xuc3VwcG9ydERyYWdnYWJsZSA9IGRvY3VtZW50RXhpc3RzICYmICFDaHJvbWVGb3JBbmRyb2lkICYmICFJT1MgJiYgJ2RyYWdnYWJsZScgaW4gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2JyksXG4gICAgc3VwcG9ydENzc1BvaW50ZXJFdmVudHMgPSBmdW5jdGlvbiAoKSB7XG4gIGlmICghZG9jdW1lbnRFeGlzdHMpIHJldHVybjsgLy8gZmFsc2Ugd2hlbiA8PSBJRTExXG5cbiAgaWYgKElFMTFPckxlc3MpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICB2YXIgZWwgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCd4Jyk7XG4gIGVsLnN0eWxlLmNzc1RleHQgPSAncG9pbnRlci1ldmVudHM6YXV0byc7XG4gIHJldHVybiBlbC5zdHlsZS5wb2ludGVyRXZlbnRzID09PSAnYXV0byc7XG59KCksXG4gICAgX2RldGVjdERpcmVjdGlvbiA9IGZ1bmN0aW9uIF9kZXRlY3REaXJlY3Rpb24oZWwsIG9wdGlvbnMpIHtcbiAgdmFyIGVsQ1NTID0gY3NzKGVsKSxcbiAgICAgIGVsV2lkdGggPSBwYXJzZUludChlbENTUy53aWR0aCkgLSBwYXJzZUludChlbENTUy5wYWRkaW5nTGVmdCkgLSBwYXJzZUludChlbENTUy5wYWRkaW5nUmlnaHQpIC0gcGFyc2VJbnQoZWxDU1MuYm9yZGVyTGVmdFdpZHRoKSAtIHBhcnNlSW50KGVsQ1NTLmJvcmRlclJpZ2h0V2lkdGgpLFxuICAgICAgY2hpbGQxID0gZ2V0Q2hpbGQoZWwsIDAsIG9wdGlvbnMpLFxuICAgICAgY2hpbGQyID0gZ2V0Q2hpbGQoZWwsIDEsIG9wdGlvbnMpLFxuICAgICAgZmlyc3RDaGlsZENTUyA9IGNoaWxkMSAmJiBjc3MoY2hpbGQxKSxcbiAgICAgIHNlY29uZENoaWxkQ1NTID0gY2hpbGQyICYmIGNzcyhjaGlsZDIpLFxuICAgICAgZmlyc3RDaGlsZFdpZHRoID0gZmlyc3RDaGlsZENTUyAmJiBwYXJzZUludChmaXJzdENoaWxkQ1NTLm1hcmdpbkxlZnQpICsgcGFyc2VJbnQoZmlyc3RDaGlsZENTUy5tYXJnaW5SaWdodCkgKyBnZXRSZWN0KGNoaWxkMSkud2lkdGgsXG4gICAgICBzZWNvbmRDaGlsZFdpZHRoID0gc2Vjb25kQ2hpbGRDU1MgJiYgcGFyc2VJbnQoc2Vjb25kQ2hpbGRDU1MubWFyZ2luTGVmdCkgKyBwYXJzZUludChzZWNvbmRDaGlsZENTUy5tYXJnaW5SaWdodCkgKyBnZXRSZWN0KGNoaWxkMikud2lkdGg7XG5cbiAgaWYgKGVsQ1NTLmRpc3BsYXkgPT09ICdmbGV4Jykge1xuICAgIHJldHVybiBlbENTUy5mbGV4RGlyZWN0aW9uID09PSAnY29sdW1uJyB8fCBlbENTUy5mbGV4RGlyZWN0aW9uID09PSAnY29sdW1uLXJldmVyc2UnID8gJ3ZlcnRpY2FsJyA6ICdob3Jpem9udGFsJztcbiAgfVxuXG4gIGlmIChlbENTUy5kaXNwbGF5ID09PSAnZ3JpZCcpIHtcbiAgICByZXR1cm4gZWxDU1MuZ3JpZFRlbXBsYXRlQ29sdW1ucy5zcGxpdCgnICcpLmxlbmd0aCA8PSAxID8gJ3ZlcnRpY2FsJyA6ICdob3Jpem9udGFsJztcbiAgfVxuXG4gIGlmIChjaGlsZDEgJiYgZmlyc3RDaGlsZENTU1tcImZsb2F0XCJdICYmIGZpcnN0Q2hpbGRDU1NbXCJmbG9hdFwiXSAhPT0gJ25vbmUnKSB7XG4gICAgdmFyIHRvdWNoaW5nU2lkZUNoaWxkMiA9IGZpcnN0Q2hpbGRDU1NbXCJmbG9hdFwiXSA9PT0gJ2xlZnQnID8gJ2xlZnQnIDogJ3JpZ2h0JztcbiAgICByZXR1cm4gY2hpbGQyICYmIChzZWNvbmRDaGlsZENTUy5jbGVhciA9PT0gJ2JvdGgnIHx8IHNlY29uZENoaWxkQ1NTLmNsZWFyID09PSB0b3VjaGluZ1NpZGVDaGlsZDIpID8gJ3ZlcnRpY2FsJyA6ICdob3Jpem9udGFsJztcbiAgfVxuXG4gIHJldHVybiBjaGlsZDEgJiYgKGZpcnN0Q2hpbGRDU1MuZGlzcGxheSA9PT0gJ2Jsb2NrJyB8fCBmaXJzdENoaWxkQ1NTLmRpc3BsYXkgPT09ICdmbGV4JyB8fCBmaXJzdENoaWxkQ1NTLmRpc3BsYXkgPT09ICd0YWJsZScgfHwgZmlyc3RDaGlsZENTUy5kaXNwbGF5ID09PSAnZ3JpZCcgfHwgZmlyc3RDaGlsZFdpZHRoID49IGVsV2lkdGggJiYgZWxDU1NbQ1NTRmxvYXRQcm9wZXJ0eV0gPT09ICdub25lJyB8fCBjaGlsZDIgJiYgZWxDU1NbQ1NTRmxvYXRQcm9wZXJ0eV0gPT09ICdub25lJyAmJiBmaXJzdENoaWxkV2lkdGggKyBzZWNvbmRDaGlsZFdpZHRoID4gZWxXaWR0aCkgPyAndmVydGljYWwnIDogJ2hvcml6b250YWwnO1xufSxcbiAgICBfZHJhZ0VsSW5Sb3dDb2x1bW4gPSBmdW5jdGlvbiBfZHJhZ0VsSW5Sb3dDb2x1bW4oZHJhZ1JlY3QsIHRhcmdldFJlY3QsIHZlcnRpY2FsKSB7XG4gIHZhciBkcmFnRWxTMU9wcCA9IHZlcnRpY2FsID8gZHJhZ1JlY3QubGVmdCA6IGRyYWdSZWN0LnRvcCxcbiAgICAgIGRyYWdFbFMyT3BwID0gdmVydGljYWwgPyBkcmFnUmVjdC5yaWdodCA6IGRyYWdSZWN0LmJvdHRvbSxcbiAgICAgIGRyYWdFbE9wcExlbmd0aCA9IHZlcnRpY2FsID8gZHJhZ1JlY3Qud2lkdGggOiBkcmFnUmVjdC5oZWlnaHQsXG4gICAgICB0YXJnZXRTMU9wcCA9IHZlcnRpY2FsID8gdGFyZ2V0UmVjdC5sZWZ0IDogdGFyZ2V0UmVjdC50b3AsXG4gICAgICB0YXJnZXRTMk9wcCA9IHZlcnRpY2FsID8gdGFyZ2V0UmVjdC5yaWdodCA6IHRhcmdldFJlY3QuYm90dG9tLFxuICAgICAgdGFyZ2V0T3BwTGVuZ3RoID0gdmVydGljYWwgPyB0YXJnZXRSZWN0LndpZHRoIDogdGFyZ2V0UmVjdC5oZWlnaHQ7XG4gIHJldHVybiBkcmFnRWxTMU9wcCA9PT0gdGFyZ2V0UzFPcHAgfHwgZHJhZ0VsUzJPcHAgPT09IHRhcmdldFMyT3BwIHx8IGRyYWdFbFMxT3BwICsgZHJhZ0VsT3BwTGVuZ3RoIC8gMiA9PT0gdGFyZ2V0UzFPcHAgKyB0YXJnZXRPcHBMZW5ndGggLyAyO1xufSxcblxuLyoqXHJcbiAqIERldGVjdHMgZmlyc3QgbmVhcmVzdCBlbXB0eSBzb3J0YWJsZSB0byBYIGFuZCBZIHBvc2l0aW9uIHVzaW5nIGVtcHR5SW5zZXJ0VGhyZXNob2xkLlxyXG4gKiBAcGFyYW0gIHtOdW1iZXJ9IHggICAgICBYIHBvc2l0aW9uXHJcbiAqIEBwYXJhbSAge051bWJlcn0geSAgICAgIFkgcG9zaXRpb25cclxuICogQHJldHVybiB7SFRNTEVsZW1lbnR9ICAgRWxlbWVudCBvZiB0aGUgZmlyc3QgZm91bmQgbmVhcmVzdCBTb3J0YWJsZVxyXG4gKi9cbl9kZXRlY3ROZWFyZXN0RW1wdHlTb3J0YWJsZSA9IGZ1bmN0aW9uIF9kZXRlY3ROZWFyZXN0RW1wdHlTb3J0YWJsZSh4LCB5KSB7XG4gIHZhciByZXQ7XG4gIHNvcnRhYmxlcy5zb21lKGZ1bmN0aW9uIChzb3J0YWJsZSkge1xuICAgIHZhciB0aHJlc2hvbGQgPSBzb3J0YWJsZVtleHBhbmRvXS5vcHRpb25zLmVtcHR5SW5zZXJ0VGhyZXNob2xkO1xuICAgIGlmICghdGhyZXNob2xkIHx8IGxhc3RDaGlsZChzb3J0YWJsZSkpIHJldHVybjtcbiAgICB2YXIgcmVjdCA9IGdldFJlY3Qoc29ydGFibGUpLFxuICAgICAgICBpbnNpZGVIb3Jpem9udGFsbHkgPSB4ID49IHJlY3QubGVmdCAtIHRocmVzaG9sZCAmJiB4IDw9IHJlY3QucmlnaHQgKyB0aHJlc2hvbGQsXG4gICAgICAgIGluc2lkZVZlcnRpY2FsbHkgPSB5ID49IHJlY3QudG9wIC0gdGhyZXNob2xkICYmIHkgPD0gcmVjdC5ib3R0b20gKyB0aHJlc2hvbGQ7XG5cbiAgICBpZiAoaW5zaWRlSG9yaXpvbnRhbGx5ICYmIGluc2lkZVZlcnRpY2FsbHkpIHtcbiAgICAgIHJldHVybiByZXQgPSBzb3J0YWJsZTtcbiAgICB9XG4gIH0pO1xuICByZXR1cm4gcmV0O1xufSxcbiAgICBfcHJlcGFyZUdyb3VwID0gZnVuY3Rpb24gX3ByZXBhcmVHcm91cChvcHRpb25zKSB7XG4gIGZ1bmN0aW9uIHRvRm4odmFsdWUsIHB1bGwpIHtcbiAgICByZXR1cm4gZnVuY3Rpb24gKHRvLCBmcm9tLCBkcmFnRWwsIGV2dCkge1xuICAgICAgdmFyIHNhbWVHcm91cCA9IHRvLm9wdGlvbnMuZ3JvdXAubmFtZSAmJiBmcm9tLm9wdGlvbnMuZ3JvdXAubmFtZSAmJiB0by5vcHRpb25zLmdyb3VwLm5hbWUgPT09IGZyb20ub3B0aW9ucy5ncm91cC5uYW1lO1xuXG4gICAgICBpZiAodmFsdWUgPT0gbnVsbCAmJiAocHVsbCB8fCBzYW1lR3JvdXApKSB7XG4gICAgICAgIC8vIERlZmF1bHQgcHVsbCB2YWx1ZVxuICAgICAgICAvLyBEZWZhdWx0IHB1bGwgYW5kIHB1dCB2YWx1ZSBpZiBzYW1lIGdyb3VwXG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgfSBlbHNlIGlmICh2YWx1ZSA9PSBudWxsIHx8IHZhbHVlID09PSBmYWxzZSkge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9IGVsc2UgaWYgKHB1bGwgJiYgdmFsdWUgPT09ICdjbG9uZScpIHtcbiAgICAgICAgcmV0dXJuIHZhbHVlO1xuICAgICAgfSBlbHNlIGlmICh0eXBlb2YgdmFsdWUgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgcmV0dXJuIHRvRm4odmFsdWUodG8sIGZyb20sIGRyYWdFbCwgZXZ0KSwgcHVsbCkodG8sIGZyb20sIGRyYWdFbCwgZXZ0KTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHZhciBvdGhlckdyb3VwID0gKHB1bGwgPyB0byA6IGZyb20pLm9wdGlvbnMuZ3JvdXAubmFtZTtcbiAgICAgICAgcmV0dXJuIHZhbHVlID09PSB0cnVlIHx8IHR5cGVvZiB2YWx1ZSA9PT0gJ3N0cmluZycgJiYgdmFsdWUgPT09IG90aGVyR3JvdXAgfHwgdmFsdWUuam9pbiAmJiB2YWx1ZS5pbmRleE9mKG90aGVyR3JvdXApID4gLTE7XG4gICAgICB9XG4gICAgfTtcbiAgfVxuXG4gIHZhciBncm91cCA9IHt9O1xuICB2YXIgb3JpZ2luYWxHcm91cCA9IG9wdGlvbnMuZ3JvdXA7XG5cbiAgaWYgKCFvcmlnaW5hbEdyb3VwIHx8IF90eXBlb2Yob3JpZ2luYWxHcm91cCkgIT0gJ29iamVjdCcpIHtcbiAgICBvcmlnaW5hbEdyb3VwID0ge1xuICAgICAgbmFtZTogb3JpZ2luYWxHcm91cFxuICAgIH07XG4gIH1cblxuICBncm91cC5uYW1lID0gb3JpZ2luYWxHcm91cC5uYW1lO1xuICBncm91cC5jaGVja1B1bGwgPSB0b0ZuKG9yaWdpbmFsR3JvdXAucHVsbCwgdHJ1ZSk7XG4gIGdyb3VwLmNoZWNrUHV0ID0gdG9GbihvcmlnaW5hbEdyb3VwLnB1dCk7XG4gIGdyb3VwLnJldmVydENsb25lID0gb3JpZ2luYWxHcm91cC5yZXZlcnRDbG9uZTtcbiAgb3B0aW9ucy5ncm91cCA9IGdyb3VwO1xufSxcbiAgICBfaGlkZUdob3N0Rm9yVGFyZ2V0ID0gZnVuY3Rpb24gX2hpZGVHaG9zdEZvclRhcmdldCgpIHtcbiAgaWYgKCFzdXBwb3J0Q3NzUG9pbnRlckV2ZW50cyAmJiBnaG9zdEVsKSB7XG4gICAgY3NzKGdob3N0RWwsICdkaXNwbGF5JywgJ25vbmUnKTtcbiAgfVxufSxcbiAgICBfdW5oaWRlR2hvc3RGb3JUYXJnZXQgPSBmdW5jdGlvbiBfdW5oaWRlR2hvc3RGb3JUYXJnZXQoKSB7XG4gIGlmICghc3VwcG9ydENzc1BvaW50ZXJFdmVudHMgJiYgZ2hvc3RFbCkge1xuICAgIGNzcyhnaG9zdEVsLCAnZGlzcGxheScsICcnKTtcbiAgfVxufTsgLy8gIzExODQgZml4IC0gUHJldmVudCBjbGljayBldmVudCBvbiBmYWxsYmFjayBpZiBkcmFnZ2VkIGJ1dCBpdGVtIG5vdCBjaGFuZ2VkIHBvc2l0aW9uXG5cblxuaWYgKGRvY3VtZW50RXhpc3RzICYmICFDaHJvbWVGb3JBbmRyb2lkKSB7XG4gIGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgZnVuY3Rpb24gKGV2dCkge1xuICAgIGlmIChpZ25vcmVOZXh0Q2xpY2spIHtcbiAgICAgIGV2dC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgZXZ0LnN0b3BQcm9wYWdhdGlvbiAmJiBldnQuc3RvcFByb3BhZ2F0aW9uKCk7XG4gICAgICBldnQuc3RvcEltbWVkaWF0ZVByb3BhZ2F0aW9uICYmIGV2dC5zdG9wSW1tZWRpYXRlUHJvcGFnYXRpb24oKTtcbiAgICAgIGlnbm9yZU5leHRDbGljayA9IGZhbHNlO1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgfSwgdHJ1ZSk7XG59XG5cbnZhciBuZWFyZXN0RW1wdHlJbnNlcnREZXRlY3RFdmVudCA9IGZ1bmN0aW9uIG5lYXJlc3RFbXB0eUluc2VydERldGVjdEV2ZW50KGV2dCkge1xuICBpZiAoZHJhZ0VsKSB7XG4gICAgZXZ0ID0gZXZ0LnRvdWNoZXMgPyBldnQudG91Y2hlc1swXSA6IGV2dDtcblxuICAgIHZhciBuZWFyZXN0ID0gX2RldGVjdE5lYXJlc3RFbXB0eVNvcnRhYmxlKGV2dC5jbGllbnRYLCBldnQuY2xpZW50WSk7XG5cbiAgICBpZiAobmVhcmVzdCkge1xuICAgICAgLy8gQ3JlYXRlIGltaXRhdGlvbiBldmVudFxuICAgICAgdmFyIGV2ZW50ID0ge307XG5cbiAgICAgIGZvciAodmFyIGkgaW4gZXZ0KSB7XG4gICAgICAgIGlmIChldnQuaGFzT3duUHJvcGVydHkoaSkpIHtcbiAgICAgICAgICBldmVudFtpXSA9IGV2dFtpXTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBldmVudC50YXJnZXQgPSBldmVudC5yb290RWwgPSBuZWFyZXN0O1xuICAgICAgZXZlbnQucHJldmVudERlZmF1bHQgPSB2b2lkIDA7XG4gICAgICBldmVudC5zdG9wUHJvcGFnYXRpb24gPSB2b2lkIDA7XG5cbiAgICAgIG5lYXJlc3RbZXhwYW5kb10uX29uRHJhZ092ZXIoZXZlbnQpO1xuICAgIH1cbiAgfVxufTtcblxudmFyIF9jaGVja091dHNpZGVUYXJnZXRFbCA9IGZ1bmN0aW9uIF9jaGVja091dHNpZGVUYXJnZXRFbChldnQpIHtcbiAgaWYgKGRyYWdFbCkge1xuICAgIGRyYWdFbC5wYXJlbnROb2RlW2V4cGFuZG9dLl9pc091dHNpZGVUaGlzRWwoZXZ0LnRhcmdldCk7XG4gIH1cbn07XG4vKipcclxuICogQGNsYXNzICBTb3J0YWJsZVxyXG4gKiBAcGFyYW0gIHtIVE1MRWxlbWVudH0gIGVsXHJcbiAqIEBwYXJhbSAge09iamVjdH0gICAgICAgW29wdGlvbnNdXHJcbiAqL1xuXG5cbmZ1bmN0aW9uIFNvcnRhYmxlKGVsLCBvcHRpb25zKSB7XG4gIGlmICghKGVsICYmIGVsLm5vZGVUeXBlICYmIGVsLm5vZGVUeXBlID09PSAxKSkge1xuICAgIHRocm93IFwiU29ydGFibGU6IGBlbGAgbXVzdCBiZSBhbiBIVE1MRWxlbWVudCwgbm90IFwiLmNvbmNhdCh7fS50b1N0cmluZy5jYWxsKGVsKSk7XG4gIH1cblxuICB0aGlzLmVsID0gZWw7IC8vIHJvb3QgZWxlbWVudFxuXG4gIHRoaXMub3B0aW9ucyA9IG9wdGlvbnMgPSBfZXh0ZW5kcyh7fSwgb3B0aW9ucyk7IC8vIEV4cG9ydCBpbnN0YW5jZVxuXG4gIGVsW2V4cGFuZG9dID0gdGhpcztcbiAgdmFyIGRlZmF1bHRzID0ge1xuICAgIGdyb3VwOiBudWxsLFxuICAgIHNvcnQ6IHRydWUsXG4gICAgZGlzYWJsZWQ6IGZhbHNlLFxuICAgIHN0b3JlOiBudWxsLFxuICAgIGhhbmRsZTogbnVsbCxcbiAgICBkcmFnZ2FibGU6IC9eW3VvXWwkL2kudGVzdChlbC5ub2RlTmFtZSkgPyAnPmxpJyA6ICc+KicsXG4gICAgc3dhcFRocmVzaG9sZDogMSxcbiAgICAvLyBwZXJjZW50YWdlOyAwIDw9IHggPD0gMVxuICAgIGludmVydFN3YXA6IGZhbHNlLFxuICAgIC8vIGludmVydCBhbHdheXNcbiAgICBpbnZlcnRlZFN3YXBUaHJlc2hvbGQ6IG51bGwsXG4gICAgLy8gd2lsbCBiZSBzZXQgdG8gc2FtZSBhcyBzd2FwVGhyZXNob2xkIGlmIGRlZmF1bHRcbiAgICByZW1vdmVDbG9uZU9uSGlkZTogdHJ1ZSxcbiAgICBkaXJlY3Rpb246IGZ1bmN0aW9uIGRpcmVjdGlvbigpIHtcbiAgICAgIHJldHVybiBfZGV0ZWN0RGlyZWN0aW9uKGVsLCB0aGlzLm9wdGlvbnMpO1xuICAgIH0sXG4gICAgZ2hvc3RDbGFzczogJ3NvcnRhYmxlLWdob3N0JyxcbiAgICBjaG9zZW5DbGFzczogJ3NvcnRhYmxlLWNob3NlbicsXG4gICAgZHJhZ0NsYXNzOiAnc29ydGFibGUtZHJhZycsXG4gICAgaWdub3JlOiAnYSwgaW1nJyxcbiAgICBmaWx0ZXI6IG51bGwsXG4gICAgcHJldmVudE9uRmlsdGVyOiB0cnVlLFxuICAgIGFuaW1hdGlvbjogMCxcbiAgICBlYXNpbmc6IG51bGwsXG4gICAgc2V0RGF0YTogZnVuY3Rpb24gc2V0RGF0YShkYXRhVHJhbnNmZXIsIGRyYWdFbCkge1xuICAgICAgZGF0YVRyYW5zZmVyLnNldERhdGEoJ1RleHQnLCBkcmFnRWwudGV4dENvbnRlbnQpO1xuICAgIH0sXG4gICAgZHJvcEJ1YmJsZTogZmFsc2UsXG4gICAgZHJhZ292ZXJCdWJibGU6IGZhbHNlLFxuICAgIGRhdGFJZEF0dHI6ICdkYXRhLWlkJyxcbiAgICBkZWxheTogMCxcbiAgICBkZWxheU9uVG91Y2hPbmx5OiBmYWxzZSxcbiAgICB0b3VjaFN0YXJ0VGhyZXNob2xkOiAoTnVtYmVyLnBhcnNlSW50ID8gTnVtYmVyIDogd2luZG93KS5wYXJzZUludCh3aW5kb3cuZGV2aWNlUGl4ZWxSYXRpbywgMTApIHx8IDEsXG4gICAgZm9yY2VGYWxsYmFjazogZmFsc2UsXG4gICAgZmFsbGJhY2tDbGFzczogJ3NvcnRhYmxlLWZhbGxiYWNrJyxcbiAgICBmYWxsYmFja09uQm9keTogZmFsc2UsXG4gICAgZmFsbGJhY2tUb2xlcmFuY2U6IDAsXG4gICAgZmFsbGJhY2tPZmZzZXQ6IHtcbiAgICAgIHg6IDAsXG4gICAgICB5OiAwXG4gICAgfSxcbiAgICBzdXBwb3J0UG9pbnRlcjogU29ydGFibGUuc3VwcG9ydFBvaW50ZXIgIT09IGZhbHNlICYmICdQb2ludGVyRXZlbnQnIGluIHdpbmRvdyAmJiAhU2FmYXJpLFxuICAgIGVtcHR5SW5zZXJ0VGhyZXNob2xkOiA1XG4gIH07XG4gIFBsdWdpbk1hbmFnZXIuaW5pdGlhbGl6ZVBsdWdpbnModGhpcywgZWwsIGRlZmF1bHRzKTsgLy8gU2V0IGRlZmF1bHQgb3B0aW9uc1xuXG4gIGZvciAodmFyIG5hbWUgaW4gZGVmYXVsdHMpIHtcbiAgICAhKG5hbWUgaW4gb3B0aW9ucykgJiYgKG9wdGlvbnNbbmFtZV0gPSBkZWZhdWx0c1tuYW1lXSk7XG4gIH1cblxuICBfcHJlcGFyZUdyb3VwKG9wdGlvbnMpOyAvLyBCaW5kIGFsbCBwcml2YXRlIG1ldGhvZHNcblxuXG4gIGZvciAodmFyIGZuIGluIHRoaXMpIHtcbiAgICBpZiAoZm4uY2hhckF0KDApID09PSAnXycgJiYgdHlwZW9mIHRoaXNbZm5dID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICB0aGlzW2ZuXSA9IHRoaXNbZm5dLmJpbmQodGhpcyk7XG4gICAgfVxuICB9IC8vIFNldHVwIGRyYWcgbW9kZVxuXG5cbiAgdGhpcy5uYXRpdmVEcmFnZ2FibGUgPSBvcHRpb25zLmZvcmNlRmFsbGJhY2sgPyBmYWxzZSA6IHN1cHBvcnREcmFnZ2FibGU7XG5cbiAgaWYgKHRoaXMubmF0aXZlRHJhZ2dhYmxlKSB7XG4gICAgLy8gVG91Y2ggc3RhcnQgdGhyZXNob2xkIGNhbm5vdCBiZSBncmVhdGVyIHRoYW4gdGhlIG5hdGl2ZSBkcmFnc3RhcnQgdGhyZXNob2xkXG4gICAgdGhpcy5vcHRpb25zLnRvdWNoU3RhcnRUaHJlc2hvbGQgPSAxO1xuICB9IC8vIEJpbmQgZXZlbnRzXG5cblxuICBpZiAob3B0aW9ucy5zdXBwb3J0UG9pbnRlcikge1xuICAgIG9uKGVsLCAncG9pbnRlcmRvd24nLCB0aGlzLl9vblRhcFN0YXJ0KTtcbiAgfSBlbHNlIHtcbiAgICBvbihlbCwgJ21vdXNlZG93bicsIHRoaXMuX29uVGFwU3RhcnQpO1xuICAgIG9uKGVsLCAndG91Y2hzdGFydCcsIHRoaXMuX29uVGFwU3RhcnQpO1xuICB9XG5cbiAgaWYgKHRoaXMubmF0aXZlRHJhZ2dhYmxlKSB7XG4gICAgb24oZWwsICdkcmFnb3ZlcicsIHRoaXMpO1xuICAgIG9uKGVsLCAnZHJhZ2VudGVyJywgdGhpcyk7XG4gIH1cblxuICBzb3J0YWJsZXMucHVzaCh0aGlzLmVsKTsgLy8gUmVzdG9yZSBzb3J0aW5nXG5cbiAgb3B0aW9ucy5zdG9yZSAmJiBvcHRpb25zLnN0b3JlLmdldCAmJiB0aGlzLnNvcnQob3B0aW9ucy5zdG9yZS5nZXQodGhpcykgfHwgW10pOyAvLyBBZGQgYW5pbWF0aW9uIHN0YXRlIG1hbmFnZXJcblxuICBfZXh0ZW5kcyh0aGlzLCBBbmltYXRpb25TdGF0ZU1hbmFnZXIoKSk7XG59XG5cblNvcnRhYmxlLnByb3RvdHlwZSA9XG4vKiogQGxlbmRzIFNvcnRhYmxlLnByb3RvdHlwZSAqL1xue1xuICBjb25zdHJ1Y3RvcjogU29ydGFibGUsXG4gIF9pc091dHNpZGVUaGlzRWw6IGZ1bmN0aW9uIF9pc091dHNpZGVUaGlzRWwodGFyZ2V0KSB7XG4gICAgaWYgKCF0aGlzLmVsLmNvbnRhaW5zKHRhcmdldCkgJiYgdGFyZ2V0ICE9PSB0aGlzLmVsKSB7XG4gICAgICBsYXN0VGFyZ2V0ID0gbnVsbDtcbiAgICB9XG4gIH0sXG4gIF9nZXREaXJlY3Rpb246IGZ1bmN0aW9uIF9nZXREaXJlY3Rpb24oZXZ0LCB0YXJnZXQpIHtcbiAgICByZXR1cm4gdHlwZW9mIHRoaXMub3B0aW9ucy5kaXJlY3Rpb24gPT09ICdmdW5jdGlvbicgPyB0aGlzLm9wdGlvbnMuZGlyZWN0aW9uLmNhbGwodGhpcywgZXZ0LCB0YXJnZXQsIGRyYWdFbCkgOiB0aGlzLm9wdGlvbnMuZGlyZWN0aW9uO1xuICB9LFxuICBfb25UYXBTdGFydDogZnVuY3Rpb24gX29uVGFwU3RhcnQoXG4gIC8qKiBFdmVudHxUb3VjaEV2ZW50ICovXG4gIGV2dCkge1xuICAgIGlmICghZXZ0LmNhbmNlbGFibGUpIHJldHVybjtcblxuICAgIHZhciBfdGhpcyA9IHRoaXMsXG4gICAgICAgIGVsID0gdGhpcy5lbCxcbiAgICAgICAgb3B0aW9ucyA9IHRoaXMub3B0aW9ucyxcbiAgICAgICAgcHJldmVudE9uRmlsdGVyID0gb3B0aW9ucy5wcmV2ZW50T25GaWx0ZXIsXG4gICAgICAgIHR5cGUgPSBldnQudHlwZSxcbiAgICAgICAgdG91Y2ggPSBldnQudG91Y2hlcyAmJiBldnQudG91Y2hlc1swXSB8fCBldnQucG9pbnRlclR5cGUgJiYgZXZ0LnBvaW50ZXJUeXBlID09PSAndG91Y2gnICYmIGV2dCxcbiAgICAgICAgdGFyZ2V0ID0gKHRvdWNoIHx8IGV2dCkudGFyZ2V0LFxuICAgICAgICBvcmlnaW5hbFRhcmdldCA9IGV2dC50YXJnZXQuc2hhZG93Um9vdCAmJiAoZXZ0LnBhdGggJiYgZXZ0LnBhdGhbMF0gfHwgZXZ0LmNvbXBvc2VkUGF0aCAmJiBldnQuY29tcG9zZWRQYXRoKClbMF0pIHx8IHRhcmdldCxcbiAgICAgICAgZmlsdGVyID0gb3B0aW9ucy5maWx0ZXI7XG5cbiAgICBfc2F2ZUlucHV0Q2hlY2tlZFN0YXRlKGVsKTsgLy8gRG9uJ3QgdHJpZ2dlciBzdGFydCBldmVudCB3aGVuIGFuIGVsZW1lbnQgaXMgYmVlbiBkcmFnZ2VkLCBvdGhlcndpc2UgdGhlIGV2dC5vbGRpbmRleCBhbHdheXMgd3Jvbmcgd2hlbiBzZXQgb3B0aW9uLmdyb3VwLlxuXG5cbiAgICBpZiAoZHJhZ0VsKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgaWYgKC9tb3VzZWRvd258cG9pbnRlcmRvd24vLnRlc3QodHlwZSkgJiYgZXZ0LmJ1dHRvbiAhPT0gMCB8fCBvcHRpb25zLmRpc2FibGVkKSB7XG4gICAgICByZXR1cm47IC8vIG9ubHkgbGVmdCBidXR0b24gYW5kIGVuYWJsZWRcbiAgICB9IC8vIGNhbmNlbCBkbmQgaWYgb3JpZ2luYWwgdGFyZ2V0IGlzIGNvbnRlbnQgZWRpdGFibGVcblxuXG4gICAgaWYgKG9yaWdpbmFsVGFyZ2V0LmlzQ29udGVudEVkaXRhYmxlKSB7XG4gICAgICByZXR1cm47XG4gICAgfSAvLyBTYWZhcmkgaWdub3JlcyBmdXJ0aGVyIGV2ZW50IGhhbmRsaW5nIGFmdGVyIG1vdXNlZG93blxuXG5cbiAgICBpZiAoIXRoaXMubmF0aXZlRHJhZ2dhYmxlICYmIFNhZmFyaSAmJiB0YXJnZXQgJiYgdGFyZ2V0LnRhZ05hbWUudG9VcHBlckNhc2UoKSA9PT0gJ1NFTEVDVCcpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICB0YXJnZXQgPSBjbG9zZXN0KHRhcmdldCwgb3B0aW9ucy5kcmFnZ2FibGUsIGVsLCBmYWxzZSk7XG5cbiAgICBpZiAodGFyZ2V0ICYmIHRhcmdldC5hbmltYXRlZCkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGlmIChsYXN0RG93bkVsID09PSB0YXJnZXQpIHtcbiAgICAgIC8vIElnbm9yaW5nIGR1cGxpY2F0ZSBgZG93bmBcbiAgICAgIHJldHVybjtcbiAgICB9IC8vIEdldCB0aGUgaW5kZXggb2YgdGhlIGRyYWdnZWQgZWxlbWVudCB3aXRoaW4gaXRzIHBhcmVudFxuXG5cbiAgICBvbGRJbmRleCA9IGluZGV4KHRhcmdldCk7XG4gICAgb2xkRHJhZ2dhYmxlSW5kZXggPSBpbmRleCh0YXJnZXQsIG9wdGlvbnMuZHJhZ2dhYmxlKTsgLy8gQ2hlY2sgZmlsdGVyXG5cbiAgICBpZiAodHlwZW9mIGZpbHRlciA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgaWYgKGZpbHRlci5jYWxsKHRoaXMsIGV2dCwgdGFyZ2V0LCB0aGlzKSkge1xuICAgICAgICBfZGlzcGF0Y2hFdmVudCh7XG4gICAgICAgICAgc29ydGFibGU6IF90aGlzLFxuICAgICAgICAgIHJvb3RFbDogb3JpZ2luYWxUYXJnZXQsXG4gICAgICAgICAgbmFtZTogJ2ZpbHRlcicsXG4gICAgICAgICAgdGFyZ2V0RWw6IHRhcmdldCxcbiAgICAgICAgICB0b0VsOiBlbCxcbiAgICAgICAgICBmcm9tRWw6IGVsXG4gICAgICAgIH0pO1xuXG4gICAgICAgIHBsdWdpbkV2ZW50KCdmaWx0ZXInLCBfdGhpcywge1xuICAgICAgICAgIGV2dDogZXZ0XG4gICAgICAgIH0pO1xuICAgICAgICBwcmV2ZW50T25GaWx0ZXIgJiYgZXZ0LmNhbmNlbGFibGUgJiYgZXZ0LnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgIHJldHVybjsgLy8gY2FuY2VsIGRuZFxuICAgICAgfVxuICAgIH0gZWxzZSBpZiAoZmlsdGVyKSB7XG4gICAgICBmaWx0ZXIgPSBmaWx0ZXIuc3BsaXQoJywnKS5zb21lKGZ1bmN0aW9uIChjcml0ZXJpYSkge1xuICAgICAgICBjcml0ZXJpYSA9IGNsb3Nlc3Qob3JpZ2luYWxUYXJnZXQsIGNyaXRlcmlhLnRyaW0oKSwgZWwsIGZhbHNlKTtcblxuICAgICAgICBpZiAoY3JpdGVyaWEpIHtcbiAgICAgICAgICBfZGlzcGF0Y2hFdmVudCh7XG4gICAgICAgICAgICBzb3J0YWJsZTogX3RoaXMsXG4gICAgICAgICAgICByb290RWw6IGNyaXRlcmlhLFxuICAgICAgICAgICAgbmFtZTogJ2ZpbHRlcicsXG4gICAgICAgICAgICB0YXJnZXRFbDogdGFyZ2V0LFxuICAgICAgICAgICAgZnJvbUVsOiBlbCxcbiAgICAgICAgICAgIHRvRWw6IGVsXG4gICAgICAgICAgfSk7XG5cbiAgICAgICAgICBwbHVnaW5FdmVudCgnZmlsdGVyJywgX3RoaXMsIHtcbiAgICAgICAgICAgIGV2dDogZXZ0XG4gICAgICAgICAgfSk7XG4gICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuXG4gICAgICBpZiAoZmlsdGVyKSB7XG4gICAgICAgIHByZXZlbnRPbkZpbHRlciAmJiBldnQuY2FuY2VsYWJsZSAmJiBldnQucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgcmV0dXJuOyAvLyBjYW5jZWwgZG5kXG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKG9wdGlvbnMuaGFuZGxlICYmICFjbG9zZXN0KG9yaWdpbmFsVGFyZ2V0LCBvcHRpb25zLmhhbmRsZSwgZWwsIGZhbHNlKSkge1xuICAgICAgcmV0dXJuO1xuICAgIH0gLy8gUHJlcGFyZSBgZHJhZ3N0YXJ0YFxuXG5cbiAgICB0aGlzLl9wcmVwYXJlRHJhZ1N0YXJ0KGV2dCwgdG91Y2gsIHRhcmdldCk7XG4gIH0sXG4gIF9wcmVwYXJlRHJhZ1N0YXJ0OiBmdW5jdGlvbiBfcHJlcGFyZURyYWdTdGFydChcbiAgLyoqIEV2ZW50ICovXG4gIGV2dCxcbiAgLyoqIFRvdWNoICovXG4gIHRvdWNoLFxuICAvKiogSFRNTEVsZW1lbnQgKi9cbiAgdGFyZ2V0KSB7XG4gICAgdmFyIF90aGlzID0gdGhpcyxcbiAgICAgICAgZWwgPSBfdGhpcy5lbCxcbiAgICAgICAgb3B0aW9ucyA9IF90aGlzLm9wdGlvbnMsXG4gICAgICAgIG93bmVyRG9jdW1lbnQgPSBlbC5vd25lckRvY3VtZW50LFxuICAgICAgICBkcmFnU3RhcnRGbjtcblxuICAgIGlmICh0YXJnZXQgJiYgIWRyYWdFbCAmJiB0YXJnZXQucGFyZW50Tm9kZSA9PT0gZWwpIHtcbiAgICAgIHZhciBkcmFnUmVjdCA9IGdldFJlY3QodGFyZ2V0KTtcbiAgICAgIHJvb3RFbCA9IGVsO1xuICAgICAgZHJhZ0VsID0gdGFyZ2V0O1xuICAgICAgcGFyZW50RWwgPSBkcmFnRWwucGFyZW50Tm9kZTtcbiAgICAgIG5leHRFbCA9IGRyYWdFbC5uZXh0U2libGluZztcbiAgICAgIGxhc3REb3duRWwgPSB0YXJnZXQ7XG4gICAgICBhY3RpdmVHcm91cCA9IG9wdGlvbnMuZ3JvdXA7XG4gICAgICBTb3J0YWJsZS5kcmFnZ2VkID0gZHJhZ0VsO1xuICAgICAgdGFwRXZ0ID0ge1xuICAgICAgICB0YXJnZXQ6IGRyYWdFbCxcbiAgICAgICAgY2xpZW50WDogKHRvdWNoIHx8IGV2dCkuY2xpZW50WCxcbiAgICAgICAgY2xpZW50WTogKHRvdWNoIHx8IGV2dCkuY2xpZW50WVxuICAgICAgfTtcbiAgICAgIHRhcERpc3RhbmNlTGVmdCA9IHRhcEV2dC5jbGllbnRYIC0gZHJhZ1JlY3QubGVmdDtcbiAgICAgIHRhcERpc3RhbmNlVG9wID0gdGFwRXZ0LmNsaWVudFkgLSBkcmFnUmVjdC50b3A7XG4gICAgICB0aGlzLl9sYXN0WCA9ICh0b3VjaCB8fCBldnQpLmNsaWVudFg7XG4gICAgICB0aGlzLl9sYXN0WSA9ICh0b3VjaCB8fCBldnQpLmNsaWVudFk7XG4gICAgICBkcmFnRWwuc3R5bGVbJ3dpbGwtY2hhbmdlJ10gPSAnYWxsJztcblxuICAgICAgZHJhZ1N0YXJ0Rm4gPSBmdW5jdGlvbiBkcmFnU3RhcnRGbigpIHtcbiAgICAgICAgcGx1Z2luRXZlbnQoJ2RlbGF5RW5kZWQnLCBfdGhpcywge1xuICAgICAgICAgIGV2dDogZXZ0XG4gICAgICAgIH0pO1xuXG4gICAgICAgIGlmIChTb3J0YWJsZS5ldmVudENhbmNlbGVkKSB7XG4gICAgICAgICAgX3RoaXMuX29uRHJvcCgpO1xuXG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9IC8vIERlbGF5ZWQgZHJhZyBoYXMgYmVlbiB0cmlnZ2VyZWRcbiAgICAgICAgLy8gd2UgY2FuIHJlLWVuYWJsZSB0aGUgZXZlbnRzOiB0b3VjaG1vdmUvbW91c2Vtb3ZlXG5cblxuICAgICAgICBfdGhpcy5fZGlzYWJsZURlbGF5ZWREcmFnRXZlbnRzKCk7XG5cbiAgICAgICAgaWYgKCFGaXJlRm94ICYmIF90aGlzLm5hdGl2ZURyYWdnYWJsZSkge1xuICAgICAgICAgIGRyYWdFbC5kcmFnZ2FibGUgPSB0cnVlO1xuICAgICAgICB9IC8vIEJpbmQgdGhlIGV2ZW50czogZHJhZ3N0YXJ0L2RyYWdlbmRcblxuXG4gICAgICAgIF90aGlzLl90cmlnZ2VyRHJhZ1N0YXJ0KGV2dCwgdG91Y2gpOyAvLyBEcmFnIHN0YXJ0IGV2ZW50XG5cblxuICAgICAgICBfZGlzcGF0Y2hFdmVudCh7XG4gICAgICAgICAgc29ydGFibGU6IF90aGlzLFxuICAgICAgICAgIG5hbWU6ICdjaG9vc2UnLFxuICAgICAgICAgIG9yaWdpbmFsRXZlbnQ6IGV2dFxuICAgICAgICB9KTsgLy8gQ2hvc2VuIGl0ZW1cblxuXG4gICAgICAgIHRvZ2dsZUNsYXNzKGRyYWdFbCwgb3B0aW9ucy5jaG9zZW5DbGFzcywgdHJ1ZSk7XG4gICAgICB9OyAvLyBEaXNhYmxlIFwiZHJhZ2dhYmxlXCJcblxuXG4gICAgICBvcHRpb25zLmlnbm9yZS5zcGxpdCgnLCcpLmZvckVhY2goZnVuY3Rpb24gKGNyaXRlcmlhKSB7XG4gICAgICAgIGZpbmQoZHJhZ0VsLCBjcml0ZXJpYS50cmltKCksIF9kaXNhYmxlRHJhZ2dhYmxlKTtcbiAgICAgIH0pO1xuICAgICAgb24ob3duZXJEb2N1bWVudCwgJ2RyYWdvdmVyJywgbmVhcmVzdEVtcHR5SW5zZXJ0RGV0ZWN0RXZlbnQpO1xuICAgICAgb24ob3duZXJEb2N1bWVudCwgJ21vdXNlbW92ZScsIG5lYXJlc3RFbXB0eUluc2VydERldGVjdEV2ZW50KTtcbiAgICAgIG9uKG93bmVyRG9jdW1lbnQsICd0b3VjaG1vdmUnLCBuZWFyZXN0RW1wdHlJbnNlcnREZXRlY3RFdmVudCk7XG4gICAgICBvbihvd25lckRvY3VtZW50LCAnbW91c2V1cCcsIF90aGlzLl9vbkRyb3ApO1xuICAgICAgb24ob3duZXJEb2N1bWVudCwgJ3RvdWNoZW5kJywgX3RoaXMuX29uRHJvcCk7XG4gICAgICBvbihvd25lckRvY3VtZW50LCAndG91Y2hjYW5jZWwnLCBfdGhpcy5fb25Ecm9wKTsgLy8gTWFrZSBkcmFnRWwgZHJhZ2dhYmxlIChtdXN0IGJlIGJlZm9yZSBkZWxheSBmb3IgRmlyZUZveClcblxuICAgICAgaWYgKEZpcmVGb3ggJiYgdGhpcy5uYXRpdmVEcmFnZ2FibGUpIHtcbiAgICAgICAgdGhpcy5vcHRpb25zLnRvdWNoU3RhcnRUaHJlc2hvbGQgPSA0O1xuICAgICAgICBkcmFnRWwuZHJhZ2dhYmxlID0gdHJ1ZTtcbiAgICAgIH1cblxuICAgICAgcGx1Z2luRXZlbnQoJ2RlbGF5U3RhcnQnLCB0aGlzLCB7XG4gICAgICAgIGV2dDogZXZ0XG4gICAgICB9KTsgLy8gRGVsYXkgaXMgaW1wb3NzaWJsZSBmb3IgbmF0aXZlIERuRCBpbiBFZGdlIG9yIElFXG5cbiAgICAgIGlmIChvcHRpb25zLmRlbGF5ICYmICghb3B0aW9ucy5kZWxheU9uVG91Y2hPbmx5IHx8IHRvdWNoKSAmJiAoIXRoaXMubmF0aXZlRHJhZ2dhYmxlIHx8ICEoRWRnZSB8fCBJRTExT3JMZXNzKSkpIHtcbiAgICAgICAgaWYgKFNvcnRhYmxlLmV2ZW50Q2FuY2VsZWQpIHtcbiAgICAgICAgICB0aGlzLl9vbkRyb3AoKTtcblxuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfSAvLyBJZiB0aGUgdXNlciBtb3ZlcyB0aGUgcG9pbnRlciBvciBsZXQgZ28gdGhlIGNsaWNrIG9yIHRvdWNoXG4gICAgICAgIC8vIGJlZm9yZSB0aGUgZGVsYXkgaGFzIGJlZW4gcmVhY2hlZDpcbiAgICAgICAgLy8gZGlzYWJsZSB0aGUgZGVsYXllZCBkcmFnXG5cblxuICAgICAgICBvbihvd25lckRvY3VtZW50LCAnbW91c2V1cCcsIF90aGlzLl9kaXNhYmxlRGVsYXllZERyYWcpO1xuICAgICAgICBvbihvd25lckRvY3VtZW50LCAndG91Y2hlbmQnLCBfdGhpcy5fZGlzYWJsZURlbGF5ZWREcmFnKTtcbiAgICAgICAgb24ob3duZXJEb2N1bWVudCwgJ3RvdWNoY2FuY2VsJywgX3RoaXMuX2Rpc2FibGVEZWxheWVkRHJhZyk7XG4gICAgICAgIG9uKG93bmVyRG9jdW1lbnQsICdtb3VzZW1vdmUnLCBfdGhpcy5fZGVsYXllZERyYWdUb3VjaE1vdmVIYW5kbGVyKTtcbiAgICAgICAgb24ob3duZXJEb2N1bWVudCwgJ3RvdWNobW92ZScsIF90aGlzLl9kZWxheWVkRHJhZ1RvdWNoTW92ZUhhbmRsZXIpO1xuICAgICAgICBvcHRpb25zLnN1cHBvcnRQb2ludGVyICYmIG9uKG93bmVyRG9jdW1lbnQsICdwb2ludGVybW92ZScsIF90aGlzLl9kZWxheWVkRHJhZ1RvdWNoTW92ZUhhbmRsZXIpO1xuICAgICAgICBfdGhpcy5fZHJhZ1N0YXJ0VGltZXIgPSBzZXRUaW1lb3V0KGRyYWdTdGFydEZuLCBvcHRpb25zLmRlbGF5KTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGRyYWdTdGFydEZuKCk7XG4gICAgICB9XG4gICAgfVxuICB9LFxuICBfZGVsYXllZERyYWdUb3VjaE1vdmVIYW5kbGVyOiBmdW5jdGlvbiBfZGVsYXllZERyYWdUb3VjaE1vdmVIYW5kbGVyKFxuICAvKiogVG91Y2hFdmVudHxQb2ludGVyRXZlbnQgKiovXG4gIGUpIHtcbiAgICB2YXIgdG91Y2ggPSBlLnRvdWNoZXMgPyBlLnRvdWNoZXNbMF0gOiBlO1xuXG4gICAgaWYgKE1hdGgubWF4KE1hdGguYWJzKHRvdWNoLmNsaWVudFggLSB0aGlzLl9sYXN0WCksIE1hdGguYWJzKHRvdWNoLmNsaWVudFkgLSB0aGlzLl9sYXN0WSkpID49IE1hdGguZmxvb3IodGhpcy5vcHRpb25zLnRvdWNoU3RhcnRUaHJlc2hvbGQgLyAodGhpcy5uYXRpdmVEcmFnZ2FibGUgJiYgd2luZG93LmRldmljZVBpeGVsUmF0aW8gfHwgMSkpKSB7XG4gICAgICB0aGlzLl9kaXNhYmxlRGVsYXllZERyYWcoKTtcbiAgICB9XG4gIH0sXG4gIF9kaXNhYmxlRGVsYXllZERyYWc6IGZ1bmN0aW9uIF9kaXNhYmxlRGVsYXllZERyYWcoKSB7XG4gICAgZHJhZ0VsICYmIF9kaXNhYmxlRHJhZ2dhYmxlKGRyYWdFbCk7XG4gICAgY2xlYXJUaW1lb3V0KHRoaXMuX2RyYWdTdGFydFRpbWVyKTtcblxuICAgIHRoaXMuX2Rpc2FibGVEZWxheWVkRHJhZ0V2ZW50cygpO1xuICB9LFxuICBfZGlzYWJsZURlbGF5ZWREcmFnRXZlbnRzOiBmdW5jdGlvbiBfZGlzYWJsZURlbGF5ZWREcmFnRXZlbnRzKCkge1xuICAgIHZhciBvd25lckRvY3VtZW50ID0gdGhpcy5lbC5vd25lckRvY3VtZW50O1xuICAgIG9mZihvd25lckRvY3VtZW50LCAnbW91c2V1cCcsIHRoaXMuX2Rpc2FibGVEZWxheWVkRHJhZyk7XG4gICAgb2ZmKG93bmVyRG9jdW1lbnQsICd0b3VjaGVuZCcsIHRoaXMuX2Rpc2FibGVEZWxheWVkRHJhZyk7XG4gICAgb2ZmKG93bmVyRG9jdW1lbnQsICd0b3VjaGNhbmNlbCcsIHRoaXMuX2Rpc2FibGVEZWxheWVkRHJhZyk7XG4gICAgb2ZmKG93bmVyRG9jdW1lbnQsICdtb3VzZW1vdmUnLCB0aGlzLl9kZWxheWVkRHJhZ1RvdWNoTW92ZUhhbmRsZXIpO1xuICAgIG9mZihvd25lckRvY3VtZW50LCAndG91Y2htb3ZlJywgdGhpcy5fZGVsYXllZERyYWdUb3VjaE1vdmVIYW5kbGVyKTtcbiAgICBvZmYob3duZXJEb2N1bWVudCwgJ3BvaW50ZXJtb3ZlJywgdGhpcy5fZGVsYXllZERyYWdUb3VjaE1vdmVIYW5kbGVyKTtcbiAgfSxcbiAgX3RyaWdnZXJEcmFnU3RhcnQ6IGZ1bmN0aW9uIF90cmlnZ2VyRHJhZ1N0YXJ0KFxuICAvKiogRXZlbnQgKi9cbiAgZXZ0LFxuICAvKiogVG91Y2ggKi9cbiAgdG91Y2gpIHtcbiAgICB0b3VjaCA9IHRvdWNoIHx8IGV2dC5wb2ludGVyVHlwZSA9PSAndG91Y2gnICYmIGV2dDtcblxuICAgIGlmICghdGhpcy5uYXRpdmVEcmFnZ2FibGUgfHwgdG91Y2gpIHtcbiAgICAgIGlmICh0aGlzLm9wdGlvbnMuc3VwcG9ydFBvaW50ZXIpIHtcbiAgICAgICAgb24oZG9jdW1lbnQsICdwb2ludGVybW92ZScsIHRoaXMuX29uVG91Y2hNb3ZlKTtcbiAgICAgIH0gZWxzZSBpZiAodG91Y2gpIHtcbiAgICAgICAgb24oZG9jdW1lbnQsICd0b3VjaG1vdmUnLCB0aGlzLl9vblRvdWNoTW92ZSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBvbihkb2N1bWVudCwgJ21vdXNlbW92ZScsIHRoaXMuX29uVG91Y2hNb3ZlKTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgb24oZHJhZ0VsLCAnZHJhZ2VuZCcsIHRoaXMpO1xuICAgICAgb24ocm9vdEVsLCAnZHJhZ3N0YXJ0JywgdGhpcy5fb25EcmFnU3RhcnQpO1xuICAgIH1cblxuICAgIHRyeSB7XG4gICAgICBpZiAoZG9jdW1lbnQuc2VsZWN0aW9uKSB7XG4gICAgICAgIC8vIFRpbWVvdXQgbmVjY2Vzc2FyeSBmb3IgSUU5XG4gICAgICAgIF9uZXh0VGljayhmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgZG9jdW1lbnQuc2VsZWN0aW9uLmVtcHR5KCk7XG4gICAgICAgIH0pO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgd2luZG93LmdldFNlbGVjdGlvbigpLnJlbW92ZUFsbFJhbmdlcygpO1xuICAgICAgfVxuICAgIH0gY2F0Y2ggKGVycikge31cbiAgfSxcbiAgX2RyYWdTdGFydGVkOiBmdW5jdGlvbiBfZHJhZ1N0YXJ0ZWQoZmFsbGJhY2ssIGV2dCkge1xuXG4gICAgYXdhaXRpbmdEcmFnU3RhcnRlZCA9IGZhbHNlO1xuXG4gICAgaWYgKHJvb3RFbCAmJiBkcmFnRWwpIHtcbiAgICAgIHBsdWdpbkV2ZW50KCdkcmFnU3RhcnRlZCcsIHRoaXMsIHtcbiAgICAgICAgZXZ0OiBldnRcbiAgICAgIH0pO1xuXG4gICAgICBpZiAodGhpcy5uYXRpdmVEcmFnZ2FibGUpIHtcbiAgICAgICAgb24oZG9jdW1lbnQsICdkcmFnb3ZlcicsIF9jaGVja091dHNpZGVUYXJnZXRFbCk7XG4gICAgICB9XG5cbiAgICAgIHZhciBvcHRpb25zID0gdGhpcy5vcHRpb25zOyAvLyBBcHBseSBlZmZlY3RcblxuICAgICAgIWZhbGxiYWNrICYmIHRvZ2dsZUNsYXNzKGRyYWdFbCwgb3B0aW9ucy5kcmFnQ2xhc3MsIGZhbHNlKTtcbiAgICAgIHRvZ2dsZUNsYXNzKGRyYWdFbCwgb3B0aW9ucy5naG9zdENsYXNzLCB0cnVlKTtcbiAgICAgIFNvcnRhYmxlLmFjdGl2ZSA9IHRoaXM7XG4gICAgICBmYWxsYmFjayAmJiB0aGlzLl9hcHBlbmRHaG9zdCgpOyAvLyBEcmFnIHN0YXJ0IGV2ZW50XG5cbiAgICAgIF9kaXNwYXRjaEV2ZW50KHtcbiAgICAgICAgc29ydGFibGU6IHRoaXMsXG4gICAgICAgIG5hbWU6ICdzdGFydCcsXG4gICAgICAgIG9yaWdpbmFsRXZlbnQ6IGV2dFxuICAgICAgfSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMuX251bGxpbmcoKTtcbiAgICB9XG4gIH0sXG4gIF9lbXVsYXRlRHJhZ092ZXI6IGZ1bmN0aW9uIF9lbXVsYXRlRHJhZ092ZXIoKSB7XG4gICAgaWYgKHRvdWNoRXZ0KSB7XG4gICAgICB0aGlzLl9sYXN0WCA9IHRvdWNoRXZ0LmNsaWVudFg7XG4gICAgICB0aGlzLl9sYXN0WSA9IHRvdWNoRXZ0LmNsaWVudFk7XG5cbiAgICAgIF9oaWRlR2hvc3RGb3JUYXJnZXQoKTtcblxuICAgICAgdmFyIHRhcmdldCA9IGRvY3VtZW50LmVsZW1lbnRGcm9tUG9pbnQodG91Y2hFdnQuY2xpZW50WCwgdG91Y2hFdnQuY2xpZW50WSk7XG4gICAgICB2YXIgcGFyZW50ID0gdGFyZ2V0O1xuXG4gICAgICB3aGlsZSAodGFyZ2V0ICYmIHRhcmdldC5zaGFkb3dSb290KSB7XG4gICAgICAgIHRhcmdldCA9IHRhcmdldC5zaGFkb3dSb290LmVsZW1lbnRGcm9tUG9pbnQodG91Y2hFdnQuY2xpZW50WCwgdG91Y2hFdnQuY2xpZW50WSk7XG4gICAgICAgIGlmICh0YXJnZXQgPT09IHBhcmVudCkgYnJlYWs7XG4gICAgICAgIHBhcmVudCA9IHRhcmdldDtcbiAgICAgIH1cblxuICAgICAgZHJhZ0VsLnBhcmVudE5vZGVbZXhwYW5kb10uX2lzT3V0c2lkZVRoaXNFbCh0YXJnZXQpO1xuXG4gICAgICBpZiAocGFyZW50KSB7XG4gICAgICAgIGRvIHtcbiAgICAgICAgICBpZiAocGFyZW50W2V4cGFuZG9dKSB7XG4gICAgICAgICAgICB2YXIgaW5zZXJ0ZWQgPSB2b2lkIDA7XG4gICAgICAgICAgICBpbnNlcnRlZCA9IHBhcmVudFtleHBhbmRvXS5fb25EcmFnT3Zlcih7XG4gICAgICAgICAgICAgIGNsaWVudFg6IHRvdWNoRXZ0LmNsaWVudFgsXG4gICAgICAgICAgICAgIGNsaWVudFk6IHRvdWNoRXZ0LmNsaWVudFksXG4gICAgICAgICAgICAgIHRhcmdldDogdGFyZ2V0LFxuICAgICAgICAgICAgICByb290RWw6IHBhcmVudFxuICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgIGlmIChpbnNlcnRlZCAmJiAhdGhpcy5vcHRpb25zLmRyYWdvdmVyQnViYmxlKSB7XG4gICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cblxuICAgICAgICAgIHRhcmdldCA9IHBhcmVudDsgLy8gc3RvcmUgbGFzdCBlbGVtZW50XG4gICAgICAgIH1cbiAgICAgICAgLyoganNoaW50IGJvc3M6dHJ1ZSAqL1xuICAgICAgICB3aGlsZSAocGFyZW50ID0gcGFyZW50LnBhcmVudE5vZGUpO1xuICAgICAgfVxuXG4gICAgICBfdW5oaWRlR2hvc3RGb3JUYXJnZXQoKTtcbiAgICB9XG4gIH0sXG4gIF9vblRvdWNoTW92ZTogZnVuY3Rpb24gX29uVG91Y2hNb3ZlKFxuICAvKipUb3VjaEV2ZW50Ki9cbiAgZXZ0KSB7XG4gICAgaWYgKHRhcEV2dCkge1xuICAgICAgdmFyIG9wdGlvbnMgPSB0aGlzLm9wdGlvbnMsXG4gICAgICAgICAgZmFsbGJhY2tUb2xlcmFuY2UgPSBvcHRpb25zLmZhbGxiYWNrVG9sZXJhbmNlLFxuICAgICAgICAgIGZhbGxiYWNrT2Zmc2V0ID0gb3B0aW9ucy5mYWxsYmFja09mZnNldCxcbiAgICAgICAgICB0b3VjaCA9IGV2dC50b3VjaGVzID8gZXZ0LnRvdWNoZXNbMF0gOiBldnQsXG4gICAgICAgICAgZ2hvc3RNYXRyaXggPSBnaG9zdEVsICYmIG1hdHJpeChnaG9zdEVsLCB0cnVlKSxcbiAgICAgICAgICBzY2FsZVggPSBnaG9zdEVsICYmIGdob3N0TWF0cml4ICYmIGdob3N0TWF0cml4LmEsXG4gICAgICAgICAgc2NhbGVZID0gZ2hvc3RFbCAmJiBnaG9zdE1hdHJpeCAmJiBnaG9zdE1hdHJpeC5kLFxuICAgICAgICAgIHJlbGF0aXZlU2Nyb2xsT2Zmc2V0ID0gUG9zaXRpb25HaG9zdEFic29sdXRlbHkgJiYgZ2hvc3RSZWxhdGl2ZVBhcmVudCAmJiBnZXRSZWxhdGl2ZVNjcm9sbE9mZnNldChnaG9zdFJlbGF0aXZlUGFyZW50KSxcbiAgICAgICAgICBkeCA9ICh0b3VjaC5jbGllbnRYIC0gdGFwRXZ0LmNsaWVudFggKyBmYWxsYmFja09mZnNldC54KSAvIChzY2FsZVggfHwgMSkgKyAocmVsYXRpdmVTY3JvbGxPZmZzZXQgPyByZWxhdGl2ZVNjcm9sbE9mZnNldFswXSAtIGdob3N0UmVsYXRpdmVQYXJlbnRJbml0aWFsU2Nyb2xsWzBdIDogMCkgLyAoc2NhbGVYIHx8IDEpLFxuICAgICAgICAgIGR5ID0gKHRvdWNoLmNsaWVudFkgLSB0YXBFdnQuY2xpZW50WSArIGZhbGxiYWNrT2Zmc2V0LnkpIC8gKHNjYWxlWSB8fCAxKSArIChyZWxhdGl2ZVNjcm9sbE9mZnNldCA/IHJlbGF0aXZlU2Nyb2xsT2Zmc2V0WzFdIC0gZ2hvc3RSZWxhdGl2ZVBhcmVudEluaXRpYWxTY3JvbGxbMV0gOiAwKSAvIChzY2FsZVkgfHwgMSk7IC8vIG9ubHkgc2V0IHRoZSBzdGF0dXMgdG8gZHJhZ2dpbmcsIHdoZW4gd2UgYXJlIGFjdHVhbGx5IGRyYWdnaW5nXG5cbiAgICAgIGlmICghU29ydGFibGUuYWN0aXZlICYmICFhd2FpdGluZ0RyYWdTdGFydGVkKSB7XG4gICAgICAgIGlmIChmYWxsYmFja1RvbGVyYW5jZSAmJiBNYXRoLm1heChNYXRoLmFicyh0b3VjaC5jbGllbnRYIC0gdGhpcy5fbGFzdFgpLCBNYXRoLmFicyh0b3VjaC5jbGllbnRZIC0gdGhpcy5fbGFzdFkpKSA8IGZhbGxiYWNrVG9sZXJhbmNlKSB7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy5fb25EcmFnU3RhcnQoZXZ0LCB0cnVlKTtcbiAgICAgIH1cblxuICAgICAgaWYgKGdob3N0RWwpIHtcbiAgICAgICAgaWYgKGdob3N0TWF0cml4KSB7XG4gICAgICAgICAgZ2hvc3RNYXRyaXguZSArPSBkeCAtIChsYXN0RHggfHwgMCk7XG4gICAgICAgICAgZ2hvc3RNYXRyaXguZiArPSBkeSAtIChsYXN0RHkgfHwgMCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgZ2hvc3RNYXRyaXggPSB7XG4gICAgICAgICAgICBhOiAxLFxuICAgICAgICAgICAgYjogMCxcbiAgICAgICAgICAgIGM6IDAsXG4gICAgICAgICAgICBkOiAxLFxuICAgICAgICAgICAgZTogZHgsXG4gICAgICAgICAgICBmOiBkeVxuICAgICAgICAgIH07XG4gICAgICAgIH1cblxuICAgICAgICB2YXIgY3NzTWF0cml4ID0gXCJtYXRyaXgoXCIuY29uY2F0KGdob3N0TWF0cml4LmEsIFwiLFwiKS5jb25jYXQoZ2hvc3RNYXRyaXguYiwgXCIsXCIpLmNvbmNhdChnaG9zdE1hdHJpeC5jLCBcIixcIikuY29uY2F0KGdob3N0TWF0cml4LmQsIFwiLFwiKS5jb25jYXQoZ2hvc3RNYXRyaXguZSwgXCIsXCIpLmNvbmNhdChnaG9zdE1hdHJpeC5mLCBcIilcIik7XG4gICAgICAgIGNzcyhnaG9zdEVsLCAnd2Via2l0VHJhbnNmb3JtJywgY3NzTWF0cml4KTtcbiAgICAgICAgY3NzKGdob3N0RWwsICdtb3pUcmFuc2Zvcm0nLCBjc3NNYXRyaXgpO1xuICAgICAgICBjc3MoZ2hvc3RFbCwgJ21zVHJhbnNmb3JtJywgY3NzTWF0cml4KTtcbiAgICAgICAgY3NzKGdob3N0RWwsICd0cmFuc2Zvcm0nLCBjc3NNYXRyaXgpO1xuICAgICAgICBsYXN0RHggPSBkeDtcbiAgICAgICAgbGFzdER5ID0gZHk7XG4gICAgICAgIHRvdWNoRXZ0ID0gdG91Y2g7XG4gICAgICB9XG5cbiAgICAgIGV2dC5jYW5jZWxhYmxlICYmIGV2dC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgIH1cbiAgfSxcbiAgX2FwcGVuZEdob3N0OiBmdW5jdGlvbiBfYXBwZW5kR2hvc3QoKSB7XG4gICAgLy8gQnVnIGlmIHVzaW5nIHNjYWxlKCk6IGh0dHBzOi8vc3RhY2tvdmVyZmxvdy5jb20vcXVlc3Rpb25zLzI2MzcwNThcbiAgICAvLyBOb3QgYmVpbmcgYWRqdXN0ZWQgZm9yXG4gICAgaWYgKCFnaG9zdEVsKSB7XG4gICAgICB2YXIgY29udGFpbmVyID0gdGhpcy5vcHRpb25zLmZhbGxiYWNrT25Cb2R5ID8gZG9jdW1lbnQuYm9keSA6IHJvb3RFbCxcbiAgICAgICAgICByZWN0ID0gZ2V0UmVjdChkcmFnRWwsIHRydWUsIFBvc2l0aW9uR2hvc3RBYnNvbHV0ZWx5LCB0cnVlLCBjb250YWluZXIpLFxuICAgICAgICAgIG9wdGlvbnMgPSB0aGlzLm9wdGlvbnM7IC8vIFBvc2l0aW9uIGFic29sdXRlbHlcblxuICAgICAgaWYgKFBvc2l0aW9uR2hvc3RBYnNvbHV0ZWx5KSB7XG4gICAgICAgIC8vIEdldCByZWxhdGl2ZWx5IHBvc2l0aW9uZWQgcGFyZW50XG4gICAgICAgIGdob3N0UmVsYXRpdmVQYXJlbnQgPSBjb250YWluZXI7XG5cbiAgICAgICAgd2hpbGUgKGNzcyhnaG9zdFJlbGF0aXZlUGFyZW50LCAncG9zaXRpb24nKSA9PT0gJ3N0YXRpYycgJiYgY3NzKGdob3N0UmVsYXRpdmVQYXJlbnQsICd0cmFuc2Zvcm0nKSA9PT0gJ25vbmUnICYmIGdob3N0UmVsYXRpdmVQYXJlbnQgIT09IGRvY3VtZW50KSB7XG4gICAgICAgICAgZ2hvc3RSZWxhdGl2ZVBhcmVudCA9IGdob3N0UmVsYXRpdmVQYXJlbnQucGFyZW50Tm9kZTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChnaG9zdFJlbGF0aXZlUGFyZW50ICE9PSBkb2N1bWVudC5ib2R5ICYmIGdob3N0UmVsYXRpdmVQYXJlbnQgIT09IGRvY3VtZW50LmRvY3VtZW50RWxlbWVudCkge1xuICAgICAgICAgIGlmIChnaG9zdFJlbGF0aXZlUGFyZW50ID09PSBkb2N1bWVudCkgZ2hvc3RSZWxhdGl2ZVBhcmVudCA9IGdldFdpbmRvd1Njcm9sbGluZ0VsZW1lbnQoKTtcbiAgICAgICAgICByZWN0LnRvcCArPSBnaG9zdFJlbGF0aXZlUGFyZW50LnNjcm9sbFRvcDtcbiAgICAgICAgICByZWN0LmxlZnQgKz0gZ2hvc3RSZWxhdGl2ZVBhcmVudC5zY3JvbGxMZWZ0O1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGdob3N0UmVsYXRpdmVQYXJlbnQgPSBnZXRXaW5kb3dTY3JvbGxpbmdFbGVtZW50KCk7XG4gICAgICAgIH1cblxuICAgICAgICBnaG9zdFJlbGF0aXZlUGFyZW50SW5pdGlhbFNjcm9sbCA9IGdldFJlbGF0aXZlU2Nyb2xsT2Zmc2V0KGdob3N0UmVsYXRpdmVQYXJlbnQpO1xuICAgICAgfVxuXG4gICAgICBnaG9zdEVsID0gZHJhZ0VsLmNsb25lTm9kZSh0cnVlKTtcbiAgICAgIHRvZ2dsZUNsYXNzKGdob3N0RWwsIG9wdGlvbnMuZ2hvc3RDbGFzcywgZmFsc2UpO1xuICAgICAgdG9nZ2xlQ2xhc3MoZ2hvc3RFbCwgb3B0aW9ucy5mYWxsYmFja0NsYXNzLCB0cnVlKTtcbiAgICAgIHRvZ2dsZUNsYXNzKGdob3N0RWwsIG9wdGlvbnMuZHJhZ0NsYXNzLCB0cnVlKTtcbiAgICAgIGNzcyhnaG9zdEVsLCAndHJhbnNpdGlvbicsICcnKTtcbiAgICAgIGNzcyhnaG9zdEVsLCAndHJhbnNmb3JtJywgJycpO1xuICAgICAgY3NzKGdob3N0RWwsICdib3gtc2l6aW5nJywgJ2JvcmRlci1ib3gnKTtcbiAgICAgIGNzcyhnaG9zdEVsLCAnbWFyZ2luJywgMCk7XG4gICAgICBjc3MoZ2hvc3RFbCwgJ3RvcCcsIHJlY3QudG9wKTtcbiAgICAgIGNzcyhnaG9zdEVsLCAnbGVmdCcsIHJlY3QubGVmdCk7XG4gICAgICBjc3MoZ2hvc3RFbCwgJ3dpZHRoJywgcmVjdC53aWR0aCk7XG4gICAgICBjc3MoZ2hvc3RFbCwgJ2hlaWdodCcsIHJlY3QuaGVpZ2h0KTtcbiAgICAgIGNzcyhnaG9zdEVsLCAnb3BhY2l0eScsICcwLjgnKTtcbiAgICAgIGNzcyhnaG9zdEVsLCAncG9zaXRpb24nLCBQb3NpdGlvbkdob3N0QWJzb2x1dGVseSA/ICdhYnNvbHV0ZScgOiAnZml4ZWQnKTtcbiAgICAgIGNzcyhnaG9zdEVsLCAnekluZGV4JywgJzEwMDAwMCcpO1xuICAgICAgY3NzKGdob3N0RWwsICdwb2ludGVyRXZlbnRzJywgJ25vbmUnKTtcbiAgICAgIFNvcnRhYmxlLmdob3N0ID0gZ2hvc3RFbDtcbiAgICAgIGNvbnRhaW5lci5hcHBlbmRDaGlsZChnaG9zdEVsKTsgLy8gU2V0IHRyYW5zZm9ybS1vcmlnaW5cblxuICAgICAgY3NzKGdob3N0RWwsICd0cmFuc2Zvcm0tb3JpZ2luJywgdGFwRGlzdGFuY2VMZWZ0IC8gcGFyc2VJbnQoZ2hvc3RFbC5zdHlsZS53aWR0aCkgKiAxMDAgKyAnJSAnICsgdGFwRGlzdGFuY2VUb3AgLyBwYXJzZUludChnaG9zdEVsLnN0eWxlLmhlaWdodCkgKiAxMDAgKyAnJScpO1xuICAgIH1cbiAgfSxcbiAgX29uRHJhZ1N0YXJ0OiBmdW5jdGlvbiBfb25EcmFnU3RhcnQoXG4gIC8qKkV2ZW50Ki9cbiAgZXZ0LFxuICAvKipib29sZWFuKi9cbiAgZmFsbGJhY2spIHtcbiAgICB2YXIgX3RoaXMgPSB0aGlzO1xuXG4gICAgdmFyIGRhdGFUcmFuc2ZlciA9IGV2dC5kYXRhVHJhbnNmZXI7XG4gICAgdmFyIG9wdGlvbnMgPSBfdGhpcy5vcHRpb25zO1xuICAgIHBsdWdpbkV2ZW50KCdkcmFnU3RhcnQnLCB0aGlzLCB7XG4gICAgICBldnQ6IGV2dFxuICAgIH0pO1xuXG4gICAgaWYgKFNvcnRhYmxlLmV2ZW50Q2FuY2VsZWQpIHtcbiAgICAgIHRoaXMuX29uRHJvcCgpO1xuXG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgcGx1Z2luRXZlbnQoJ3NldHVwQ2xvbmUnLCB0aGlzKTtcblxuICAgIGlmICghU29ydGFibGUuZXZlbnRDYW5jZWxlZCkge1xuICAgICAgY2xvbmVFbCA9IGNsb25lKGRyYWdFbCk7XG4gICAgICBjbG9uZUVsLnJlbW92ZUF0dHJpYnV0ZShcImlkXCIpO1xuICAgICAgY2xvbmVFbC5kcmFnZ2FibGUgPSBmYWxzZTtcbiAgICAgIGNsb25lRWwuc3R5bGVbJ3dpbGwtY2hhbmdlJ10gPSAnJztcblxuICAgICAgdGhpcy5faGlkZUNsb25lKCk7XG5cbiAgICAgIHRvZ2dsZUNsYXNzKGNsb25lRWwsIHRoaXMub3B0aW9ucy5jaG9zZW5DbGFzcywgZmFsc2UpO1xuICAgICAgU29ydGFibGUuY2xvbmUgPSBjbG9uZUVsO1xuICAgIH0gLy8gIzExNDM6IElGcmFtZSBzdXBwb3J0IHdvcmthcm91bmRcblxuXG4gICAgX3RoaXMuY2xvbmVJZCA9IF9uZXh0VGljayhmdW5jdGlvbiAoKSB7XG4gICAgICBwbHVnaW5FdmVudCgnY2xvbmUnLCBfdGhpcyk7XG4gICAgICBpZiAoU29ydGFibGUuZXZlbnRDYW5jZWxlZCkgcmV0dXJuO1xuXG4gICAgICBpZiAoIV90aGlzLm9wdGlvbnMucmVtb3ZlQ2xvbmVPbkhpZGUpIHtcbiAgICAgICAgcm9vdEVsLmluc2VydEJlZm9yZShjbG9uZUVsLCBkcmFnRWwpO1xuICAgICAgfVxuXG4gICAgICBfdGhpcy5faGlkZUNsb25lKCk7XG5cbiAgICAgIF9kaXNwYXRjaEV2ZW50KHtcbiAgICAgICAgc29ydGFibGU6IF90aGlzLFxuICAgICAgICBuYW1lOiAnY2xvbmUnXG4gICAgICB9KTtcbiAgICB9KTtcbiAgICAhZmFsbGJhY2sgJiYgdG9nZ2xlQ2xhc3MoZHJhZ0VsLCBvcHRpb25zLmRyYWdDbGFzcywgdHJ1ZSk7IC8vIFNldCBwcm9wZXIgZHJvcCBldmVudHNcblxuICAgIGlmIChmYWxsYmFjaykge1xuICAgICAgaWdub3JlTmV4dENsaWNrID0gdHJ1ZTtcbiAgICAgIF90aGlzLl9sb29wSWQgPSBzZXRJbnRlcnZhbChfdGhpcy5fZW11bGF0ZURyYWdPdmVyLCA1MCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIFVuZG8gd2hhdCB3YXMgc2V0IGluIF9wcmVwYXJlRHJhZ1N0YXJ0IGJlZm9yZSBkcmFnIHN0YXJ0ZWRcbiAgICAgIG9mZihkb2N1bWVudCwgJ21vdXNldXAnLCBfdGhpcy5fb25Ecm9wKTtcbiAgICAgIG9mZihkb2N1bWVudCwgJ3RvdWNoZW5kJywgX3RoaXMuX29uRHJvcCk7XG4gICAgICBvZmYoZG9jdW1lbnQsICd0b3VjaGNhbmNlbCcsIF90aGlzLl9vbkRyb3ApO1xuXG4gICAgICBpZiAoZGF0YVRyYW5zZmVyKSB7XG4gICAgICAgIGRhdGFUcmFuc2Zlci5lZmZlY3RBbGxvd2VkID0gJ21vdmUnO1xuICAgICAgICBvcHRpb25zLnNldERhdGEgJiYgb3B0aW9ucy5zZXREYXRhLmNhbGwoX3RoaXMsIGRhdGFUcmFuc2ZlciwgZHJhZ0VsKTtcbiAgICAgIH1cblxuICAgICAgb24oZG9jdW1lbnQsICdkcm9wJywgX3RoaXMpOyAvLyAjMTI3NiBmaXg6XG5cbiAgICAgIGNzcyhkcmFnRWwsICd0cmFuc2Zvcm0nLCAndHJhbnNsYXRlWigwKScpO1xuICAgIH1cblxuICAgIGF3YWl0aW5nRHJhZ1N0YXJ0ZWQgPSB0cnVlO1xuICAgIF90aGlzLl9kcmFnU3RhcnRJZCA9IF9uZXh0VGljayhfdGhpcy5fZHJhZ1N0YXJ0ZWQuYmluZChfdGhpcywgZmFsbGJhY2ssIGV2dCkpO1xuICAgIG9uKGRvY3VtZW50LCAnc2VsZWN0c3RhcnQnLCBfdGhpcyk7XG4gICAgbW92ZWQgPSB0cnVlO1xuXG4gICAgaWYgKFNhZmFyaSkge1xuICAgICAgY3NzKGRvY3VtZW50LmJvZHksICd1c2VyLXNlbGVjdCcsICdub25lJyk7XG4gICAgfVxuICB9LFxuICAvLyBSZXR1cm5zIHRydWUgLSBpZiBubyBmdXJ0aGVyIGFjdGlvbiBpcyBuZWVkZWQgKGVpdGhlciBpbnNlcnRlZCBvciBhbm90aGVyIGNvbmRpdGlvbilcbiAgX29uRHJhZ092ZXI6IGZ1bmN0aW9uIF9vbkRyYWdPdmVyKFxuICAvKipFdmVudCovXG4gIGV2dCkge1xuICAgIHZhciBlbCA9IHRoaXMuZWwsXG4gICAgICAgIHRhcmdldCA9IGV2dC50YXJnZXQsXG4gICAgICAgIGRyYWdSZWN0LFxuICAgICAgICB0YXJnZXRSZWN0LFxuICAgICAgICByZXZlcnQsXG4gICAgICAgIG9wdGlvbnMgPSB0aGlzLm9wdGlvbnMsXG4gICAgICAgIGdyb3VwID0gb3B0aW9ucy5ncm91cCxcbiAgICAgICAgYWN0aXZlU29ydGFibGUgPSBTb3J0YWJsZS5hY3RpdmUsXG4gICAgICAgIGlzT3duZXIgPSBhY3RpdmVHcm91cCA9PT0gZ3JvdXAsXG4gICAgICAgIGNhblNvcnQgPSBvcHRpb25zLnNvcnQsXG4gICAgICAgIGZyb21Tb3J0YWJsZSA9IHB1dFNvcnRhYmxlIHx8IGFjdGl2ZVNvcnRhYmxlLFxuICAgICAgICB2ZXJ0aWNhbCxcbiAgICAgICAgX3RoaXMgPSB0aGlzLFxuICAgICAgICBjb21wbGV0ZWRGaXJlZCA9IGZhbHNlO1xuXG4gICAgaWYgKF9zaWxlbnQpIHJldHVybjtcblxuICAgIGZ1bmN0aW9uIGRyYWdPdmVyRXZlbnQobmFtZSwgZXh0cmEpIHtcbiAgICAgIHBsdWdpbkV2ZW50KG5hbWUsIF90aGlzLCBfb2JqZWN0U3ByZWFkMih7XG4gICAgICAgIGV2dDogZXZ0LFxuICAgICAgICBpc093bmVyOiBpc093bmVyLFxuICAgICAgICBheGlzOiB2ZXJ0aWNhbCA/ICd2ZXJ0aWNhbCcgOiAnaG9yaXpvbnRhbCcsXG4gICAgICAgIHJldmVydDogcmV2ZXJ0LFxuICAgICAgICBkcmFnUmVjdDogZHJhZ1JlY3QsXG4gICAgICAgIHRhcmdldFJlY3Q6IHRhcmdldFJlY3QsXG4gICAgICAgIGNhblNvcnQ6IGNhblNvcnQsXG4gICAgICAgIGZyb21Tb3J0YWJsZTogZnJvbVNvcnRhYmxlLFxuICAgICAgICB0YXJnZXQ6IHRhcmdldCxcbiAgICAgICAgY29tcGxldGVkOiBjb21wbGV0ZWQsXG4gICAgICAgIG9uTW92ZTogZnVuY3Rpb24gb25Nb3ZlKHRhcmdldCwgYWZ0ZXIpIHtcbiAgICAgICAgICByZXR1cm4gX29uTW92ZShyb290RWwsIGVsLCBkcmFnRWwsIGRyYWdSZWN0LCB0YXJnZXQsIGdldFJlY3QodGFyZ2V0KSwgZXZ0LCBhZnRlcik7XG4gICAgICAgIH0sXG4gICAgICAgIGNoYW5nZWQ6IGNoYW5nZWRcbiAgICAgIH0sIGV4dHJhKSk7XG4gICAgfSAvLyBDYXB0dXJlIGFuaW1hdGlvbiBzdGF0ZVxuXG5cbiAgICBmdW5jdGlvbiBjYXB0dXJlKCkge1xuICAgICAgZHJhZ092ZXJFdmVudCgnZHJhZ092ZXJBbmltYXRpb25DYXB0dXJlJyk7XG5cbiAgICAgIF90aGlzLmNhcHR1cmVBbmltYXRpb25TdGF0ZSgpO1xuXG4gICAgICBpZiAoX3RoaXMgIT09IGZyb21Tb3J0YWJsZSkge1xuICAgICAgICBmcm9tU29ydGFibGUuY2FwdHVyZUFuaW1hdGlvblN0YXRlKCk7XG4gICAgICB9XG4gICAgfSAvLyBSZXR1cm4gaW52b2NhdGlvbiB3aGVuIGRyYWdFbCBpcyBpbnNlcnRlZCAob3IgY29tcGxldGVkKVxuXG5cbiAgICBmdW5jdGlvbiBjb21wbGV0ZWQoaW5zZXJ0aW9uKSB7XG4gICAgICBkcmFnT3ZlckV2ZW50KCdkcmFnT3ZlckNvbXBsZXRlZCcsIHtcbiAgICAgICAgaW5zZXJ0aW9uOiBpbnNlcnRpb25cbiAgICAgIH0pO1xuXG4gICAgICBpZiAoaW5zZXJ0aW9uKSB7XG4gICAgICAgIC8vIENsb25lcyBtdXN0IGJlIGhpZGRlbiBiZWZvcmUgZm9sZGluZyBhbmltYXRpb24gdG8gY2FwdHVyZSBkcmFnUmVjdEFic29sdXRlIHByb3Blcmx5XG4gICAgICAgIGlmIChpc093bmVyKSB7XG4gICAgICAgICAgYWN0aXZlU29ydGFibGUuX2hpZGVDbG9uZSgpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGFjdGl2ZVNvcnRhYmxlLl9zaG93Q2xvbmUoX3RoaXMpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKF90aGlzICE9PSBmcm9tU29ydGFibGUpIHtcbiAgICAgICAgICAvLyBTZXQgZ2hvc3QgY2xhc3MgdG8gbmV3IHNvcnRhYmxlJ3MgZ2hvc3QgY2xhc3NcbiAgICAgICAgICB0b2dnbGVDbGFzcyhkcmFnRWwsIHB1dFNvcnRhYmxlID8gcHV0U29ydGFibGUub3B0aW9ucy5naG9zdENsYXNzIDogYWN0aXZlU29ydGFibGUub3B0aW9ucy5naG9zdENsYXNzLCBmYWxzZSk7XG4gICAgICAgICAgdG9nZ2xlQ2xhc3MoZHJhZ0VsLCBvcHRpb25zLmdob3N0Q2xhc3MsIHRydWUpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHB1dFNvcnRhYmxlICE9PSBfdGhpcyAmJiBfdGhpcyAhPT0gU29ydGFibGUuYWN0aXZlKSB7XG4gICAgICAgICAgcHV0U29ydGFibGUgPSBfdGhpcztcbiAgICAgICAgfSBlbHNlIGlmIChfdGhpcyA9PT0gU29ydGFibGUuYWN0aXZlICYmIHB1dFNvcnRhYmxlKSB7XG4gICAgICAgICAgcHV0U29ydGFibGUgPSBudWxsO1xuICAgICAgICB9IC8vIEFuaW1hdGlvblxuXG5cbiAgICAgICAgaWYgKGZyb21Tb3J0YWJsZSA9PT0gX3RoaXMpIHtcbiAgICAgICAgICBfdGhpcy5faWdub3JlV2hpbGVBbmltYXRpbmcgPSB0YXJnZXQ7XG4gICAgICAgIH1cblxuICAgICAgICBfdGhpcy5hbmltYXRlQWxsKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICBkcmFnT3ZlckV2ZW50KCdkcmFnT3ZlckFuaW1hdGlvbkNvbXBsZXRlJyk7XG4gICAgICAgICAgX3RoaXMuX2lnbm9yZVdoaWxlQW5pbWF0aW5nID0gbnVsbDtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgaWYgKF90aGlzICE9PSBmcm9tU29ydGFibGUpIHtcbiAgICAgICAgICBmcm9tU29ydGFibGUuYW5pbWF0ZUFsbCgpO1xuICAgICAgICAgIGZyb21Tb3J0YWJsZS5faWdub3JlV2hpbGVBbmltYXRpbmcgPSBudWxsO1xuICAgICAgICB9XG4gICAgICB9IC8vIE51bGwgbGFzdFRhcmdldCBpZiBpdCBpcyBub3QgaW5zaWRlIGEgcHJldmlvdXNseSBzd2FwcGVkIGVsZW1lbnRcblxuXG4gICAgICBpZiAodGFyZ2V0ID09PSBkcmFnRWwgJiYgIWRyYWdFbC5hbmltYXRlZCB8fCB0YXJnZXQgPT09IGVsICYmICF0YXJnZXQuYW5pbWF0ZWQpIHtcbiAgICAgICAgbGFzdFRhcmdldCA9IG51bGw7XG4gICAgICB9IC8vIG5vIGJ1YmJsaW5nIGFuZCBub3QgZmFsbGJhY2tcblxuXG4gICAgICBpZiAoIW9wdGlvbnMuZHJhZ292ZXJCdWJibGUgJiYgIWV2dC5yb290RWwgJiYgdGFyZ2V0ICE9PSBkb2N1bWVudCkge1xuICAgICAgICBkcmFnRWwucGFyZW50Tm9kZVtleHBhbmRvXS5faXNPdXRzaWRlVGhpc0VsKGV2dC50YXJnZXQpOyAvLyBEbyBub3QgZGV0ZWN0IGZvciBlbXB0eSBpbnNlcnQgaWYgYWxyZWFkeSBpbnNlcnRlZFxuXG5cbiAgICAgICAgIWluc2VydGlvbiAmJiBuZWFyZXN0RW1wdHlJbnNlcnREZXRlY3RFdmVudChldnQpO1xuICAgICAgfVxuXG4gICAgICAhb3B0aW9ucy5kcmFnb3ZlckJ1YmJsZSAmJiBldnQuc3RvcFByb3BhZ2F0aW9uICYmIGV2dC5zdG9wUHJvcGFnYXRpb24oKTtcbiAgICAgIHJldHVybiBjb21wbGV0ZWRGaXJlZCA9IHRydWU7XG4gICAgfSAvLyBDYWxsIHdoZW4gZHJhZ0VsIGhhcyBiZWVuIGluc2VydGVkXG5cblxuICAgIGZ1bmN0aW9uIGNoYW5nZWQoKSB7XG4gICAgICBuZXdJbmRleCA9IGluZGV4KGRyYWdFbCk7XG4gICAgICBuZXdEcmFnZ2FibGVJbmRleCA9IGluZGV4KGRyYWdFbCwgb3B0aW9ucy5kcmFnZ2FibGUpO1xuXG4gICAgICBfZGlzcGF0Y2hFdmVudCh7XG4gICAgICAgIHNvcnRhYmxlOiBfdGhpcyxcbiAgICAgICAgbmFtZTogJ2NoYW5nZScsXG4gICAgICAgIHRvRWw6IGVsLFxuICAgICAgICBuZXdJbmRleDogbmV3SW5kZXgsXG4gICAgICAgIG5ld0RyYWdnYWJsZUluZGV4OiBuZXdEcmFnZ2FibGVJbmRleCxcbiAgICAgICAgb3JpZ2luYWxFdmVudDogZXZ0XG4gICAgICB9KTtcbiAgICB9XG5cbiAgICBpZiAoZXZ0LnByZXZlbnREZWZhdWx0ICE9PSB2b2lkIDApIHtcbiAgICAgIGV2dC5jYW5jZWxhYmxlICYmIGV2dC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgIH1cblxuICAgIHRhcmdldCA9IGNsb3Nlc3QodGFyZ2V0LCBvcHRpb25zLmRyYWdnYWJsZSwgZWwsIHRydWUpO1xuICAgIGRyYWdPdmVyRXZlbnQoJ2RyYWdPdmVyJyk7XG4gICAgaWYgKFNvcnRhYmxlLmV2ZW50Q2FuY2VsZWQpIHJldHVybiBjb21wbGV0ZWRGaXJlZDtcblxuICAgIGlmIChkcmFnRWwuY29udGFpbnMoZXZ0LnRhcmdldCkgfHwgdGFyZ2V0LmFuaW1hdGVkICYmIHRhcmdldC5hbmltYXRpbmdYICYmIHRhcmdldC5hbmltYXRpbmdZIHx8IF90aGlzLl9pZ25vcmVXaGlsZUFuaW1hdGluZyA9PT0gdGFyZ2V0KSB7XG4gICAgICByZXR1cm4gY29tcGxldGVkKGZhbHNlKTtcbiAgICB9XG5cbiAgICBpZ25vcmVOZXh0Q2xpY2sgPSBmYWxzZTtcblxuICAgIGlmIChhY3RpdmVTb3J0YWJsZSAmJiAhb3B0aW9ucy5kaXNhYmxlZCAmJiAoaXNPd25lciA/IGNhblNvcnQgfHwgKHJldmVydCA9IHBhcmVudEVsICE9PSByb290RWwpIC8vIFJldmVydGluZyBpdGVtIGludG8gdGhlIG9yaWdpbmFsIGxpc3RcbiAgICA6IHB1dFNvcnRhYmxlID09PSB0aGlzIHx8ICh0aGlzLmxhc3RQdXRNb2RlID0gYWN0aXZlR3JvdXAuY2hlY2tQdWxsKHRoaXMsIGFjdGl2ZVNvcnRhYmxlLCBkcmFnRWwsIGV2dCkpICYmIGdyb3VwLmNoZWNrUHV0KHRoaXMsIGFjdGl2ZVNvcnRhYmxlLCBkcmFnRWwsIGV2dCkpKSB7XG4gICAgICB2ZXJ0aWNhbCA9IHRoaXMuX2dldERpcmVjdGlvbihldnQsIHRhcmdldCkgPT09ICd2ZXJ0aWNhbCc7XG4gICAgICBkcmFnUmVjdCA9IGdldFJlY3QoZHJhZ0VsKTtcbiAgICAgIGRyYWdPdmVyRXZlbnQoJ2RyYWdPdmVyVmFsaWQnKTtcbiAgICAgIGlmIChTb3J0YWJsZS5ldmVudENhbmNlbGVkKSByZXR1cm4gY29tcGxldGVkRmlyZWQ7XG5cbiAgICAgIGlmIChyZXZlcnQpIHtcbiAgICAgICAgcGFyZW50RWwgPSByb290RWw7IC8vIGFjdHVhbGl6YXRpb25cblxuICAgICAgICBjYXB0dXJlKCk7XG5cbiAgICAgICAgdGhpcy5faGlkZUNsb25lKCk7XG5cbiAgICAgICAgZHJhZ092ZXJFdmVudCgncmV2ZXJ0Jyk7XG5cbiAgICAgICAgaWYgKCFTb3J0YWJsZS5ldmVudENhbmNlbGVkKSB7XG4gICAgICAgICAgaWYgKG5leHRFbCkge1xuICAgICAgICAgICAgcm9vdEVsLmluc2VydEJlZm9yZShkcmFnRWwsIG5leHRFbCk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJvb3RFbC5hcHBlbmRDaGlsZChkcmFnRWwpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBjb21wbGV0ZWQodHJ1ZSk7XG4gICAgICB9XG5cbiAgICAgIHZhciBlbExhc3RDaGlsZCA9IGxhc3RDaGlsZChlbCwgb3B0aW9ucy5kcmFnZ2FibGUpO1xuXG4gICAgICBpZiAoIWVsTGFzdENoaWxkIHx8IF9naG9zdElzTGFzdChldnQsIHZlcnRpY2FsLCB0aGlzKSAmJiAhZWxMYXN0Q2hpbGQuYW5pbWF0ZWQpIHtcbiAgICAgICAgLy8gSW5zZXJ0IHRvIGVuZCBvZiBsaXN0XG4gICAgICAgIC8vIElmIGFscmVhZHkgYXQgZW5kIG9mIGxpc3Q6IERvIG5vdCBpbnNlcnRcbiAgICAgICAgaWYgKGVsTGFzdENoaWxkID09PSBkcmFnRWwpIHtcbiAgICAgICAgICByZXR1cm4gY29tcGxldGVkKGZhbHNlKTtcbiAgICAgICAgfSAvLyBpZiB0aGVyZSBpcyBhIGxhc3QgZWxlbWVudCwgaXQgaXMgdGhlIHRhcmdldFxuXG5cbiAgICAgICAgaWYgKGVsTGFzdENoaWxkICYmIGVsID09PSBldnQudGFyZ2V0KSB7XG4gICAgICAgICAgdGFyZ2V0ID0gZWxMYXN0Q2hpbGQ7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAodGFyZ2V0KSB7XG4gICAgICAgICAgdGFyZ2V0UmVjdCA9IGdldFJlY3QodGFyZ2V0KTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChfb25Nb3ZlKHJvb3RFbCwgZWwsIGRyYWdFbCwgZHJhZ1JlY3QsIHRhcmdldCwgdGFyZ2V0UmVjdCwgZXZ0LCAhIXRhcmdldCkgIT09IGZhbHNlKSB7XG4gICAgICAgICAgY2FwdHVyZSgpO1xuXG4gICAgICAgICAgaWYgKGVsTGFzdENoaWxkICYmIGVsTGFzdENoaWxkLm5leHRTaWJsaW5nKSB7XG4gICAgICAgICAgICAvLyB0aGUgbGFzdCBkcmFnZ2FibGUgZWxlbWVudCBpcyBub3QgdGhlIGxhc3Qgbm9kZVxuICAgICAgICAgICAgZWwuaW5zZXJ0QmVmb3JlKGRyYWdFbCwgZWxMYXN0Q2hpbGQubmV4dFNpYmxpbmcpO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBlbC5hcHBlbmRDaGlsZChkcmFnRWwpO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIHBhcmVudEVsID0gZWw7IC8vIGFjdHVhbGl6YXRpb25cblxuICAgICAgICAgIGNoYW5nZWQoKTtcbiAgICAgICAgICByZXR1cm4gY29tcGxldGVkKHRydWUpO1xuICAgICAgICB9XG4gICAgICB9IGVsc2UgaWYgKGVsTGFzdENoaWxkICYmIF9naG9zdElzRmlyc3QoZXZ0LCB2ZXJ0aWNhbCwgdGhpcykpIHtcbiAgICAgICAgLy8gSW5zZXJ0IHRvIHN0YXJ0IG9mIGxpc3RcbiAgICAgICAgdmFyIGZpcnN0Q2hpbGQgPSBnZXRDaGlsZChlbCwgMCwgb3B0aW9ucywgdHJ1ZSk7XG5cbiAgICAgICAgaWYgKGZpcnN0Q2hpbGQgPT09IGRyYWdFbCkge1xuICAgICAgICAgIHJldHVybiBjb21wbGV0ZWQoZmFsc2UpO1xuICAgICAgICB9XG5cbiAgICAgICAgdGFyZ2V0ID0gZmlyc3RDaGlsZDtcbiAgICAgICAgdGFyZ2V0UmVjdCA9IGdldFJlY3QodGFyZ2V0KTtcblxuICAgICAgICBpZiAoX29uTW92ZShyb290RWwsIGVsLCBkcmFnRWwsIGRyYWdSZWN0LCB0YXJnZXQsIHRhcmdldFJlY3QsIGV2dCwgZmFsc2UpICE9PSBmYWxzZSkge1xuICAgICAgICAgIGNhcHR1cmUoKTtcbiAgICAgICAgICBlbC5pbnNlcnRCZWZvcmUoZHJhZ0VsLCBmaXJzdENoaWxkKTtcbiAgICAgICAgICBwYXJlbnRFbCA9IGVsOyAvLyBhY3R1YWxpemF0aW9uXG5cbiAgICAgICAgICBjaGFuZ2VkKCk7XG4gICAgICAgICAgcmV0dXJuIGNvbXBsZXRlZCh0cnVlKTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIGlmICh0YXJnZXQucGFyZW50Tm9kZSA9PT0gZWwpIHtcbiAgICAgICAgdGFyZ2V0UmVjdCA9IGdldFJlY3QodGFyZ2V0KTtcbiAgICAgICAgdmFyIGRpcmVjdGlvbiA9IDAsXG4gICAgICAgICAgICB0YXJnZXRCZWZvcmVGaXJzdFN3YXAsXG4gICAgICAgICAgICBkaWZmZXJlbnRMZXZlbCA9IGRyYWdFbC5wYXJlbnROb2RlICE9PSBlbCxcbiAgICAgICAgICAgIGRpZmZlcmVudFJvd0NvbCA9ICFfZHJhZ0VsSW5Sb3dDb2x1bW4oZHJhZ0VsLmFuaW1hdGVkICYmIGRyYWdFbC50b1JlY3QgfHwgZHJhZ1JlY3QsIHRhcmdldC5hbmltYXRlZCAmJiB0YXJnZXQudG9SZWN0IHx8IHRhcmdldFJlY3QsIHZlcnRpY2FsKSxcbiAgICAgICAgICAgIHNpZGUxID0gdmVydGljYWwgPyAndG9wJyA6ICdsZWZ0JyxcbiAgICAgICAgICAgIHNjcm9sbGVkUGFzdFRvcCA9IGlzU2Nyb2xsZWRQYXN0KHRhcmdldCwgJ3RvcCcsICd0b3AnKSB8fCBpc1Njcm9sbGVkUGFzdChkcmFnRWwsICd0b3AnLCAndG9wJyksXG4gICAgICAgICAgICBzY3JvbGxCZWZvcmUgPSBzY3JvbGxlZFBhc3RUb3AgPyBzY3JvbGxlZFBhc3RUb3Auc2Nyb2xsVG9wIDogdm9pZCAwO1xuXG4gICAgICAgIGlmIChsYXN0VGFyZ2V0ICE9PSB0YXJnZXQpIHtcbiAgICAgICAgICB0YXJnZXRCZWZvcmVGaXJzdFN3YXAgPSB0YXJnZXRSZWN0W3NpZGUxXTtcbiAgICAgICAgICBwYXN0Rmlyc3RJbnZlcnRUaHJlc2ggPSBmYWxzZTtcbiAgICAgICAgICBpc0NpcmN1bXN0YW50aWFsSW52ZXJ0ID0gIWRpZmZlcmVudFJvd0NvbCAmJiBvcHRpb25zLmludmVydFN3YXAgfHwgZGlmZmVyZW50TGV2ZWw7XG4gICAgICAgIH1cblxuICAgICAgICBkaXJlY3Rpb24gPSBfZ2V0U3dhcERpcmVjdGlvbihldnQsIHRhcmdldCwgdGFyZ2V0UmVjdCwgdmVydGljYWwsIGRpZmZlcmVudFJvd0NvbCA/IDEgOiBvcHRpb25zLnN3YXBUaHJlc2hvbGQsIG9wdGlvbnMuaW52ZXJ0ZWRTd2FwVGhyZXNob2xkID09IG51bGwgPyBvcHRpb25zLnN3YXBUaHJlc2hvbGQgOiBvcHRpb25zLmludmVydGVkU3dhcFRocmVzaG9sZCwgaXNDaXJjdW1zdGFudGlhbEludmVydCwgbGFzdFRhcmdldCA9PT0gdGFyZ2V0KTtcbiAgICAgICAgdmFyIHNpYmxpbmc7XG5cbiAgICAgICAgaWYgKGRpcmVjdGlvbiAhPT0gMCkge1xuICAgICAgICAgIC8vIENoZWNrIGlmIHRhcmdldCBpcyBiZXNpZGUgZHJhZ0VsIGluIHJlc3BlY3RpdmUgZGlyZWN0aW9uIChpZ25vcmluZyBoaWRkZW4gZWxlbWVudHMpXG4gICAgICAgICAgdmFyIGRyYWdJbmRleCA9IGluZGV4KGRyYWdFbCk7XG5cbiAgICAgICAgICBkbyB7XG4gICAgICAgICAgICBkcmFnSW5kZXggLT0gZGlyZWN0aW9uO1xuICAgICAgICAgICAgc2libGluZyA9IHBhcmVudEVsLmNoaWxkcmVuW2RyYWdJbmRleF07XG4gICAgICAgICAgfSB3aGlsZSAoc2libGluZyAmJiAoY3NzKHNpYmxpbmcsICdkaXNwbGF5JykgPT09ICdub25lJyB8fCBzaWJsaW5nID09PSBnaG9zdEVsKSk7XG4gICAgICAgIH0gLy8gSWYgZHJhZ0VsIGlzIGFscmVhZHkgYmVzaWRlIHRhcmdldDogRG8gbm90IGluc2VydFxuXG5cbiAgICAgICAgaWYgKGRpcmVjdGlvbiA9PT0gMCB8fCBzaWJsaW5nID09PSB0YXJnZXQpIHtcbiAgICAgICAgICByZXR1cm4gY29tcGxldGVkKGZhbHNlKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGxhc3RUYXJnZXQgPSB0YXJnZXQ7XG4gICAgICAgIGxhc3REaXJlY3Rpb24gPSBkaXJlY3Rpb247XG4gICAgICAgIHZhciBuZXh0U2libGluZyA9IHRhcmdldC5uZXh0RWxlbWVudFNpYmxpbmcsXG4gICAgICAgICAgICBhZnRlciA9IGZhbHNlO1xuICAgICAgICBhZnRlciA9IGRpcmVjdGlvbiA9PT0gMTtcblxuICAgICAgICB2YXIgbW92ZVZlY3RvciA9IF9vbk1vdmUocm9vdEVsLCBlbCwgZHJhZ0VsLCBkcmFnUmVjdCwgdGFyZ2V0LCB0YXJnZXRSZWN0LCBldnQsIGFmdGVyKTtcblxuICAgICAgICBpZiAobW92ZVZlY3RvciAhPT0gZmFsc2UpIHtcbiAgICAgICAgICBpZiAobW92ZVZlY3RvciA9PT0gMSB8fCBtb3ZlVmVjdG9yID09PSAtMSkge1xuICAgICAgICAgICAgYWZ0ZXIgPSBtb3ZlVmVjdG9yID09PSAxO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIF9zaWxlbnQgPSB0cnVlO1xuICAgICAgICAgIHNldFRpbWVvdXQoX3Vuc2lsZW50LCAzMCk7XG4gICAgICAgICAgY2FwdHVyZSgpO1xuXG4gICAgICAgICAgaWYgKGFmdGVyICYmICFuZXh0U2libGluZykge1xuICAgICAgICAgICAgZWwuYXBwZW5kQ2hpbGQoZHJhZ0VsKTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGFyZ2V0LnBhcmVudE5vZGUuaW5zZXJ0QmVmb3JlKGRyYWdFbCwgYWZ0ZXIgPyBuZXh0U2libGluZyA6IHRhcmdldCk7XG4gICAgICAgICAgfSAvLyBVbmRvIGNocm9tZSdzIHNjcm9sbCBhZGp1c3RtZW50IChoYXMgbm8gZWZmZWN0IG9uIG90aGVyIGJyb3dzZXJzKVxuXG5cbiAgICAgICAgICBpZiAoc2Nyb2xsZWRQYXN0VG9wKSB7XG4gICAgICAgICAgICBzY3JvbGxCeShzY3JvbGxlZFBhc3RUb3AsIDAsIHNjcm9sbEJlZm9yZSAtIHNjcm9sbGVkUGFzdFRvcC5zY3JvbGxUb3ApO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIHBhcmVudEVsID0gZHJhZ0VsLnBhcmVudE5vZGU7IC8vIGFjdHVhbGl6YXRpb25cbiAgICAgICAgICAvLyBtdXN0IGJlIGRvbmUgYmVmb3JlIGFuaW1hdGlvblxuXG4gICAgICAgICAgaWYgKHRhcmdldEJlZm9yZUZpcnN0U3dhcCAhPT0gdW5kZWZpbmVkICYmICFpc0NpcmN1bXN0YW50aWFsSW52ZXJ0KSB7XG4gICAgICAgICAgICB0YXJnZXRNb3ZlRGlzdGFuY2UgPSBNYXRoLmFicyh0YXJnZXRCZWZvcmVGaXJzdFN3YXAgLSBnZXRSZWN0KHRhcmdldClbc2lkZTFdKTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBjaGFuZ2VkKCk7XG4gICAgICAgICAgcmV0dXJuIGNvbXBsZXRlZCh0cnVlKTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBpZiAoZWwuY29udGFpbnMoZHJhZ0VsKSkge1xuICAgICAgICByZXR1cm4gY29tcGxldGVkKGZhbHNlKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gZmFsc2U7XG4gIH0sXG4gIF9pZ25vcmVXaGlsZUFuaW1hdGluZzogbnVsbCxcbiAgX29mZk1vdmVFdmVudHM6IGZ1bmN0aW9uIF9vZmZNb3ZlRXZlbnRzKCkge1xuICAgIG9mZihkb2N1bWVudCwgJ21vdXNlbW92ZScsIHRoaXMuX29uVG91Y2hNb3ZlKTtcbiAgICBvZmYoZG9jdW1lbnQsICd0b3VjaG1vdmUnLCB0aGlzLl9vblRvdWNoTW92ZSk7XG4gICAgb2ZmKGRvY3VtZW50LCAncG9pbnRlcm1vdmUnLCB0aGlzLl9vblRvdWNoTW92ZSk7XG4gICAgb2ZmKGRvY3VtZW50LCAnZHJhZ292ZXInLCBuZWFyZXN0RW1wdHlJbnNlcnREZXRlY3RFdmVudCk7XG4gICAgb2ZmKGRvY3VtZW50LCAnbW91c2Vtb3ZlJywgbmVhcmVzdEVtcHR5SW5zZXJ0RGV0ZWN0RXZlbnQpO1xuICAgIG9mZihkb2N1bWVudCwgJ3RvdWNobW92ZScsIG5lYXJlc3RFbXB0eUluc2VydERldGVjdEV2ZW50KTtcbiAgfSxcbiAgX29mZlVwRXZlbnRzOiBmdW5jdGlvbiBfb2ZmVXBFdmVudHMoKSB7XG4gICAgdmFyIG93bmVyRG9jdW1lbnQgPSB0aGlzLmVsLm93bmVyRG9jdW1lbnQ7XG4gICAgb2ZmKG93bmVyRG9jdW1lbnQsICdtb3VzZXVwJywgdGhpcy5fb25Ecm9wKTtcbiAgICBvZmYob3duZXJEb2N1bWVudCwgJ3RvdWNoZW5kJywgdGhpcy5fb25Ecm9wKTtcbiAgICBvZmYob3duZXJEb2N1bWVudCwgJ3BvaW50ZXJ1cCcsIHRoaXMuX29uRHJvcCk7XG4gICAgb2ZmKG93bmVyRG9jdW1lbnQsICd0b3VjaGNhbmNlbCcsIHRoaXMuX29uRHJvcCk7XG4gICAgb2ZmKGRvY3VtZW50LCAnc2VsZWN0c3RhcnQnLCB0aGlzKTtcbiAgfSxcbiAgX29uRHJvcDogZnVuY3Rpb24gX29uRHJvcChcbiAgLyoqRXZlbnQqL1xuICBldnQpIHtcbiAgICB2YXIgZWwgPSB0aGlzLmVsLFxuICAgICAgICBvcHRpb25zID0gdGhpcy5vcHRpb25zOyAvLyBHZXQgdGhlIGluZGV4IG9mIHRoZSBkcmFnZ2VkIGVsZW1lbnQgd2l0aGluIGl0cyBwYXJlbnRcblxuICAgIG5ld0luZGV4ID0gaW5kZXgoZHJhZ0VsKTtcbiAgICBuZXdEcmFnZ2FibGVJbmRleCA9IGluZGV4KGRyYWdFbCwgb3B0aW9ucy5kcmFnZ2FibGUpO1xuICAgIHBsdWdpbkV2ZW50KCdkcm9wJywgdGhpcywge1xuICAgICAgZXZ0OiBldnRcbiAgICB9KTtcbiAgICBwYXJlbnRFbCA9IGRyYWdFbCAmJiBkcmFnRWwucGFyZW50Tm9kZTsgLy8gR2V0IGFnYWluIGFmdGVyIHBsdWdpbiBldmVudFxuXG4gICAgbmV3SW5kZXggPSBpbmRleChkcmFnRWwpO1xuICAgIG5ld0RyYWdnYWJsZUluZGV4ID0gaW5kZXgoZHJhZ0VsLCBvcHRpb25zLmRyYWdnYWJsZSk7XG5cbiAgICBpZiAoU29ydGFibGUuZXZlbnRDYW5jZWxlZCkge1xuICAgICAgdGhpcy5fbnVsbGluZygpO1xuXG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgYXdhaXRpbmdEcmFnU3RhcnRlZCA9IGZhbHNlO1xuICAgIGlzQ2lyY3Vtc3RhbnRpYWxJbnZlcnQgPSBmYWxzZTtcbiAgICBwYXN0Rmlyc3RJbnZlcnRUaHJlc2ggPSBmYWxzZTtcbiAgICBjbGVhckludGVydmFsKHRoaXMuX2xvb3BJZCk7XG4gICAgY2xlYXJUaW1lb3V0KHRoaXMuX2RyYWdTdGFydFRpbWVyKTtcblxuICAgIF9jYW5jZWxOZXh0VGljayh0aGlzLmNsb25lSWQpO1xuXG4gICAgX2NhbmNlbE5leHRUaWNrKHRoaXMuX2RyYWdTdGFydElkKTsgLy8gVW5iaW5kIGV2ZW50c1xuXG5cbiAgICBpZiAodGhpcy5uYXRpdmVEcmFnZ2FibGUpIHtcbiAgICAgIG9mZihkb2N1bWVudCwgJ2Ryb3AnLCB0aGlzKTtcbiAgICAgIG9mZihlbCwgJ2RyYWdzdGFydCcsIHRoaXMuX29uRHJhZ1N0YXJ0KTtcbiAgICB9XG5cbiAgICB0aGlzLl9vZmZNb3ZlRXZlbnRzKCk7XG5cbiAgICB0aGlzLl9vZmZVcEV2ZW50cygpO1xuXG4gICAgaWYgKFNhZmFyaSkge1xuICAgICAgY3NzKGRvY3VtZW50LmJvZHksICd1c2VyLXNlbGVjdCcsICcnKTtcbiAgICB9XG5cbiAgICBjc3MoZHJhZ0VsLCAndHJhbnNmb3JtJywgJycpO1xuXG4gICAgaWYgKGV2dCkge1xuICAgICAgaWYgKG1vdmVkKSB7XG4gICAgICAgIGV2dC5jYW5jZWxhYmxlICYmIGV2dC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICAhb3B0aW9ucy5kcm9wQnViYmxlICYmIGV2dC5zdG9wUHJvcGFnYXRpb24oKTtcbiAgICAgIH1cblxuICAgICAgZ2hvc3RFbCAmJiBnaG9zdEVsLnBhcmVudE5vZGUgJiYgZ2hvc3RFbC5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKGdob3N0RWwpO1xuXG4gICAgICBpZiAocm9vdEVsID09PSBwYXJlbnRFbCB8fCBwdXRTb3J0YWJsZSAmJiBwdXRTb3J0YWJsZS5sYXN0UHV0TW9kZSAhPT0gJ2Nsb25lJykge1xuICAgICAgICAvLyBSZW1vdmUgY2xvbmUocylcbiAgICAgICAgY2xvbmVFbCAmJiBjbG9uZUVsLnBhcmVudE5vZGUgJiYgY2xvbmVFbC5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKGNsb25lRWwpO1xuICAgICAgfVxuXG4gICAgICBpZiAoZHJhZ0VsKSB7XG4gICAgICAgIGlmICh0aGlzLm5hdGl2ZURyYWdnYWJsZSkge1xuICAgICAgICAgIG9mZihkcmFnRWwsICdkcmFnZW5kJywgdGhpcyk7XG4gICAgICAgIH1cblxuICAgICAgICBfZGlzYWJsZURyYWdnYWJsZShkcmFnRWwpO1xuXG4gICAgICAgIGRyYWdFbC5zdHlsZVsnd2lsbC1jaGFuZ2UnXSA9ICcnOyAvLyBSZW1vdmUgY2xhc3Nlc1xuICAgICAgICAvLyBnaG9zdENsYXNzIGlzIGFkZGVkIGluIGRyYWdTdGFydGVkXG5cbiAgICAgICAgaWYgKG1vdmVkICYmICFhd2FpdGluZ0RyYWdTdGFydGVkKSB7XG4gICAgICAgICAgdG9nZ2xlQ2xhc3MoZHJhZ0VsLCBwdXRTb3J0YWJsZSA/IHB1dFNvcnRhYmxlLm9wdGlvbnMuZ2hvc3RDbGFzcyA6IHRoaXMub3B0aW9ucy5naG9zdENsYXNzLCBmYWxzZSk7XG4gICAgICAgIH1cblxuICAgICAgICB0b2dnbGVDbGFzcyhkcmFnRWwsIHRoaXMub3B0aW9ucy5jaG9zZW5DbGFzcywgZmFsc2UpOyAvLyBEcmFnIHN0b3AgZXZlbnRcblxuICAgICAgICBfZGlzcGF0Y2hFdmVudCh7XG4gICAgICAgICAgc29ydGFibGU6IHRoaXMsXG4gICAgICAgICAgbmFtZTogJ3VuY2hvb3NlJyxcbiAgICAgICAgICB0b0VsOiBwYXJlbnRFbCxcbiAgICAgICAgICBuZXdJbmRleDogbnVsbCxcbiAgICAgICAgICBuZXdEcmFnZ2FibGVJbmRleDogbnVsbCxcbiAgICAgICAgICBvcmlnaW5hbEV2ZW50OiBldnRcbiAgICAgICAgfSk7XG5cbiAgICAgICAgaWYgKHJvb3RFbCAhPT0gcGFyZW50RWwpIHtcbiAgICAgICAgICBpZiAobmV3SW5kZXggPj0gMCkge1xuICAgICAgICAgICAgLy8gQWRkIGV2ZW50XG4gICAgICAgICAgICBfZGlzcGF0Y2hFdmVudCh7XG4gICAgICAgICAgICAgIHJvb3RFbDogcGFyZW50RWwsXG4gICAgICAgICAgICAgIG5hbWU6ICdhZGQnLFxuICAgICAgICAgICAgICB0b0VsOiBwYXJlbnRFbCxcbiAgICAgICAgICAgICAgZnJvbUVsOiByb290RWwsXG4gICAgICAgICAgICAgIG9yaWdpbmFsRXZlbnQ6IGV2dFxuICAgICAgICAgICAgfSk7IC8vIFJlbW92ZSBldmVudFxuXG5cbiAgICAgICAgICAgIF9kaXNwYXRjaEV2ZW50KHtcbiAgICAgICAgICAgICAgc29ydGFibGU6IHRoaXMsXG4gICAgICAgICAgICAgIG5hbWU6ICdyZW1vdmUnLFxuICAgICAgICAgICAgICB0b0VsOiBwYXJlbnRFbCxcbiAgICAgICAgICAgICAgb3JpZ2luYWxFdmVudDogZXZ0XG4gICAgICAgICAgICB9KTsgLy8gZHJhZyBmcm9tIG9uZSBsaXN0IGFuZCBkcm9wIGludG8gYW5vdGhlclxuXG5cbiAgICAgICAgICAgIF9kaXNwYXRjaEV2ZW50KHtcbiAgICAgICAgICAgICAgcm9vdEVsOiBwYXJlbnRFbCxcbiAgICAgICAgICAgICAgbmFtZTogJ3NvcnQnLFxuICAgICAgICAgICAgICB0b0VsOiBwYXJlbnRFbCxcbiAgICAgICAgICAgICAgZnJvbUVsOiByb290RWwsXG4gICAgICAgICAgICAgIG9yaWdpbmFsRXZlbnQ6IGV2dFxuICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgIF9kaXNwYXRjaEV2ZW50KHtcbiAgICAgICAgICAgICAgc29ydGFibGU6IHRoaXMsXG4gICAgICAgICAgICAgIG5hbWU6ICdzb3J0JyxcbiAgICAgICAgICAgICAgdG9FbDogcGFyZW50RWwsXG4gICAgICAgICAgICAgIG9yaWdpbmFsRXZlbnQ6IGV2dFxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgcHV0U29ydGFibGUgJiYgcHV0U29ydGFibGUuc2F2ZSgpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGlmIChuZXdJbmRleCAhPT0gb2xkSW5kZXgpIHtcbiAgICAgICAgICAgIGlmIChuZXdJbmRleCA+PSAwKSB7XG4gICAgICAgICAgICAgIC8vIGRyYWcgJiBkcm9wIHdpdGhpbiB0aGUgc2FtZSBsaXN0XG4gICAgICAgICAgICAgIF9kaXNwYXRjaEV2ZW50KHtcbiAgICAgICAgICAgICAgICBzb3J0YWJsZTogdGhpcyxcbiAgICAgICAgICAgICAgICBuYW1lOiAndXBkYXRlJyxcbiAgICAgICAgICAgICAgICB0b0VsOiBwYXJlbnRFbCxcbiAgICAgICAgICAgICAgICBvcmlnaW5hbEV2ZW50OiBldnRcbiAgICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgICAgX2Rpc3BhdGNoRXZlbnQoe1xuICAgICAgICAgICAgICAgIHNvcnRhYmxlOiB0aGlzLFxuICAgICAgICAgICAgICAgIG5hbWU6ICdzb3J0JyxcbiAgICAgICAgICAgICAgICB0b0VsOiBwYXJlbnRFbCxcbiAgICAgICAgICAgICAgICBvcmlnaW5hbEV2ZW50OiBldnRcbiAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgaWYgKFNvcnRhYmxlLmFjdGl2ZSkge1xuICAgICAgICAgIC8qIGpzaGludCBlcW51bGw6dHJ1ZSAqL1xuICAgICAgICAgIGlmIChuZXdJbmRleCA9PSBudWxsIHx8IG5ld0luZGV4ID09PSAtMSkge1xuICAgICAgICAgICAgbmV3SW5kZXggPSBvbGRJbmRleDtcbiAgICAgICAgICAgIG5ld0RyYWdnYWJsZUluZGV4ID0gb2xkRHJhZ2dhYmxlSW5kZXg7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgX2Rpc3BhdGNoRXZlbnQoe1xuICAgICAgICAgICAgc29ydGFibGU6IHRoaXMsXG4gICAgICAgICAgICBuYW1lOiAnZW5kJyxcbiAgICAgICAgICAgIHRvRWw6IHBhcmVudEVsLFxuICAgICAgICAgICAgb3JpZ2luYWxFdmVudDogZXZ0XG4gICAgICAgICAgfSk7IC8vIFNhdmUgc29ydGluZ1xuXG5cbiAgICAgICAgICB0aGlzLnNhdmUoKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIHRoaXMuX251bGxpbmcoKTtcbiAgfSxcbiAgX251bGxpbmc6IGZ1bmN0aW9uIF9udWxsaW5nKCkge1xuICAgIHBsdWdpbkV2ZW50KCdudWxsaW5nJywgdGhpcyk7XG4gICAgcm9vdEVsID0gZHJhZ0VsID0gcGFyZW50RWwgPSBnaG9zdEVsID0gbmV4dEVsID0gY2xvbmVFbCA9IGxhc3REb3duRWwgPSBjbG9uZUhpZGRlbiA9IHRhcEV2dCA9IHRvdWNoRXZ0ID0gbW92ZWQgPSBuZXdJbmRleCA9IG5ld0RyYWdnYWJsZUluZGV4ID0gb2xkSW5kZXggPSBvbGREcmFnZ2FibGVJbmRleCA9IGxhc3RUYXJnZXQgPSBsYXN0RGlyZWN0aW9uID0gcHV0U29ydGFibGUgPSBhY3RpdmVHcm91cCA9IFNvcnRhYmxlLmRyYWdnZWQgPSBTb3J0YWJsZS5naG9zdCA9IFNvcnRhYmxlLmNsb25lID0gU29ydGFibGUuYWN0aXZlID0gbnVsbDtcbiAgICBzYXZlZElucHV0Q2hlY2tlZC5mb3JFYWNoKGZ1bmN0aW9uIChlbCkge1xuICAgICAgZWwuY2hlY2tlZCA9IHRydWU7XG4gICAgfSk7XG4gICAgc2F2ZWRJbnB1dENoZWNrZWQubGVuZ3RoID0gbGFzdER4ID0gbGFzdER5ID0gMDtcbiAgfSxcbiAgaGFuZGxlRXZlbnQ6IGZ1bmN0aW9uIGhhbmRsZUV2ZW50KFxuICAvKipFdmVudCovXG4gIGV2dCkge1xuICAgIHN3aXRjaCAoZXZ0LnR5cGUpIHtcbiAgICAgIGNhc2UgJ2Ryb3AnOlxuICAgICAgY2FzZSAnZHJhZ2VuZCc6XG4gICAgICAgIHRoaXMuX29uRHJvcChldnQpO1xuXG4gICAgICAgIGJyZWFrO1xuXG4gICAgICBjYXNlICdkcmFnZW50ZXInOlxuICAgICAgY2FzZSAnZHJhZ292ZXInOlxuICAgICAgICBpZiAoZHJhZ0VsKSB7XG4gICAgICAgICAgdGhpcy5fb25EcmFnT3ZlcihldnQpO1xuXG4gICAgICAgICAgX2dsb2JhbERyYWdPdmVyKGV2dCk7XG4gICAgICAgIH1cblxuICAgICAgICBicmVhaztcblxuICAgICAgY2FzZSAnc2VsZWN0c3RhcnQnOlxuICAgICAgICBldnQucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgYnJlYWs7XG4gICAgfVxuICB9LFxuXG4gIC8qKlxyXG4gICAqIFNlcmlhbGl6ZXMgdGhlIGl0ZW0gaW50byBhbiBhcnJheSBvZiBzdHJpbmcuXHJcbiAgICogQHJldHVybnMge1N0cmluZ1tdfVxyXG4gICAqL1xuICB0b0FycmF5OiBmdW5jdGlvbiB0b0FycmF5KCkge1xuICAgIHZhciBvcmRlciA9IFtdLFxuICAgICAgICBlbCxcbiAgICAgICAgY2hpbGRyZW4gPSB0aGlzLmVsLmNoaWxkcmVuLFxuICAgICAgICBpID0gMCxcbiAgICAgICAgbiA9IGNoaWxkcmVuLmxlbmd0aCxcbiAgICAgICAgb3B0aW9ucyA9IHRoaXMub3B0aW9ucztcblxuICAgIGZvciAoOyBpIDwgbjsgaSsrKSB7XG4gICAgICBlbCA9IGNoaWxkcmVuW2ldO1xuXG4gICAgICBpZiAoY2xvc2VzdChlbCwgb3B0aW9ucy5kcmFnZ2FibGUsIHRoaXMuZWwsIGZhbHNlKSkge1xuICAgICAgICBvcmRlci5wdXNoKGVsLmdldEF0dHJpYnV0ZShvcHRpb25zLmRhdGFJZEF0dHIpIHx8IF9nZW5lcmF0ZUlkKGVsKSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIG9yZGVyO1xuICB9LFxuXG4gIC8qKlxyXG4gICAqIFNvcnRzIHRoZSBlbGVtZW50cyBhY2NvcmRpbmcgdG8gdGhlIGFycmF5LlxyXG4gICAqIEBwYXJhbSAge1N0cmluZ1tdfSAgb3JkZXIgIG9yZGVyIG9mIHRoZSBpdGVtc1xyXG4gICAqL1xuICBzb3J0OiBmdW5jdGlvbiBzb3J0KG9yZGVyLCB1c2VBbmltYXRpb24pIHtcbiAgICB2YXIgaXRlbXMgPSB7fSxcbiAgICAgICAgcm9vdEVsID0gdGhpcy5lbDtcbiAgICB0aGlzLnRvQXJyYXkoKS5mb3JFYWNoKGZ1bmN0aW9uIChpZCwgaSkge1xuICAgICAgdmFyIGVsID0gcm9vdEVsLmNoaWxkcmVuW2ldO1xuXG4gICAgICBpZiAoY2xvc2VzdChlbCwgdGhpcy5vcHRpb25zLmRyYWdnYWJsZSwgcm9vdEVsLCBmYWxzZSkpIHtcbiAgICAgICAgaXRlbXNbaWRdID0gZWw7XG4gICAgICB9XG4gICAgfSwgdGhpcyk7XG4gICAgdXNlQW5pbWF0aW9uICYmIHRoaXMuY2FwdHVyZUFuaW1hdGlvblN0YXRlKCk7XG4gICAgb3JkZXIuZm9yRWFjaChmdW5jdGlvbiAoaWQpIHtcbiAgICAgIGlmIChpdGVtc1tpZF0pIHtcbiAgICAgICAgcm9vdEVsLnJlbW92ZUNoaWxkKGl0ZW1zW2lkXSk7XG4gICAgICAgIHJvb3RFbC5hcHBlbmRDaGlsZChpdGVtc1tpZF0pO1xuICAgICAgfVxuICAgIH0pO1xuICAgIHVzZUFuaW1hdGlvbiAmJiB0aGlzLmFuaW1hdGVBbGwoKTtcbiAgfSxcblxuICAvKipcclxuICAgKiBTYXZlIHRoZSBjdXJyZW50IHNvcnRpbmdcclxuICAgKi9cbiAgc2F2ZTogZnVuY3Rpb24gc2F2ZSgpIHtcbiAgICB2YXIgc3RvcmUgPSB0aGlzLm9wdGlvbnMuc3RvcmU7XG4gICAgc3RvcmUgJiYgc3RvcmUuc2V0ICYmIHN0b3JlLnNldCh0aGlzKTtcbiAgfSxcblxuICAvKipcclxuICAgKiBGb3IgZWFjaCBlbGVtZW50IGluIHRoZSBzZXQsIGdldCB0aGUgZmlyc3QgZWxlbWVudCB0aGF0IG1hdGNoZXMgdGhlIHNlbGVjdG9yIGJ5IHRlc3RpbmcgdGhlIGVsZW1lbnQgaXRzZWxmIGFuZCB0cmF2ZXJzaW5nIHVwIHRocm91Z2ggaXRzIGFuY2VzdG9ycyBpbiB0aGUgRE9NIHRyZWUuXHJcbiAgICogQHBhcmFtICAge0hUTUxFbGVtZW50fSAgZWxcclxuICAgKiBAcGFyYW0gICB7U3RyaW5nfSAgICAgICBbc2VsZWN0b3JdICBkZWZhdWx0OiBgb3B0aW9ucy5kcmFnZ2FibGVgXHJcbiAgICogQHJldHVybnMge0hUTUxFbGVtZW50fG51bGx9XHJcbiAgICovXG4gIGNsb3Nlc3Q6IGZ1bmN0aW9uIGNsb3Nlc3QkMShlbCwgc2VsZWN0b3IpIHtcbiAgICByZXR1cm4gY2xvc2VzdChlbCwgc2VsZWN0b3IgfHwgdGhpcy5vcHRpb25zLmRyYWdnYWJsZSwgdGhpcy5lbCwgZmFsc2UpO1xuICB9LFxuXG4gIC8qKlxyXG4gICAqIFNldC9nZXQgb3B0aW9uXHJcbiAgICogQHBhcmFtICAge3N0cmluZ30gbmFtZVxyXG4gICAqIEBwYXJhbSAgIHsqfSAgICAgIFt2YWx1ZV1cclxuICAgKiBAcmV0dXJucyB7Kn1cclxuICAgKi9cbiAgb3B0aW9uOiBmdW5jdGlvbiBvcHRpb24obmFtZSwgdmFsdWUpIHtcbiAgICB2YXIgb3B0aW9ucyA9IHRoaXMub3B0aW9ucztcblxuICAgIGlmICh2YWx1ZSA9PT0gdm9pZCAwKSB7XG4gICAgICByZXR1cm4gb3B0aW9uc1tuYW1lXTtcbiAgICB9IGVsc2Uge1xuICAgICAgdmFyIG1vZGlmaWVkVmFsdWUgPSBQbHVnaW5NYW5hZ2VyLm1vZGlmeU9wdGlvbih0aGlzLCBuYW1lLCB2YWx1ZSk7XG5cbiAgICAgIGlmICh0eXBlb2YgbW9kaWZpZWRWYWx1ZSAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgb3B0aW9uc1tuYW1lXSA9IG1vZGlmaWVkVmFsdWU7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBvcHRpb25zW25hbWVdID0gdmFsdWU7XG4gICAgICB9XG5cbiAgICAgIGlmIChuYW1lID09PSAnZ3JvdXAnKSB7XG4gICAgICAgIF9wcmVwYXJlR3JvdXAob3B0aW9ucyk7XG4gICAgICB9XG4gICAgfVxuICB9LFxuXG4gIC8qKlxyXG4gICAqIERlc3Ryb3lcclxuICAgKi9cbiAgZGVzdHJveTogZnVuY3Rpb24gZGVzdHJveSgpIHtcbiAgICBwbHVnaW5FdmVudCgnZGVzdHJveScsIHRoaXMpO1xuICAgIHZhciBlbCA9IHRoaXMuZWw7XG4gICAgZWxbZXhwYW5kb10gPSBudWxsO1xuICAgIG9mZihlbCwgJ21vdXNlZG93bicsIHRoaXMuX29uVGFwU3RhcnQpO1xuICAgIG9mZihlbCwgJ3RvdWNoc3RhcnQnLCB0aGlzLl9vblRhcFN0YXJ0KTtcbiAgICBvZmYoZWwsICdwb2ludGVyZG93bicsIHRoaXMuX29uVGFwU3RhcnQpO1xuXG4gICAgaWYgKHRoaXMubmF0aXZlRHJhZ2dhYmxlKSB7XG4gICAgICBvZmYoZWwsICdkcmFnb3ZlcicsIHRoaXMpO1xuICAgICAgb2ZmKGVsLCAnZHJhZ2VudGVyJywgdGhpcyk7XG4gICAgfSAvLyBSZW1vdmUgZHJhZ2dhYmxlIGF0dHJpYnV0ZXNcblxuXG4gICAgQXJyYXkucHJvdG90eXBlLmZvckVhY2guY2FsbChlbC5xdWVyeVNlbGVjdG9yQWxsKCdbZHJhZ2dhYmxlXScpLCBmdW5jdGlvbiAoZWwpIHtcbiAgICAgIGVsLnJlbW92ZUF0dHJpYnV0ZSgnZHJhZ2dhYmxlJyk7XG4gICAgfSk7XG5cbiAgICB0aGlzLl9vbkRyb3AoKTtcblxuICAgIHRoaXMuX2Rpc2FibGVEZWxheWVkRHJhZ0V2ZW50cygpO1xuXG4gICAgc29ydGFibGVzLnNwbGljZShzb3J0YWJsZXMuaW5kZXhPZih0aGlzLmVsKSwgMSk7XG4gICAgdGhpcy5lbCA9IGVsID0gbnVsbDtcbiAgfSxcbiAgX2hpZGVDbG9uZTogZnVuY3Rpb24gX2hpZGVDbG9uZSgpIHtcbiAgICBpZiAoIWNsb25lSGlkZGVuKSB7XG4gICAgICBwbHVnaW5FdmVudCgnaGlkZUNsb25lJywgdGhpcyk7XG4gICAgICBpZiAoU29ydGFibGUuZXZlbnRDYW5jZWxlZCkgcmV0dXJuO1xuICAgICAgY3NzKGNsb25lRWwsICdkaXNwbGF5JywgJ25vbmUnKTtcblxuICAgICAgaWYgKHRoaXMub3B0aW9ucy5yZW1vdmVDbG9uZU9uSGlkZSAmJiBjbG9uZUVsLnBhcmVudE5vZGUpIHtcbiAgICAgICAgY2xvbmVFbC5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKGNsb25lRWwpO1xuICAgICAgfVxuXG4gICAgICBjbG9uZUhpZGRlbiA9IHRydWU7XG4gICAgfVxuICB9LFxuICBfc2hvd0Nsb25lOiBmdW5jdGlvbiBfc2hvd0Nsb25lKHB1dFNvcnRhYmxlKSB7XG4gICAgaWYgKHB1dFNvcnRhYmxlLmxhc3RQdXRNb2RlICE9PSAnY2xvbmUnKSB7XG4gICAgICB0aGlzLl9oaWRlQ2xvbmUoKTtcblxuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGlmIChjbG9uZUhpZGRlbikge1xuICAgICAgcGx1Z2luRXZlbnQoJ3Nob3dDbG9uZScsIHRoaXMpO1xuICAgICAgaWYgKFNvcnRhYmxlLmV2ZW50Q2FuY2VsZWQpIHJldHVybjsgLy8gc2hvdyBjbG9uZSBhdCBkcmFnRWwgb3Igb3JpZ2luYWwgcG9zaXRpb25cblxuICAgICAgaWYgKGRyYWdFbC5wYXJlbnROb2RlID09IHJvb3RFbCAmJiAhdGhpcy5vcHRpb25zLmdyb3VwLnJldmVydENsb25lKSB7XG4gICAgICAgIHJvb3RFbC5pbnNlcnRCZWZvcmUoY2xvbmVFbCwgZHJhZ0VsKTtcbiAgICAgIH0gZWxzZSBpZiAobmV4dEVsKSB7XG4gICAgICAgIHJvb3RFbC5pbnNlcnRCZWZvcmUoY2xvbmVFbCwgbmV4dEVsKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJvb3RFbC5hcHBlbmRDaGlsZChjbG9uZUVsKTtcbiAgICAgIH1cblxuICAgICAgaWYgKHRoaXMub3B0aW9ucy5ncm91cC5yZXZlcnRDbG9uZSkge1xuICAgICAgICB0aGlzLmFuaW1hdGUoZHJhZ0VsLCBjbG9uZUVsKTtcbiAgICAgIH1cblxuICAgICAgY3NzKGNsb25lRWwsICdkaXNwbGF5JywgJycpO1xuICAgICAgY2xvbmVIaWRkZW4gPSBmYWxzZTtcbiAgICB9XG4gIH1cbn07XG5cbmZ1bmN0aW9uIF9nbG9iYWxEcmFnT3Zlcihcbi8qKkV2ZW50Ki9cbmV2dCkge1xuICBpZiAoZXZ0LmRhdGFUcmFuc2Zlcikge1xuICAgIGV2dC5kYXRhVHJhbnNmZXIuZHJvcEVmZmVjdCA9ICdtb3ZlJztcbiAgfVxuXG4gIGV2dC5jYW5jZWxhYmxlICYmIGV2dC5wcmV2ZW50RGVmYXVsdCgpO1xufVxuXG5mdW5jdGlvbiBfb25Nb3ZlKGZyb21FbCwgdG9FbCwgZHJhZ0VsLCBkcmFnUmVjdCwgdGFyZ2V0RWwsIHRhcmdldFJlY3QsIG9yaWdpbmFsRXZlbnQsIHdpbGxJbnNlcnRBZnRlcikge1xuICB2YXIgZXZ0LFxuICAgICAgc29ydGFibGUgPSBmcm9tRWxbZXhwYW5kb10sXG4gICAgICBvbk1vdmVGbiA9IHNvcnRhYmxlLm9wdGlvbnMub25Nb3ZlLFxuICAgICAgcmV0VmFsOyAvLyBTdXBwb3J0IGZvciBuZXcgQ3VzdG9tRXZlbnQgZmVhdHVyZVxuXG4gIGlmICh3aW5kb3cuQ3VzdG9tRXZlbnQgJiYgIUlFMTFPckxlc3MgJiYgIUVkZ2UpIHtcbiAgICBldnQgPSBuZXcgQ3VzdG9tRXZlbnQoJ21vdmUnLCB7XG4gICAgICBidWJibGVzOiB0cnVlLFxuICAgICAgY2FuY2VsYWJsZTogdHJ1ZVxuICAgIH0pO1xuICB9IGVsc2Uge1xuICAgIGV2dCA9IGRvY3VtZW50LmNyZWF0ZUV2ZW50KCdFdmVudCcpO1xuICAgIGV2dC5pbml0RXZlbnQoJ21vdmUnLCB0cnVlLCB0cnVlKTtcbiAgfVxuXG4gIGV2dC50byA9IHRvRWw7XG4gIGV2dC5mcm9tID0gZnJvbUVsO1xuICBldnQuZHJhZ2dlZCA9IGRyYWdFbDtcbiAgZXZ0LmRyYWdnZWRSZWN0ID0gZHJhZ1JlY3Q7XG4gIGV2dC5yZWxhdGVkID0gdGFyZ2V0RWwgfHwgdG9FbDtcbiAgZXZ0LnJlbGF0ZWRSZWN0ID0gdGFyZ2V0UmVjdCB8fCBnZXRSZWN0KHRvRWwpO1xuICBldnQud2lsbEluc2VydEFmdGVyID0gd2lsbEluc2VydEFmdGVyO1xuICBldnQub3JpZ2luYWxFdmVudCA9IG9yaWdpbmFsRXZlbnQ7XG4gIGZyb21FbC5kaXNwYXRjaEV2ZW50KGV2dCk7XG5cbiAgaWYgKG9uTW92ZUZuKSB7XG4gICAgcmV0VmFsID0gb25Nb3ZlRm4uY2FsbChzb3J0YWJsZSwgZXZ0LCBvcmlnaW5hbEV2ZW50KTtcbiAgfVxuXG4gIHJldHVybiByZXRWYWw7XG59XG5cbmZ1bmN0aW9uIF9kaXNhYmxlRHJhZ2dhYmxlKGVsKSB7XG4gIGVsLmRyYWdnYWJsZSA9IGZhbHNlO1xufVxuXG5mdW5jdGlvbiBfdW5zaWxlbnQoKSB7XG4gIF9zaWxlbnQgPSBmYWxzZTtcbn1cblxuZnVuY3Rpb24gX2dob3N0SXNGaXJzdChldnQsIHZlcnRpY2FsLCBzb3J0YWJsZSkge1xuICB2YXIgcmVjdCA9IGdldFJlY3QoZ2V0Q2hpbGQoc29ydGFibGUuZWwsIDAsIHNvcnRhYmxlLm9wdGlvbnMsIHRydWUpKTtcbiAgdmFyIHNwYWNlciA9IDEwO1xuICByZXR1cm4gdmVydGljYWwgPyBldnQuY2xpZW50WCA8IHJlY3QubGVmdCAtIHNwYWNlciB8fCBldnQuY2xpZW50WSA8IHJlY3QudG9wICYmIGV2dC5jbGllbnRYIDwgcmVjdC5yaWdodCA6IGV2dC5jbGllbnRZIDwgcmVjdC50b3AgLSBzcGFjZXIgfHwgZXZ0LmNsaWVudFkgPCByZWN0LmJvdHRvbSAmJiBldnQuY2xpZW50WCA8IHJlY3QubGVmdDtcbn1cblxuZnVuY3Rpb24gX2dob3N0SXNMYXN0KGV2dCwgdmVydGljYWwsIHNvcnRhYmxlKSB7XG4gIHZhciByZWN0ID0gZ2V0UmVjdChsYXN0Q2hpbGQoc29ydGFibGUuZWwsIHNvcnRhYmxlLm9wdGlvbnMuZHJhZ2dhYmxlKSk7XG4gIHZhciBzcGFjZXIgPSAxMDtcbiAgcmV0dXJuIHZlcnRpY2FsID8gZXZ0LmNsaWVudFggPiByZWN0LnJpZ2h0ICsgc3BhY2VyIHx8IGV2dC5jbGllbnRYIDw9IHJlY3QucmlnaHQgJiYgZXZ0LmNsaWVudFkgPiByZWN0LmJvdHRvbSAmJiBldnQuY2xpZW50WCA+PSByZWN0LmxlZnQgOiBldnQuY2xpZW50WCA+IHJlY3QucmlnaHQgJiYgZXZ0LmNsaWVudFkgPiByZWN0LnRvcCB8fCBldnQuY2xpZW50WCA8PSByZWN0LnJpZ2h0ICYmIGV2dC5jbGllbnRZID4gcmVjdC5ib3R0b20gKyBzcGFjZXI7XG59XG5cbmZ1bmN0aW9uIF9nZXRTd2FwRGlyZWN0aW9uKGV2dCwgdGFyZ2V0LCB0YXJnZXRSZWN0LCB2ZXJ0aWNhbCwgc3dhcFRocmVzaG9sZCwgaW52ZXJ0ZWRTd2FwVGhyZXNob2xkLCBpbnZlcnRTd2FwLCBpc0xhc3RUYXJnZXQpIHtcbiAgdmFyIG1vdXNlT25BeGlzID0gdmVydGljYWwgPyBldnQuY2xpZW50WSA6IGV2dC5jbGllbnRYLFxuICAgICAgdGFyZ2V0TGVuZ3RoID0gdmVydGljYWwgPyB0YXJnZXRSZWN0LmhlaWdodCA6IHRhcmdldFJlY3Qud2lkdGgsXG4gICAgICB0YXJnZXRTMSA9IHZlcnRpY2FsID8gdGFyZ2V0UmVjdC50b3AgOiB0YXJnZXRSZWN0LmxlZnQsXG4gICAgICB0YXJnZXRTMiA9IHZlcnRpY2FsID8gdGFyZ2V0UmVjdC5ib3R0b20gOiB0YXJnZXRSZWN0LnJpZ2h0LFxuICAgICAgaW52ZXJ0ID0gZmFsc2U7XG5cbiAgaWYgKCFpbnZlcnRTd2FwKSB7XG4gICAgLy8gTmV2ZXIgaW52ZXJ0IG9yIGNyZWF0ZSBkcmFnRWwgc2hhZG93IHdoZW4gdGFyZ2V0IG1vdmVtZW5ldCBjYXVzZXMgbW91c2UgdG8gbW92ZSBwYXN0IHRoZSBlbmQgb2YgcmVndWxhciBzd2FwVGhyZXNob2xkXG4gICAgaWYgKGlzTGFzdFRhcmdldCAmJiB0YXJnZXRNb3ZlRGlzdGFuY2UgPCB0YXJnZXRMZW5ndGggKiBzd2FwVGhyZXNob2xkKSB7XG4gICAgICAvLyBtdWx0aXBsaWVkIG9ubHkgYnkgc3dhcFRocmVzaG9sZCBiZWNhdXNlIG1vdXNlIHdpbGwgYWxyZWFkeSBiZSBpbnNpZGUgdGFyZ2V0IGJ5ICgxIC0gdGhyZXNob2xkKSAqIHRhcmdldExlbmd0aCAvIDJcbiAgICAgIC8vIGNoZWNrIGlmIHBhc3QgZmlyc3QgaW52ZXJ0IHRocmVzaG9sZCBvbiBzaWRlIG9wcG9zaXRlIG9mIGxhc3REaXJlY3Rpb25cbiAgICAgIGlmICghcGFzdEZpcnN0SW52ZXJ0VGhyZXNoICYmIChsYXN0RGlyZWN0aW9uID09PSAxID8gbW91c2VPbkF4aXMgPiB0YXJnZXRTMSArIHRhcmdldExlbmd0aCAqIGludmVydGVkU3dhcFRocmVzaG9sZCAvIDIgOiBtb3VzZU9uQXhpcyA8IHRhcmdldFMyIC0gdGFyZ2V0TGVuZ3RoICogaW52ZXJ0ZWRTd2FwVGhyZXNob2xkIC8gMikpIHtcbiAgICAgICAgLy8gcGFzdCBmaXJzdCBpbnZlcnQgdGhyZXNob2xkLCBkbyBub3QgcmVzdHJpY3QgaW52ZXJ0ZWQgdGhyZXNob2xkIHRvIGRyYWdFbCBzaGFkb3dcbiAgICAgICAgcGFzdEZpcnN0SW52ZXJ0VGhyZXNoID0gdHJ1ZTtcbiAgICAgIH1cblxuICAgICAgaWYgKCFwYXN0Rmlyc3RJbnZlcnRUaHJlc2gpIHtcbiAgICAgICAgLy8gZHJhZ0VsIHNoYWRvdyAodGFyZ2V0IG1vdmUgZGlzdGFuY2Ugc2hhZG93KVxuICAgICAgICBpZiAobGFzdERpcmVjdGlvbiA9PT0gMSA/IG1vdXNlT25BeGlzIDwgdGFyZ2V0UzEgKyB0YXJnZXRNb3ZlRGlzdGFuY2UgLy8gb3ZlciBkcmFnRWwgc2hhZG93XG4gICAgICAgIDogbW91c2VPbkF4aXMgPiB0YXJnZXRTMiAtIHRhcmdldE1vdmVEaXN0YW5jZSkge1xuICAgICAgICAgIHJldHVybiAtbGFzdERpcmVjdGlvbjtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgaW52ZXJ0ID0gdHJ1ZTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgLy8gUmVndWxhclxuICAgICAgaWYgKG1vdXNlT25BeGlzID4gdGFyZ2V0UzEgKyB0YXJnZXRMZW5ndGggKiAoMSAtIHN3YXBUaHJlc2hvbGQpIC8gMiAmJiBtb3VzZU9uQXhpcyA8IHRhcmdldFMyIC0gdGFyZ2V0TGVuZ3RoICogKDEgLSBzd2FwVGhyZXNob2xkKSAvIDIpIHtcbiAgICAgICAgcmV0dXJuIF9nZXRJbnNlcnREaXJlY3Rpb24odGFyZ2V0KTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBpbnZlcnQgPSBpbnZlcnQgfHwgaW52ZXJ0U3dhcDtcblxuICBpZiAoaW52ZXJ0KSB7XG4gICAgLy8gSW52ZXJ0IG9mIHJlZ3VsYXJcbiAgICBpZiAobW91c2VPbkF4aXMgPCB0YXJnZXRTMSArIHRhcmdldExlbmd0aCAqIGludmVydGVkU3dhcFRocmVzaG9sZCAvIDIgfHwgbW91c2VPbkF4aXMgPiB0YXJnZXRTMiAtIHRhcmdldExlbmd0aCAqIGludmVydGVkU3dhcFRocmVzaG9sZCAvIDIpIHtcbiAgICAgIHJldHVybiBtb3VzZU9uQXhpcyA+IHRhcmdldFMxICsgdGFyZ2V0TGVuZ3RoIC8gMiA/IDEgOiAtMTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gMDtcbn1cbi8qKlxyXG4gKiBHZXRzIHRoZSBkaXJlY3Rpb24gZHJhZ0VsIG11c3QgYmUgc3dhcHBlZCByZWxhdGl2ZSB0byB0YXJnZXQgaW4gb3JkZXIgdG8gbWFrZSBpdFxyXG4gKiBzZWVtIHRoYXQgZHJhZ0VsIGhhcyBiZWVuIFwiaW5zZXJ0ZWRcIiBpbnRvIHRoYXQgZWxlbWVudCdzIHBvc2l0aW9uXHJcbiAqIEBwYXJhbSAge0hUTUxFbGVtZW50fSB0YXJnZXQgICAgICAgVGhlIHRhcmdldCB3aG9zZSBwb3NpdGlvbiBkcmFnRWwgaXMgYmVpbmcgaW5zZXJ0ZWQgYXRcclxuICogQHJldHVybiB7TnVtYmVyfSAgICAgICAgICAgICAgICAgICBEaXJlY3Rpb24gZHJhZ0VsIG11c3QgYmUgc3dhcHBlZFxyXG4gKi9cblxuXG5mdW5jdGlvbiBfZ2V0SW5zZXJ0RGlyZWN0aW9uKHRhcmdldCkge1xuICBpZiAoaW5kZXgoZHJhZ0VsKSA8IGluZGV4KHRhcmdldCkpIHtcbiAgICByZXR1cm4gMTtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gLTE7XG4gIH1cbn1cbi8qKlxyXG4gKiBHZW5lcmF0ZSBpZFxyXG4gKiBAcGFyYW0gICB7SFRNTEVsZW1lbnR9IGVsXHJcbiAqIEByZXR1cm5zIHtTdHJpbmd9XHJcbiAqIEBwcml2YXRlXHJcbiAqL1xuXG5cbmZ1bmN0aW9uIF9nZW5lcmF0ZUlkKGVsKSB7XG4gIHZhciBzdHIgPSBlbC50YWdOYW1lICsgZWwuY2xhc3NOYW1lICsgZWwuc3JjICsgZWwuaHJlZiArIGVsLnRleHRDb250ZW50LFxuICAgICAgaSA9IHN0ci5sZW5ndGgsXG4gICAgICBzdW0gPSAwO1xuXG4gIHdoaWxlIChpLS0pIHtcbiAgICBzdW0gKz0gc3RyLmNoYXJDb2RlQXQoaSk7XG4gIH1cblxuICByZXR1cm4gc3VtLnRvU3RyaW5nKDM2KTtcbn1cblxuZnVuY3Rpb24gX3NhdmVJbnB1dENoZWNrZWRTdGF0ZShyb290KSB7XG4gIHNhdmVkSW5wdXRDaGVja2VkLmxlbmd0aCA9IDA7XG4gIHZhciBpbnB1dHMgPSByb290LmdldEVsZW1lbnRzQnlUYWdOYW1lKCdpbnB1dCcpO1xuICB2YXIgaWR4ID0gaW5wdXRzLmxlbmd0aDtcblxuICB3aGlsZSAoaWR4LS0pIHtcbiAgICB2YXIgZWwgPSBpbnB1dHNbaWR4XTtcbiAgICBlbC5jaGVja2VkICYmIHNhdmVkSW5wdXRDaGVja2VkLnB1c2goZWwpO1xuICB9XG59XG5cbmZ1bmN0aW9uIF9uZXh0VGljayhmbikge1xuICByZXR1cm4gc2V0VGltZW91dChmbiwgMCk7XG59XG5cbmZ1bmN0aW9uIF9jYW5jZWxOZXh0VGljayhpZCkge1xuICByZXR1cm4gY2xlYXJUaW1lb3V0KGlkKTtcbn0gLy8gRml4ZWQgIzk3MzpcblxuXG5pZiAoZG9jdW1lbnRFeGlzdHMpIHtcbiAgb24oZG9jdW1lbnQsICd0b3VjaG1vdmUnLCBmdW5jdGlvbiAoZXZ0KSB7XG4gICAgaWYgKChTb3J0YWJsZS5hY3RpdmUgfHwgYXdhaXRpbmdEcmFnU3RhcnRlZCkgJiYgZXZ0LmNhbmNlbGFibGUpIHtcbiAgICAgIGV2dC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgIH1cbiAgfSk7XG59IC8vIEV4cG9ydCB1dGlsc1xuXG5cblNvcnRhYmxlLnV0aWxzID0ge1xuICBvbjogb24sXG4gIG9mZjogb2ZmLFxuICBjc3M6IGNzcyxcbiAgZmluZDogZmluZCxcbiAgaXM6IGZ1bmN0aW9uIGlzKGVsLCBzZWxlY3Rvcikge1xuICAgIHJldHVybiAhIWNsb3Nlc3QoZWwsIHNlbGVjdG9yLCBlbCwgZmFsc2UpO1xuICB9LFxuICBleHRlbmQ6IGV4dGVuZCxcbiAgdGhyb3R0bGU6IHRocm90dGxlLFxuICBjbG9zZXN0OiBjbG9zZXN0LFxuICB0b2dnbGVDbGFzczogdG9nZ2xlQ2xhc3MsXG4gIGNsb25lOiBjbG9uZSxcbiAgaW5kZXg6IGluZGV4LFxuICBuZXh0VGljazogX25leHRUaWNrLFxuICBjYW5jZWxOZXh0VGljazogX2NhbmNlbE5leHRUaWNrLFxuICBkZXRlY3REaXJlY3Rpb246IF9kZXRlY3REaXJlY3Rpb24sXG4gIGdldENoaWxkOiBnZXRDaGlsZFxufTtcbi8qKlxyXG4gKiBHZXQgdGhlIFNvcnRhYmxlIGluc3RhbmNlIG9mIGFuIGVsZW1lbnRcclxuICogQHBhcmFtICB7SFRNTEVsZW1lbnR9IGVsZW1lbnQgVGhlIGVsZW1lbnRcclxuICogQHJldHVybiB7U29ydGFibGV8dW5kZWZpbmVkfSAgICAgICAgIFRoZSBpbnN0YW5jZSBvZiBTb3J0YWJsZVxyXG4gKi9cblxuU29ydGFibGUuZ2V0ID0gZnVuY3Rpb24gKGVsZW1lbnQpIHtcbiAgcmV0dXJuIGVsZW1lbnRbZXhwYW5kb107XG59O1xuLyoqXHJcbiAqIE1vdW50IGEgcGx1Z2luIHRvIFNvcnRhYmxlXHJcbiAqIEBwYXJhbSAgey4uLlNvcnRhYmxlUGx1Z2lufFNvcnRhYmxlUGx1Z2luW119IHBsdWdpbnMgICAgICAgUGx1Z2lucyBiZWluZyBtb3VudGVkXHJcbiAqL1xuXG5cblNvcnRhYmxlLm1vdW50ID0gZnVuY3Rpb24gKCkge1xuICBmb3IgKHZhciBfbGVuID0gYXJndW1lbnRzLmxlbmd0aCwgcGx1Z2lucyA9IG5ldyBBcnJheShfbGVuKSwgX2tleSA9IDA7IF9rZXkgPCBfbGVuOyBfa2V5KyspIHtcbiAgICBwbHVnaW5zW19rZXldID0gYXJndW1lbnRzW19rZXldO1xuICB9XG5cbiAgaWYgKHBsdWdpbnNbMF0uY29uc3RydWN0b3IgPT09IEFycmF5KSBwbHVnaW5zID0gcGx1Z2luc1swXTtcbiAgcGx1Z2lucy5mb3JFYWNoKGZ1bmN0aW9uIChwbHVnaW4pIHtcbiAgICBpZiAoIXBsdWdpbi5wcm90b3R5cGUgfHwgIXBsdWdpbi5wcm90b3R5cGUuY29uc3RydWN0b3IpIHtcbiAgICAgIHRocm93IFwiU29ydGFibGU6IE1vdW50ZWQgcGx1Z2luIG11c3QgYmUgYSBjb25zdHJ1Y3RvciBmdW5jdGlvbiwgbm90IFwiLmNvbmNhdCh7fS50b1N0cmluZy5jYWxsKHBsdWdpbikpO1xuICAgIH1cblxuICAgIGlmIChwbHVnaW4udXRpbHMpIFNvcnRhYmxlLnV0aWxzID0gX29iamVjdFNwcmVhZDIoX29iamVjdFNwcmVhZDIoe30sIFNvcnRhYmxlLnV0aWxzKSwgcGx1Z2luLnV0aWxzKTtcbiAgICBQbHVnaW5NYW5hZ2VyLm1vdW50KHBsdWdpbik7XG4gIH0pO1xufTtcbi8qKlxyXG4gKiBDcmVhdGUgc29ydGFibGUgaW5zdGFuY2VcclxuICogQHBhcmFtIHtIVE1MRWxlbWVudH0gIGVsXHJcbiAqIEBwYXJhbSB7T2JqZWN0fSAgICAgIFtvcHRpb25zXVxyXG4gKi9cblxuXG5Tb3J0YWJsZS5jcmVhdGUgPSBmdW5jdGlvbiAoZWwsIG9wdGlvbnMpIHtcbiAgcmV0dXJuIG5ldyBTb3J0YWJsZShlbCwgb3B0aW9ucyk7XG59OyAvLyBFeHBvcnRcblxuXG5Tb3J0YWJsZS52ZXJzaW9uID0gdmVyc2lvbjtcblxudmFyIGF1dG9TY3JvbGxzID0gW10sXG4gICAgc2Nyb2xsRWwsXG4gICAgc2Nyb2xsUm9vdEVsLFxuICAgIHNjcm9sbGluZyA9IGZhbHNlLFxuICAgIGxhc3RBdXRvU2Nyb2xsWCxcbiAgICBsYXN0QXV0b1Njcm9sbFksXG4gICAgdG91Y2hFdnQkMSxcbiAgICBwb2ludGVyRWxlbUNoYW5nZWRJbnRlcnZhbDtcblxuZnVuY3Rpb24gQXV0b1Njcm9sbFBsdWdpbigpIHtcbiAgZnVuY3Rpb24gQXV0b1Njcm9sbCgpIHtcbiAgICB0aGlzLmRlZmF1bHRzID0ge1xuICAgICAgc2Nyb2xsOiB0cnVlLFxuICAgICAgZm9yY2VBdXRvU2Nyb2xsRmFsbGJhY2s6IGZhbHNlLFxuICAgICAgc2Nyb2xsU2Vuc2l0aXZpdHk6IDMwLFxuICAgICAgc2Nyb2xsU3BlZWQ6IDEwLFxuICAgICAgYnViYmxlU2Nyb2xsOiB0cnVlXG4gICAgfTsgLy8gQmluZCBhbGwgcHJpdmF0ZSBtZXRob2RzXG5cbiAgICBmb3IgKHZhciBmbiBpbiB0aGlzKSB7XG4gICAgICBpZiAoZm4uY2hhckF0KDApID09PSAnXycgJiYgdHlwZW9mIHRoaXNbZm5dID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgIHRoaXNbZm5dID0gdGhpc1tmbl0uYmluZCh0aGlzKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBBdXRvU2Nyb2xsLnByb3RvdHlwZSA9IHtcbiAgICBkcmFnU3RhcnRlZDogZnVuY3Rpb24gZHJhZ1N0YXJ0ZWQoX3JlZikge1xuICAgICAgdmFyIG9yaWdpbmFsRXZlbnQgPSBfcmVmLm9yaWdpbmFsRXZlbnQ7XG5cbiAgICAgIGlmICh0aGlzLnNvcnRhYmxlLm5hdGl2ZURyYWdnYWJsZSkge1xuICAgICAgICBvbihkb2N1bWVudCwgJ2RyYWdvdmVyJywgdGhpcy5faGFuZGxlQXV0b1Njcm9sbCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBpZiAodGhpcy5vcHRpb25zLnN1cHBvcnRQb2ludGVyKSB7XG4gICAgICAgICAgb24oZG9jdW1lbnQsICdwb2ludGVybW92ZScsIHRoaXMuX2hhbmRsZUZhbGxiYWNrQXV0b1Njcm9sbCk7XG4gICAgICAgIH0gZWxzZSBpZiAob3JpZ2luYWxFdmVudC50b3VjaGVzKSB7XG4gICAgICAgICAgb24oZG9jdW1lbnQsICd0b3VjaG1vdmUnLCB0aGlzLl9oYW5kbGVGYWxsYmFja0F1dG9TY3JvbGwpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIG9uKGRvY3VtZW50LCAnbW91c2Vtb3ZlJywgdGhpcy5faGFuZGxlRmFsbGJhY2tBdXRvU2Nyb2xsKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0sXG4gICAgZHJhZ092ZXJDb21wbGV0ZWQ6IGZ1bmN0aW9uIGRyYWdPdmVyQ29tcGxldGVkKF9yZWYyKSB7XG4gICAgICB2YXIgb3JpZ2luYWxFdmVudCA9IF9yZWYyLm9yaWdpbmFsRXZlbnQ7XG5cbiAgICAgIC8vIEZvciB3aGVuIGJ1YmJsaW5nIGlzIGNhbmNlbGVkIGFuZCB1c2luZyBmYWxsYmFjayAoZmFsbGJhY2sgJ3RvdWNobW92ZScgYWx3YXlzIHJlYWNoZWQpXG4gICAgICBpZiAoIXRoaXMub3B0aW9ucy5kcmFnT3ZlckJ1YmJsZSAmJiAhb3JpZ2luYWxFdmVudC5yb290RWwpIHtcbiAgICAgICAgdGhpcy5faGFuZGxlQXV0b1Njcm9sbChvcmlnaW5hbEV2ZW50KTtcbiAgICAgIH1cbiAgICB9LFxuICAgIGRyb3A6IGZ1bmN0aW9uIGRyb3AoKSB7XG4gICAgICBpZiAodGhpcy5zb3J0YWJsZS5uYXRpdmVEcmFnZ2FibGUpIHtcbiAgICAgICAgb2ZmKGRvY3VtZW50LCAnZHJhZ292ZXInLCB0aGlzLl9oYW5kbGVBdXRvU2Nyb2xsKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIG9mZihkb2N1bWVudCwgJ3BvaW50ZXJtb3ZlJywgdGhpcy5faGFuZGxlRmFsbGJhY2tBdXRvU2Nyb2xsKTtcbiAgICAgICAgb2ZmKGRvY3VtZW50LCAndG91Y2htb3ZlJywgdGhpcy5faGFuZGxlRmFsbGJhY2tBdXRvU2Nyb2xsKTtcbiAgICAgICAgb2ZmKGRvY3VtZW50LCAnbW91c2Vtb3ZlJywgdGhpcy5faGFuZGxlRmFsbGJhY2tBdXRvU2Nyb2xsKTtcbiAgICAgIH1cblxuICAgICAgY2xlYXJQb2ludGVyRWxlbUNoYW5nZWRJbnRlcnZhbCgpO1xuICAgICAgY2xlYXJBdXRvU2Nyb2xscygpO1xuICAgICAgY2FuY2VsVGhyb3R0bGUoKTtcbiAgICB9LFxuICAgIG51bGxpbmc6IGZ1bmN0aW9uIG51bGxpbmcoKSB7XG4gICAgICB0b3VjaEV2dCQxID0gc2Nyb2xsUm9vdEVsID0gc2Nyb2xsRWwgPSBzY3JvbGxpbmcgPSBwb2ludGVyRWxlbUNoYW5nZWRJbnRlcnZhbCA9IGxhc3RBdXRvU2Nyb2xsWCA9IGxhc3RBdXRvU2Nyb2xsWSA9IG51bGw7XG4gICAgICBhdXRvU2Nyb2xscy5sZW5ndGggPSAwO1xuICAgIH0sXG4gICAgX2hhbmRsZUZhbGxiYWNrQXV0b1Njcm9sbDogZnVuY3Rpb24gX2hhbmRsZUZhbGxiYWNrQXV0b1Njcm9sbChldnQpIHtcbiAgICAgIHRoaXMuX2hhbmRsZUF1dG9TY3JvbGwoZXZ0LCB0cnVlKTtcbiAgICB9LFxuICAgIF9oYW5kbGVBdXRvU2Nyb2xsOiBmdW5jdGlvbiBfaGFuZGxlQXV0b1Njcm9sbChldnQsIGZhbGxiYWNrKSB7XG4gICAgICB2YXIgX3RoaXMgPSB0aGlzO1xuXG4gICAgICB2YXIgeCA9IChldnQudG91Y2hlcyA/IGV2dC50b3VjaGVzWzBdIDogZXZ0KS5jbGllbnRYLFxuICAgICAgICAgIHkgPSAoZXZ0LnRvdWNoZXMgPyBldnQudG91Y2hlc1swXSA6IGV2dCkuY2xpZW50WSxcbiAgICAgICAgICBlbGVtID0gZG9jdW1lbnQuZWxlbWVudEZyb21Qb2ludCh4LCB5KTtcbiAgICAgIHRvdWNoRXZ0JDEgPSBldnQ7IC8vIElFIGRvZXMgbm90IHNlZW0gdG8gaGF2ZSBuYXRpdmUgYXV0b3Njcm9sbCxcbiAgICAgIC8vIEVkZ2UncyBhdXRvc2Nyb2xsIHNlZW1zIHRvbyBjb25kaXRpb25hbCxcbiAgICAgIC8vIE1BQ09TIFNhZmFyaSBkb2VzIG5vdCBoYXZlIGF1dG9zY3JvbGwsXG4gICAgICAvLyBGaXJlZm94IGFuZCBDaHJvbWUgYXJlIGdvb2RcblxuICAgICAgaWYgKGZhbGxiYWNrIHx8IHRoaXMub3B0aW9ucy5mb3JjZUF1dG9TY3JvbGxGYWxsYmFjayB8fCBFZGdlIHx8IElFMTFPckxlc3MgfHwgU2FmYXJpKSB7XG4gICAgICAgIGF1dG9TY3JvbGwoZXZ0LCB0aGlzLm9wdGlvbnMsIGVsZW0sIGZhbGxiYWNrKTsgLy8gTGlzdGVuZXIgZm9yIHBvaW50ZXIgZWxlbWVudCBjaGFuZ2VcblxuICAgICAgICB2YXIgb2dFbGVtU2Nyb2xsZXIgPSBnZXRQYXJlbnRBdXRvU2Nyb2xsRWxlbWVudChlbGVtLCB0cnVlKTtcblxuICAgICAgICBpZiAoc2Nyb2xsaW5nICYmICghcG9pbnRlckVsZW1DaGFuZ2VkSW50ZXJ2YWwgfHwgeCAhPT0gbGFzdEF1dG9TY3JvbGxYIHx8IHkgIT09IGxhc3RBdXRvU2Nyb2xsWSkpIHtcbiAgICAgICAgICBwb2ludGVyRWxlbUNoYW5nZWRJbnRlcnZhbCAmJiBjbGVhclBvaW50ZXJFbGVtQ2hhbmdlZEludGVydmFsKCk7IC8vIERldGVjdCBmb3IgcG9pbnRlciBlbGVtIGNoYW5nZSwgZW11bGF0aW5nIG5hdGl2ZSBEbkQgYmVoYXZpb3VyXG5cbiAgICAgICAgICBwb2ludGVyRWxlbUNoYW5nZWRJbnRlcnZhbCA9IHNldEludGVydmFsKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHZhciBuZXdFbGVtID0gZ2V0UGFyZW50QXV0b1Njcm9sbEVsZW1lbnQoZG9jdW1lbnQuZWxlbWVudEZyb21Qb2ludCh4LCB5KSwgdHJ1ZSk7XG5cbiAgICAgICAgICAgIGlmIChuZXdFbGVtICE9PSBvZ0VsZW1TY3JvbGxlcikge1xuICAgICAgICAgICAgICBvZ0VsZW1TY3JvbGxlciA9IG5ld0VsZW07XG4gICAgICAgICAgICAgIGNsZWFyQXV0b1Njcm9sbHMoKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgYXV0b1Njcm9sbChldnQsIF90aGlzLm9wdGlvbnMsIG5ld0VsZW0sIGZhbGxiYWNrKTtcbiAgICAgICAgICB9LCAxMCk7XG4gICAgICAgICAgbGFzdEF1dG9TY3JvbGxYID0geDtcbiAgICAgICAgICBsYXN0QXV0b1Njcm9sbFkgPSB5O1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICAvLyBpZiBEbkQgaXMgZW5hYmxlZCAoYW5kIGJyb3dzZXIgaGFzIGdvb2QgYXV0b3Njcm9sbGluZyksIGZpcnN0IGF1dG9zY3JvbGwgd2lsbCBhbHJlYWR5IHNjcm9sbCwgc28gZ2V0IHBhcmVudCBhdXRvc2Nyb2xsIG9mIGZpcnN0IGF1dG9zY3JvbGxcbiAgICAgICAgaWYgKCF0aGlzLm9wdGlvbnMuYnViYmxlU2Nyb2xsIHx8IGdldFBhcmVudEF1dG9TY3JvbGxFbGVtZW50KGVsZW0sIHRydWUpID09PSBnZXRXaW5kb3dTY3JvbGxpbmdFbGVtZW50KCkpIHtcbiAgICAgICAgICBjbGVhckF1dG9TY3JvbGxzKCk7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgYXV0b1Njcm9sbChldnQsIHRoaXMub3B0aW9ucywgZ2V0UGFyZW50QXV0b1Njcm9sbEVsZW1lbnQoZWxlbSwgZmFsc2UpLCBmYWxzZSk7XG4gICAgICB9XG4gICAgfVxuICB9O1xuICByZXR1cm4gX2V4dGVuZHMoQXV0b1Njcm9sbCwge1xuICAgIHBsdWdpbk5hbWU6ICdzY3JvbGwnLFxuICAgIGluaXRpYWxpemVCeURlZmF1bHQ6IHRydWVcbiAgfSk7XG59XG5cbmZ1bmN0aW9uIGNsZWFyQXV0b1Njcm9sbHMoKSB7XG4gIGF1dG9TY3JvbGxzLmZvckVhY2goZnVuY3Rpb24gKGF1dG9TY3JvbGwpIHtcbiAgICBjbGVhckludGVydmFsKGF1dG9TY3JvbGwucGlkKTtcbiAgfSk7XG4gIGF1dG9TY3JvbGxzID0gW107XG59XG5cbmZ1bmN0aW9uIGNsZWFyUG9pbnRlckVsZW1DaGFuZ2VkSW50ZXJ2YWwoKSB7XG4gIGNsZWFySW50ZXJ2YWwocG9pbnRlckVsZW1DaGFuZ2VkSW50ZXJ2YWwpO1xufVxuXG52YXIgYXV0b1Njcm9sbCA9IHRocm90dGxlKGZ1bmN0aW9uIChldnQsIG9wdGlvbnMsIHJvb3RFbCwgaXNGYWxsYmFjaykge1xuICAvLyBCdWc6IGh0dHBzOi8vYnVnemlsbGEubW96aWxsYS5vcmcvc2hvd19idWcuY2dpP2lkPTUwNTUyMVxuICBpZiAoIW9wdGlvbnMuc2Nyb2xsKSByZXR1cm47XG4gIHZhciB4ID0gKGV2dC50b3VjaGVzID8gZXZ0LnRvdWNoZXNbMF0gOiBldnQpLmNsaWVudFgsXG4gICAgICB5ID0gKGV2dC50b3VjaGVzID8gZXZ0LnRvdWNoZXNbMF0gOiBldnQpLmNsaWVudFksXG4gICAgICBzZW5zID0gb3B0aW9ucy5zY3JvbGxTZW5zaXRpdml0eSxcbiAgICAgIHNwZWVkID0gb3B0aW9ucy5zY3JvbGxTcGVlZCxcbiAgICAgIHdpblNjcm9sbGVyID0gZ2V0V2luZG93U2Nyb2xsaW5nRWxlbWVudCgpO1xuICB2YXIgc2Nyb2xsVGhpc0luc3RhbmNlID0gZmFsc2UsXG4gICAgICBzY3JvbGxDdXN0b21GbjsgLy8gTmV3IHNjcm9sbCByb290LCBzZXQgc2Nyb2xsRWxcblxuICBpZiAoc2Nyb2xsUm9vdEVsICE9PSByb290RWwpIHtcbiAgICBzY3JvbGxSb290RWwgPSByb290RWw7XG4gICAgY2xlYXJBdXRvU2Nyb2xscygpO1xuICAgIHNjcm9sbEVsID0gb3B0aW9ucy5zY3JvbGw7XG4gICAgc2Nyb2xsQ3VzdG9tRm4gPSBvcHRpb25zLnNjcm9sbEZuO1xuXG4gICAgaWYgKHNjcm9sbEVsID09PSB0cnVlKSB7XG4gICAgICBzY3JvbGxFbCA9IGdldFBhcmVudEF1dG9TY3JvbGxFbGVtZW50KHJvb3RFbCwgdHJ1ZSk7XG4gICAgfVxuICB9XG5cbiAgdmFyIGxheWVyc091dCA9IDA7XG4gIHZhciBjdXJyZW50UGFyZW50ID0gc2Nyb2xsRWw7XG5cbiAgZG8ge1xuICAgIHZhciBlbCA9IGN1cnJlbnRQYXJlbnQsXG4gICAgICAgIHJlY3QgPSBnZXRSZWN0KGVsKSxcbiAgICAgICAgdG9wID0gcmVjdC50b3AsXG4gICAgICAgIGJvdHRvbSA9IHJlY3QuYm90dG9tLFxuICAgICAgICBsZWZ0ID0gcmVjdC5sZWZ0LFxuICAgICAgICByaWdodCA9IHJlY3QucmlnaHQsXG4gICAgICAgIHdpZHRoID0gcmVjdC53aWR0aCxcbiAgICAgICAgaGVpZ2h0ID0gcmVjdC5oZWlnaHQsXG4gICAgICAgIGNhblNjcm9sbFggPSB2b2lkIDAsXG4gICAgICAgIGNhblNjcm9sbFkgPSB2b2lkIDAsXG4gICAgICAgIHNjcm9sbFdpZHRoID0gZWwuc2Nyb2xsV2lkdGgsXG4gICAgICAgIHNjcm9sbEhlaWdodCA9IGVsLnNjcm9sbEhlaWdodCxcbiAgICAgICAgZWxDU1MgPSBjc3MoZWwpLFxuICAgICAgICBzY3JvbGxQb3NYID0gZWwuc2Nyb2xsTGVmdCxcbiAgICAgICAgc2Nyb2xsUG9zWSA9IGVsLnNjcm9sbFRvcDtcblxuICAgIGlmIChlbCA9PT0gd2luU2Nyb2xsZXIpIHtcbiAgICAgIGNhblNjcm9sbFggPSB3aWR0aCA8IHNjcm9sbFdpZHRoICYmIChlbENTUy5vdmVyZmxvd1ggPT09ICdhdXRvJyB8fCBlbENTUy5vdmVyZmxvd1ggPT09ICdzY3JvbGwnIHx8IGVsQ1NTLm92ZXJmbG93WCA9PT0gJ3Zpc2libGUnKTtcbiAgICAgIGNhblNjcm9sbFkgPSBoZWlnaHQgPCBzY3JvbGxIZWlnaHQgJiYgKGVsQ1NTLm92ZXJmbG93WSA9PT0gJ2F1dG8nIHx8IGVsQ1NTLm92ZXJmbG93WSA9PT0gJ3Njcm9sbCcgfHwgZWxDU1Mub3ZlcmZsb3dZID09PSAndmlzaWJsZScpO1xuICAgIH0gZWxzZSB7XG4gICAgICBjYW5TY3JvbGxYID0gd2lkdGggPCBzY3JvbGxXaWR0aCAmJiAoZWxDU1Mub3ZlcmZsb3dYID09PSAnYXV0bycgfHwgZWxDU1Mub3ZlcmZsb3dYID09PSAnc2Nyb2xsJyk7XG4gICAgICBjYW5TY3JvbGxZID0gaGVpZ2h0IDwgc2Nyb2xsSGVpZ2h0ICYmIChlbENTUy5vdmVyZmxvd1kgPT09ICdhdXRvJyB8fCBlbENTUy5vdmVyZmxvd1kgPT09ICdzY3JvbGwnKTtcbiAgICB9XG5cbiAgICB2YXIgdnggPSBjYW5TY3JvbGxYICYmIChNYXRoLmFicyhyaWdodCAtIHgpIDw9IHNlbnMgJiYgc2Nyb2xsUG9zWCArIHdpZHRoIDwgc2Nyb2xsV2lkdGgpIC0gKE1hdGguYWJzKGxlZnQgLSB4KSA8PSBzZW5zICYmICEhc2Nyb2xsUG9zWCk7XG4gICAgdmFyIHZ5ID0gY2FuU2Nyb2xsWSAmJiAoTWF0aC5hYnMoYm90dG9tIC0geSkgPD0gc2VucyAmJiBzY3JvbGxQb3NZICsgaGVpZ2h0IDwgc2Nyb2xsSGVpZ2h0KSAtIChNYXRoLmFicyh0b3AgLSB5KSA8PSBzZW5zICYmICEhc2Nyb2xsUG9zWSk7XG5cbiAgICBpZiAoIWF1dG9TY3JvbGxzW2xheWVyc091dF0pIHtcbiAgICAgIGZvciAodmFyIGkgPSAwOyBpIDw9IGxheWVyc091dDsgaSsrKSB7XG4gICAgICAgIGlmICghYXV0b1Njcm9sbHNbaV0pIHtcbiAgICAgICAgICBhdXRvU2Nyb2xsc1tpXSA9IHt9O1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKGF1dG9TY3JvbGxzW2xheWVyc091dF0udnggIT0gdnggfHwgYXV0b1Njcm9sbHNbbGF5ZXJzT3V0XS52eSAhPSB2eSB8fCBhdXRvU2Nyb2xsc1tsYXllcnNPdXRdLmVsICE9PSBlbCkge1xuICAgICAgYXV0b1Njcm9sbHNbbGF5ZXJzT3V0XS5lbCA9IGVsO1xuICAgICAgYXV0b1Njcm9sbHNbbGF5ZXJzT3V0XS52eCA9IHZ4O1xuICAgICAgYXV0b1Njcm9sbHNbbGF5ZXJzT3V0XS52eSA9IHZ5O1xuICAgICAgY2xlYXJJbnRlcnZhbChhdXRvU2Nyb2xsc1tsYXllcnNPdXRdLnBpZCk7XG5cbiAgICAgIGlmICh2eCAhPSAwIHx8IHZ5ICE9IDApIHtcbiAgICAgICAgc2Nyb2xsVGhpc0luc3RhbmNlID0gdHJ1ZTtcbiAgICAgICAgLyoganNoaW50IGxvb3BmdW5jOnRydWUgKi9cblxuICAgICAgICBhdXRvU2Nyb2xsc1tsYXllcnNPdXRdLnBpZCA9IHNldEludGVydmFsKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAvLyBlbXVsYXRlIGRyYWcgb3ZlciBkdXJpbmcgYXV0b3Njcm9sbCAoZmFsbGJhY2spLCBlbXVsYXRpbmcgbmF0aXZlIERuRCBiZWhhdmlvdXJcbiAgICAgICAgICBpZiAoaXNGYWxsYmFjayAmJiB0aGlzLmxheWVyID09PSAwKSB7XG4gICAgICAgICAgICBTb3J0YWJsZS5hY3RpdmUuX29uVG91Y2hNb3ZlKHRvdWNoRXZ0JDEpOyAvLyBUbyBtb3ZlIGdob3N0IGlmIGl0IGlzIHBvc2l0aW9uZWQgYWJzb2x1dGVseVxuXG4gICAgICAgICAgfVxuXG4gICAgICAgICAgdmFyIHNjcm9sbE9mZnNldFkgPSBhdXRvU2Nyb2xsc1t0aGlzLmxheWVyXS52eSA/IGF1dG9TY3JvbGxzW3RoaXMubGF5ZXJdLnZ5ICogc3BlZWQgOiAwO1xuICAgICAgICAgIHZhciBzY3JvbGxPZmZzZXRYID0gYXV0b1Njcm9sbHNbdGhpcy5sYXllcl0udnggPyBhdXRvU2Nyb2xsc1t0aGlzLmxheWVyXS52eCAqIHNwZWVkIDogMDtcblxuICAgICAgICAgIGlmICh0eXBlb2Ygc2Nyb2xsQ3VzdG9tRm4gPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICAgIGlmIChzY3JvbGxDdXN0b21Gbi5jYWxsKFNvcnRhYmxlLmRyYWdnZWQucGFyZW50Tm9kZVtleHBhbmRvXSwgc2Nyb2xsT2Zmc2V0WCwgc2Nyb2xsT2Zmc2V0WSwgZXZ0LCB0b3VjaEV2dCQxLCBhdXRvU2Nyb2xsc1t0aGlzLmxheWVyXS5lbCkgIT09ICdjb250aW51ZScpIHtcbiAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cblxuICAgICAgICAgIHNjcm9sbEJ5KGF1dG9TY3JvbGxzW3RoaXMubGF5ZXJdLmVsLCBzY3JvbGxPZmZzZXRYLCBzY3JvbGxPZmZzZXRZKTtcbiAgICAgICAgfS5iaW5kKHtcbiAgICAgICAgICBsYXllcjogbGF5ZXJzT3V0XG4gICAgICAgIH0pLCAyNCk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgbGF5ZXJzT3V0Kys7XG4gIH0gd2hpbGUgKG9wdGlvbnMuYnViYmxlU2Nyb2xsICYmIGN1cnJlbnRQYXJlbnQgIT09IHdpblNjcm9sbGVyICYmIChjdXJyZW50UGFyZW50ID0gZ2V0UGFyZW50QXV0b1Njcm9sbEVsZW1lbnQoY3VycmVudFBhcmVudCwgZmFsc2UpKSk7XG5cbiAgc2Nyb2xsaW5nID0gc2Nyb2xsVGhpc0luc3RhbmNlOyAvLyBpbiBjYXNlIGFub3RoZXIgZnVuY3Rpb24gY2F0Y2hlcyBzY3JvbGxpbmcgYXMgZmFsc2UgaW4gYmV0d2VlbiB3aGVuIGl0IGlzIG5vdFxufSwgMzApO1xuXG52YXIgZHJvcCA9IGZ1bmN0aW9uIGRyb3AoX3JlZikge1xuICB2YXIgb3JpZ2luYWxFdmVudCA9IF9yZWYub3JpZ2luYWxFdmVudCxcbiAgICAgIHB1dFNvcnRhYmxlID0gX3JlZi5wdXRTb3J0YWJsZSxcbiAgICAgIGRyYWdFbCA9IF9yZWYuZHJhZ0VsLFxuICAgICAgYWN0aXZlU29ydGFibGUgPSBfcmVmLmFjdGl2ZVNvcnRhYmxlLFxuICAgICAgZGlzcGF0Y2hTb3J0YWJsZUV2ZW50ID0gX3JlZi5kaXNwYXRjaFNvcnRhYmxlRXZlbnQsXG4gICAgICBoaWRlR2hvc3RGb3JUYXJnZXQgPSBfcmVmLmhpZGVHaG9zdEZvclRhcmdldCxcbiAgICAgIHVuaGlkZUdob3N0Rm9yVGFyZ2V0ID0gX3JlZi51bmhpZGVHaG9zdEZvclRhcmdldDtcbiAgaWYgKCFvcmlnaW5hbEV2ZW50KSByZXR1cm47XG4gIHZhciB0b1NvcnRhYmxlID0gcHV0U29ydGFibGUgfHwgYWN0aXZlU29ydGFibGU7XG4gIGhpZGVHaG9zdEZvclRhcmdldCgpO1xuICB2YXIgdG91Y2ggPSBvcmlnaW5hbEV2ZW50LmNoYW5nZWRUb3VjaGVzICYmIG9yaWdpbmFsRXZlbnQuY2hhbmdlZFRvdWNoZXMubGVuZ3RoID8gb3JpZ2luYWxFdmVudC5jaGFuZ2VkVG91Y2hlc1swXSA6IG9yaWdpbmFsRXZlbnQ7XG4gIHZhciB0YXJnZXQgPSBkb2N1bWVudC5lbGVtZW50RnJvbVBvaW50KHRvdWNoLmNsaWVudFgsIHRvdWNoLmNsaWVudFkpO1xuICB1bmhpZGVHaG9zdEZvclRhcmdldCgpO1xuXG4gIGlmICh0b1NvcnRhYmxlICYmICF0b1NvcnRhYmxlLmVsLmNvbnRhaW5zKHRhcmdldCkpIHtcbiAgICBkaXNwYXRjaFNvcnRhYmxlRXZlbnQoJ3NwaWxsJyk7XG4gICAgdGhpcy5vblNwaWxsKHtcbiAgICAgIGRyYWdFbDogZHJhZ0VsLFxuICAgICAgcHV0U29ydGFibGU6IHB1dFNvcnRhYmxlXG4gICAgfSk7XG4gIH1cbn07XG5cbmZ1bmN0aW9uIFJldmVydCgpIHt9XG5cblJldmVydC5wcm90b3R5cGUgPSB7XG4gIHN0YXJ0SW5kZXg6IG51bGwsXG4gIGRyYWdTdGFydDogZnVuY3Rpb24gZHJhZ1N0YXJ0KF9yZWYyKSB7XG4gICAgdmFyIG9sZERyYWdnYWJsZUluZGV4ID0gX3JlZjIub2xkRHJhZ2dhYmxlSW5kZXg7XG4gICAgdGhpcy5zdGFydEluZGV4ID0gb2xkRHJhZ2dhYmxlSW5kZXg7XG4gIH0sXG4gIG9uU3BpbGw6IGZ1bmN0aW9uIG9uU3BpbGwoX3JlZjMpIHtcbiAgICB2YXIgZHJhZ0VsID0gX3JlZjMuZHJhZ0VsLFxuICAgICAgICBwdXRTb3J0YWJsZSA9IF9yZWYzLnB1dFNvcnRhYmxlO1xuICAgIHRoaXMuc29ydGFibGUuY2FwdHVyZUFuaW1hdGlvblN0YXRlKCk7XG5cbiAgICBpZiAocHV0U29ydGFibGUpIHtcbiAgICAgIHB1dFNvcnRhYmxlLmNhcHR1cmVBbmltYXRpb25TdGF0ZSgpO1xuICAgIH1cblxuICAgIHZhciBuZXh0U2libGluZyA9IGdldENoaWxkKHRoaXMuc29ydGFibGUuZWwsIHRoaXMuc3RhcnRJbmRleCwgdGhpcy5vcHRpb25zKTtcblxuICAgIGlmIChuZXh0U2libGluZykge1xuICAgICAgdGhpcy5zb3J0YWJsZS5lbC5pbnNlcnRCZWZvcmUoZHJhZ0VsLCBuZXh0U2libGluZyk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMuc29ydGFibGUuZWwuYXBwZW5kQ2hpbGQoZHJhZ0VsKTtcbiAgICB9XG5cbiAgICB0aGlzLnNvcnRhYmxlLmFuaW1hdGVBbGwoKTtcblxuICAgIGlmIChwdXRTb3J0YWJsZSkge1xuICAgICAgcHV0U29ydGFibGUuYW5pbWF0ZUFsbCgpO1xuICAgIH1cbiAgfSxcbiAgZHJvcDogZHJvcFxufTtcblxuX2V4dGVuZHMoUmV2ZXJ0LCB7XG4gIHBsdWdpbk5hbWU6ICdyZXZlcnRPblNwaWxsJ1xufSk7XG5cbmZ1bmN0aW9uIFJlbW92ZSgpIHt9XG5cblJlbW92ZS5wcm90b3R5cGUgPSB7XG4gIG9uU3BpbGw6IGZ1bmN0aW9uIG9uU3BpbGwoX3JlZjQpIHtcbiAgICB2YXIgZHJhZ0VsID0gX3JlZjQuZHJhZ0VsLFxuICAgICAgICBwdXRTb3J0YWJsZSA9IF9yZWY0LnB1dFNvcnRhYmxlO1xuICAgIHZhciBwYXJlbnRTb3J0YWJsZSA9IHB1dFNvcnRhYmxlIHx8IHRoaXMuc29ydGFibGU7XG4gICAgcGFyZW50U29ydGFibGUuY2FwdHVyZUFuaW1hdGlvblN0YXRlKCk7XG4gICAgZHJhZ0VsLnBhcmVudE5vZGUgJiYgZHJhZ0VsLnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQoZHJhZ0VsKTtcbiAgICBwYXJlbnRTb3J0YWJsZS5hbmltYXRlQWxsKCk7XG4gIH0sXG4gIGRyb3A6IGRyb3Bcbn07XG5cbl9leHRlbmRzKFJlbW92ZSwge1xuICBwbHVnaW5OYW1lOiAncmVtb3ZlT25TcGlsbCdcbn0pO1xuXG52YXIgbGFzdFN3YXBFbDtcblxuZnVuY3Rpb24gU3dhcFBsdWdpbigpIHtcbiAgZnVuY3Rpb24gU3dhcCgpIHtcbiAgICB0aGlzLmRlZmF1bHRzID0ge1xuICAgICAgc3dhcENsYXNzOiAnc29ydGFibGUtc3dhcC1oaWdobGlnaHQnXG4gICAgfTtcbiAgfVxuXG4gIFN3YXAucHJvdG90eXBlID0ge1xuICAgIGRyYWdTdGFydDogZnVuY3Rpb24gZHJhZ1N0YXJ0KF9yZWYpIHtcbiAgICAgIHZhciBkcmFnRWwgPSBfcmVmLmRyYWdFbDtcbiAgICAgIGxhc3RTd2FwRWwgPSBkcmFnRWw7XG4gICAgfSxcbiAgICBkcmFnT3ZlclZhbGlkOiBmdW5jdGlvbiBkcmFnT3ZlclZhbGlkKF9yZWYyKSB7XG4gICAgICB2YXIgY29tcGxldGVkID0gX3JlZjIuY29tcGxldGVkLFxuICAgICAgICAgIHRhcmdldCA9IF9yZWYyLnRhcmdldCxcbiAgICAgICAgICBvbk1vdmUgPSBfcmVmMi5vbk1vdmUsXG4gICAgICAgICAgYWN0aXZlU29ydGFibGUgPSBfcmVmMi5hY3RpdmVTb3J0YWJsZSxcbiAgICAgICAgICBjaGFuZ2VkID0gX3JlZjIuY2hhbmdlZCxcbiAgICAgICAgICBjYW5jZWwgPSBfcmVmMi5jYW5jZWw7XG4gICAgICBpZiAoIWFjdGl2ZVNvcnRhYmxlLm9wdGlvbnMuc3dhcCkgcmV0dXJuO1xuICAgICAgdmFyIGVsID0gdGhpcy5zb3J0YWJsZS5lbCxcbiAgICAgICAgICBvcHRpb25zID0gdGhpcy5vcHRpb25zO1xuXG4gICAgICBpZiAodGFyZ2V0ICYmIHRhcmdldCAhPT0gZWwpIHtcbiAgICAgICAgdmFyIHByZXZTd2FwRWwgPSBsYXN0U3dhcEVsO1xuXG4gICAgICAgIGlmIChvbk1vdmUodGFyZ2V0KSAhPT0gZmFsc2UpIHtcbiAgICAgICAgICB0b2dnbGVDbGFzcyh0YXJnZXQsIG9wdGlvbnMuc3dhcENsYXNzLCB0cnVlKTtcbiAgICAgICAgICBsYXN0U3dhcEVsID0gdGFyZ2V0O1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGxhc3RTd2FwRWwgPSBudWxsO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHByZXZTd2FwRWwgJiYgcHJldlN3YXBFbCAhPT0gbGFzdFN3YXBFbCkge1xuICAgICAgICAgIHRvZ2dsZUNsYXNzKHByZXZTd2FwRWwsIG9wdGlvbnMuc3dhcENsYXNzLCBmYWxzZSk7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgY2hhbmdlZCgpO1xuICAgICAgY29tcGxldGVkKHRydWUpO1xuICAgICAgY2FuY2VsKCk7XG4gICAgfSxcbiAgICBkcm9wOiBmdW5jdGlvbiBkcm9wKF9yZWYzKSB7XG4gICAgICB2YXIgYWN0aXZlU29ydGFibGUgPSBfcmVmMy5hY3RpdmVTb3J0YWJsZSxcbiAgICAgICAgICBwdXRTb3J0YWJsZSA9IF9yZWYzLnB1dFNvcnRhYmxlLFxuICAgICAgICAgIGRyYWdFbCA9IF9yZWYzLmRyYWdFbDtcbiAgICAgIHZhciB0b1NvcnRhYmxlID0gcHV0U29ydGFibGUgfHwgdGhpcy5zb3J0YWJsZTtcbiAgICAgIHZhciBvcHRpb25zID0gdGhpcy5vcHRpb25zO1xuICAgICAgbGFzdFN3YXBFbCAmJiB0b2dnbGVDbGFzcyhsYXN0U3dhcEVsLCBvcHRpb25zLnN3YXBDbGFzcywgZmFsc2UpO1xuXG4gICAgICBpZiAobGFzdFN3YXBFbCAmJiAob3B0aW9ucy5zd2FwIHx8IHB1dFNvcnRhYmxlICYmIHB1dFNvcnRhYmxlLm9wdGlvbnMuc3dhcCkpIHtcbiAgICAgICAgaWYgKGRyYWdFbCAhPT0gbGFzdFN3YXBFbCkge1xuICAgICAgICAgIHRvU29ydGFibGUuY2FwdHVyZUFuaW1hdGlvblN0YXRlKCk7XG4gICAgICAgICAgaWYgKHRvU29ydGFibGUgIT09IGFjdGl2ZVNvcnRhYmxlKSBhY3RpdmVTb3J0YWJsZS5jYXB0dXJlQW5pbWF0aW9uU3RhdGUoKTtcbiAgICAgICAgICBzd2FwTm9kZXMoZHJhZ0VsLCBsYXN0U3dhcEVsKTtcbiAgICAgICAgICB0b1NvcnRhYmxlLmFuaW1hdGVBbGwoKTtcbiAgICAgICAgICBpZiAodG9Tb3J0YWJsZSAhPT0gYWN0aXZlU29ydGFibGUpIGFjdGl2ZVNvcnRhYmxlLmFuaW1hdGVBbGwoKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0sXG4gICAgbnVsbGluZzogZnVuY3Rpb24gbnVsbGluZygpIHtcbiAgICAgIGxhc3RTd2FwRWwgPSBudWxsO1xuICAgIH1cbiAgfTtcbiAgcmV0dXJuIF9leHRlbmRzKFN3YXAsIHtcbiAgICBwbHVnaW5OYW1lOiAnc3dhcCcsXG4gICAgZXZlbnRQcm9wZXJ0aWVzOiBmdW5jdGlvbiBldmVudFByb3BlcnRpZXMoKSB7XG4gICAgICByZXR1cm4ge1xuICAgICAgICBzd2FwSXRlbTogbGFzdFN3YXBFbFxuICAgICAgfTtcbiAgICB9XG4gIH0pO1xufVxuXG5mdW5jdGlvbiBzd2FwTm9kZXMobjEsIG4yKSB7XG4gIHZhciBwMSA9IG4xLnBhcmVudE5vZGUsXG4gICAgICBwMiA9IG4yLnBhcmVudE5vZGUsXG4gICAgICBpMSxcbiAgICAgIGkyO1xuICBpZiAoIXAxIHx8ICFwMiB8fCBwMS5pc0VxdWFsTm9kZShuMikgfHwgcDIuaXNFcXVhbE5vZGUobjEpKSByZXR1cm47XG4gIGkxID0gaW5kZXgobjEpO1xuICBpMiA9IGluZGV4KG4yKTtcblxuICBpZiAocDEuaXNFcXVhbE5vZGUocDIpICYmIGkxIDwgaTIpIHtcbiAgICBpMisrO1xuICB9XG5cbiAgcDEuaW5zZXJ0QmVmb3JlKG4yLCBwMS5jaGlsZHJlbltpMV0pO1xuICBwMi5pbnNlcnRCZWZvcmUobjEsIHAyLmNoaWxkcmVuW2kyXSk7XG59XG5cbnZhciBtdWx0aURyYWdFbGVtZW50cyA9IFtdLFxuICAgIG11bHRpRHJhZ0Nsb25lcyA9IFtdLFxuICAgIGxhc3RNdWx0aURyYWdTZWxlY3QsXG4gICAgLy8gZm9yIHNlbGVjdGlvbiB3aXRoIG1vZGlmaWVyIGtleSBkb3duIChTSElGVClcbm11bHRpRHJhZ1NvcnRhYmxlLFxuICAgIGluaXRpYWxGb2xkaW5nID0gZmFsc2UsXG4gICAgLy8gSW5pdGlhbCBtdWx0aS1kcmFnIGZvbGQgd2hlbiBkcmFnIHN0YXJ0ZWRcbmZvbGRpbmcgPSBmYWxzZSxcbiAgICAvLyBGb2xkaW5nIGFueSBvdGhlciB0aW1lXG5kcmFnU3RhcnRlZCA9IGZhbHNlLFxuICAgIGRyYWdFbCQxLFxuICAgIGNsb25lc0Zyb21SZWN0LFxuICAgIGNsb25lc0hpZGRlbjtcblxuZnVuY3Rpb24gTXVsdGlEcmFnUGx1Z2luKCkge1xuICBmdW5jdGlvbiBNdWx0aURyYWcoc29ydGFibGUpIHtcbiAgICAvLyBCaW5kIGFsbCBwcml2YXRlIG1ldGhvZHNcbiAgICBmb3IgKHZhciBmbiBpbiB0aGlzKSB7XG4gICAgICBpZiAoZm4uY2hhckF0KDApID09PSAnXycgJiYgdHlwZW9mIHRoaXNbZm5dID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgIHRoaXNbZm5dID0gdGhpc1tmbl0uYmluZCh0aGlzKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAoIXNvcnRhYmxlLm9wdGlvbnMuYXZvaWRJbXBsaWNpdERlc2VsZWN0KSB7XG4gICAgICBpZiAoc29ydGFibGUub3B0aW9ucy5zdXBwb3J0UG9pbnRlcikge1xuICAgICAgICBvbihkb2N1bWVudCwgJ3BvaW50ZXJ1cCcsIHRoaXMuX2Rlc2VsZWN0TXVsdGlEcmFnKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIG9uKGRvY3VtZW50LCAnbW91c2V1cCcsIHRoaXMuX2Rlc2VsZWN0TXVsdGlEcmFnKTtcbiAgICAgICAgb24oZG9jdW1lbnQsICd0b3VjaGVuZCcsIHRoaXMuX2Rlc2VsZWN0TXVsdGlEcmFnKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBvbihkb2N1bWVudCwgJ2tleWRvd24nLCB0aGlzLl9jaGVja0tleURvd24pO1xuICAgIG9uKGRvY3VtZW50LCAna2V5dXAnLCB0aGlzLl9jaGVja0tleVVwKTtcbiAgICB0aGlzLmRlZmF1bHRzID0ge1xuICAgICAgc2VsZWN0ZWRDbGFzczogJ3NvcnRhYmxlLXNlbGVjdGVkJyxcbiAgICAgIG11bHRpRHJhZ0tleTogbnVsbCxcbiAgICAgIGF2b2lkSW1wbGljaXREZXNlbGVjdDogZmFsc2UsXG4gICAgICBzZXREYXRhOiBmdW5jdGlvbiBzZXREYXRhKGRhdGFUcmFuc2ZlciwgZHJhZ0VsKSB7XG4gICAgICAgIHZhciBkYXRhID0gJyc7XG5cbiAgICAgICAgaWYgKG11bHRpRHJhZ0VsZW1lbnRzLmxlbmd0aCAmJiBtdWx0aURyYWdTb3J0YWJsZSA9PT0gc29ydGFibGUpIHtcbiAgICAgICAgICBtdWx0aURyYWdFbGVtZW50cy5mb3JFYWNoKGZ1bmN0aW9uIChtdWx0aURyYWdFbGVtZW50LCBpKSB7XG4gICAgICAgICAgICBkYXRhICs9ICghaSA/ICcnIDogJywgJykgKyBtdWx0aURyYWdFbGVtZW50LnRleHRDb250ZW50O1xuICAgICAgICAgIH0pO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGRhdGEgPSBkcmFnRWwudGV4dENvbnRlbnQ7XG4gICAgICAgIH1cblxuICAgICAgICBkYXRhVHJhbnNmZXIuc2V0RGF0YSgnVGV4dCcsIGRhdGEpO1xuICAgICAgfVxuICAgIH07XG4gIH1cblxuICBNdWx0aURyYWcucHJvdG90eXBlID0ge1xuICAgIG11bHRpRHJhZ0tleURvd246IGZhbHNlLFxuICAgIGlzTXVsdGlEcmFnOiBmYWxzZSxcbiAgICBkZWxheVN0YXJ0R2xvYmFsOiBmdW5jdGlvbiBkZWxheVN0YXJ0R2xvYmFsKF9yZWYpIHtcbiAgICAgIHZhciBkcmFnZ2VkID0gX3JlZi5kcmFnRWw7XG4gICAgICBkcmFnRWwkMSA9IGRyYWdnZWQ7XG4gICAgfSxcbiAgICBkZWxheUVuZGVkOiBmdW5jdGlvbiBkZWxheUVuZGVkKCkge1xuICAgICAgdGhpcy5pc011bHRpRHJhZyA9IH5tdWx0aURyYWdFbGVtZW50cy5pbmRleE9mKGRyYWdFbCQxKTtcbiAgICB9LFxuICAgIHNldHVwQ2xvbmU6IGZ1bmN0aW9uIHNldHVwQ2xvbmUoX3JlZjIpIHtcbiAgICAgIHZhciBzb3J0YWJsZSA9IF9yZWYyLnNvcnRhYmxlLFxuICAgICAgICAgIGNhbmNlbCA9IF9yZWYyLmNhbmNlbDtcbiAgICAgIGlmICghdGhpcy5pc011bHRpRHJhZykgcmV0dXJuO1xuXG4gICAgICBmb3IgKHZhciBpID0gMDsgaSA8IG11bHRpRHJhZ0VsZW1lbnRzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIG11bHRpRHJhZ0Nsb25lcy5wdXNoKGNsb25lKG11bHRpRHJhZ0VsZW1lbnRzW2ldKSk7XG4gICAgICAgIG11bHRpRHJhZ0Nsb25lc1tpXS5zb3J0YWJsZUluZGV4ID0gbXVsdGlEcmFnRWxlbWVudHNbaV0uc29ydGFibGVJbmRleDtcbiAgICAgICAgbXVsdGlEcmFnQ2xvbmVzW2ldLmRyYWdnYWJsZSA9IGZhbHNlO1xuICAgICAgICBtdWx0aURyYWdDbG9uZXNbaV0uc3R5bGVbJ3dpbGwtY2hhbmdlJ10gPSAnJztcbiAgICAgICAgdG9nZ2xlQ2xhc3MobXVsdGlEcmFnQ2xvbmVzW2ldLCB0aGlzLm9wdGlvbnMuc2VsZWN0ZWRDbGFzcywgZmFsc2UpO1xuICAgICAgICBtdWx0aURyYWdFbGVtZW50c1tpXSA9PT0gZHJhZ0VsJDEgJiYgdG9nZ2xlQ2xhc3MobXVsdGlEcmFnQ2xvbmVzW2ldLCB0aGlzLm9wdGlvbnMuY2hvc2VuQ2xhc3MsIGZhbHNlKTtcbiAgICAgIH1cblxuICAgICAgc29ydGFibGUuX2hpZGVDbG9uZSgpO1xuXG4gICAgICBjYW5jZWwoKTtcbiAgICB9LFxuICAgIGNsb25lOiBmdW5jdGlvbiBjbG9uZShfcmVmMykge1xuICAgICAgdmFyIHNvcnRhYmxlID0gX3JlZjMuc29ydGFibGUsXG4gICAgICAgICAgcm9vdEVsID0gX3JlZjMucm9vdEVsLFxuICAgICAgICAgIGRpc3BhdGNoU29ydGFibGVFdmVudCA9IF9yZWYzLmRpc3BhdGNoU29ydGFibGVFdmVudCxcbiAgICAgICAgICBjYW5jZWwgPSBfcmVmMy5jYW5jZWw7XG4gICAgICBpZiAoIXRoaXMuaXNNdWx0aURyYWcpIHJldHVybjtcblxuICAgICAgaWYgKCF0aGlzLm9wdGlvbnMucmVtb3ZlQ2xvbmVPbkhpZGUpIHtcbiAgICAgICAgaWYgKG11bHRpRHJhZ0VsZW1lbnRzLmxlbmd0aCAmJiBtdWx0aURyYWdTb3J0YWJsZSA9PT0gc29ydGFibGUpIHtcbiAgICAgICAgICBpbnNlcnRNdWx0aURyYWdDbG9uZXModHJ1ZSwgcm9vdEVsKTtcbiAgICAgICAgICBkaXNwYXRjaFNvcnRhYmxlRXZlbnQoJ2Nsb25lJyk7XG4gICAgICAgICAgY2FuY2VsKCk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9LFxuICAgIHNob3dDbG9uZTogZnVuY3Rpb24gc2hvd0Nsb25lKF9yZWY0KSB7XG4gICAgICB2YXIgY2xvbmVOb3dTaG93biA9IF9yZWY0LmNsb25lTm93U2hvd24sXG4gICAgICAgICAgcm9vdEVsID0gX3JlZjQucm9vdEVsLFxuICAgICAgICAgIGNhbmNlbCA9IF9yZWY0LmNhbmNlbDtcbiAgICAgIGlmICghdGhpcy5pc011bHRpRHJhZykgcmV0dXJuO1xuICAgICAgaW5zZXJ0TXVsdGlEcmFnQ2xvbmVzKGZhbHNlLCByb290RWwpO1xuICAgICAgbXVsdGlEcmFnQ2xvbmVzLmZvckVhY2goZnVuY3Rpb24gKGNsb25lKSB7XG4gICAgICAgIGNzcyhjbG9uZSwgJ2Rpc3BsYXknLCAnJyk7XG4gICAgICB9KTtcbiAgICAgIGNsb25lTm93U2hvd24oKTtcbiAgICAgIGNsb25lc0hpZGRlbiA9IGZhbHNlO1xuICAgICAgY2FuY2VsKCk7XG4gICAgfSxcbiAgICBoaWRlQ2xvbmU6IGZ1bmN0aW9uIGhpZGVDbG9uZShfcmVmNSkge1xuICAgICAgdmFyIF90aGlzID0gdGhpcztcblxuICAgICAgdmFyIHNvcnRhYmxlID0gX3JlZjUuc29ydGFibGUsXG4gICAgICAgICAgY2xvbmVOb3dIaWRkZW4gPSBfcmVmNS5jbG9uZU5vd0hpZGRlbixcbiAgICAgICAgICBjYW5jZWwgPSBfcmVmNS5jYW5jZWw7XG4gICAgICBpZiAoIXRoaXMuaXNNdWx0aURyYWcpIHJldHVybjtcbiAgICAgIG11bHRpRHJhZ0Nsb25lcy5mb3JFYWNoKGZ1bmN0aW9uIChjbG9uZSkge1xuICAgICAgICBjc3MoY2xvbmUsICdkaXNwbGF5JywgJ25vbmUnKTtcblxuICAgICAgICBpZiAoX3RoaXMub3B0aW9ucy5yZW1vdmVDbG9uZU9uSGlkZSAmJiBjbG9uZS5wYXJlbnROb2RlKSB7XG4gICAgICAgICAgY2xvbmUucGFyZW50Tm9kZS5yZW1vdmVDaGlsZChjbG9uZSk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgICAgY2xvbmVOb3dIaWRkZW4oKTtcbiAgICAgIGNsb25lc0hpZGRlbiA9IHRydWU7XG4gICAgICBjYW5jZWwoKTtcbiAgICB9LFxuICAgIGRyYWdTdGFydEdsb2JhbDogZnVuY3Rpb24gZHJhZ1N0YXJ0R2xvYmFsKF9yZWY2KSB7XG4gICAgICB2YXIgc29ydGFibGUgPSBfcmVmNi5zb3J0YWJsZTtcblxuICAgICAgaWYgKCF0aGlzLmlzTXVsdGlEcmFnICYmIG11bHRpRHJhZ1NvcnRhYmxlKSB7XG4gICAgICAgIG11bHRpRHJhZ1NvcnRhYmxlLm11bHRpRHJhZy5fZGVzZWxlY3RNdWx0aURyYWcoKTtcbiAgICAgIH1cblxuICAgICAgbXVsdGlEcmFnRWxlbWVudHMuZm9yRWFjaChmdW5jdGlvbiAobXVsdGlEcmFnRWxlbWVudCkge1xuICAgICAgICBtdWx0aURyYWdFbGVtZW50LnNvcnRhYmxlSW5kZXggPSBpbmRleChtdWx0aURyYWdFbGVtZW50KTtcbiAgICAgIH0pOyAvLyBTb3J0IG11bHRpLWRyYWcgZWxlbWVudHNcblxuICAgICAgbXVsdGlEcmFnRWxlbWVudHMgPSBtdWx0aURyYWdFbGVtZW50cy5zb3J0KGZ1bmN0aW9uIChhLCBiKSB7XG4gICAgICAgIHJldHVybiBhLnNvcnRhYmxlSW5kZXggLSBiLnNvcnRhYmxlSW5kZXg7XG4gICAgICB9KTtcbiAgICAgIGRyYWdTdGFydGVkID0gdHJ1ZTtcbiAgICB9LFxuICAgIGRyYWdTdGFydGVkOiBmdW5jdGlvbiBkcmFnU3RhcnRlZChfcmVmNykge1xuICAgICAgdmFyIF90aGlzMiA9IHRoaXM7XG5cbiAgICAgIHZhciBzb3J0YWJsZSA9IF9yZWY3LnNvcnRhYmxlO1xuICAgICAgaWYgKCF0aGlzLmlzTXVsdGlEcmFnKSByZXR1cm47XG5cbiAgICAgIGlmICh0aGlzLm9wdGlvbnMuc29ydCkge1xuICAgICAgICAvLyBDYXB0dXJlIHJlY3RzLFxuICAgICAgICAvLyBoaWRlIG11bHRpIGRyYWcgZWxlbWVudHMgKGJ5IHBvc2l0aW9uaW5nIHRoZW0gYWJzb2x1dGUpLFxuICAgICAgICAvLyBzZXQgbXVsdGkgZHJhZyBlbGVtZW50cyByZWN0cyB0byBkcmFnUmVjdCxcbiAgICAgICAgLy8gc2hvdyBtdWx0aSBkcmFnIGVsZW1lbnRzLFxuICAgICAgICAvLyBhbmltYXRlIHRvIHJlY3RzLFxuICAgICAgICAvLyB1bnNldCByZWN0cyAmIHJlbW92ZSBmcm9tIERPTVxuICAgICAgICBzb3J0YWJsZS5jYXB0dXJlQW5pbWF0aW9uU3RhdGUoKTtcblxuICAgICAgICBpZiAodGhpcy5vcHRpb25zLmFuaW1hdGlvbikge1xuICAgICAgICAgIG11bHRpRHJhZ0VsZW1lbnRzLmZvckVhY2goZnVuY3Rpb24gKG11bHRpRHJhZ0VsZW1lbnQpIHtcbiAgICAgICAgICAgIGlmIChtdWx0aURyYWdFbGVtZW50ID09PSBkcmFnRWwkMSkgcmV0dXJuO1xuICAgICAgICAgICAgY3NzKG11bHRpRHJhZ0VsZW1lbnQsICdwb3NpdGlvbicsICdhYnNvbHV0ZScpO1xuICAgICAgICAgIH0pO1xuICAgICAgICAgIHZhciBkcmFnUmVjdCA9IGdldFJlY3QoZHJhZ0VsJDEsIGZhbHNlLCB0cnVlLCB0cnVlKTtcbiAgICAgICAgICBtdWx0aURyYWdFbGVtZW50cy5mb3JFYWNoKGZ1bmN0aW9uIChtdWx0aURyYWdFbGVtZW50KSB7XG4gICAgICAgICAgICBpZiAobXVsdGlEcmFnRWxlbWVudCA9PT0gZHJhZ0VsJDEpIHJldHVybjtcbiAgICAgICAgICAgIHNldFJlY3QobXVsdGlEcmFnRWxlbWVudCwgZHJhZ1JlY3QpO1xuICAgICAgICAgIH0pO1xuICAgICAgICAgIGZvbGRpbmcgPSB0cnVlO1xuICAgICAgICAgIGluaXRpYWxGb2xkaW5nID0gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBzb3J0YWJsZS5hbmltYXRlQWxsKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgZm9sZGluZyA9IGZhbHNlO1xuICAgICAgICBpbml0aWFsRm9sZGluZyA9IGZhbHNlO1xuXG4gICAgICAgIGlmIChfdGhpczIub3B0aW9ucy5hbmltYXRpb24pIHtcbiAgICAgICAgICBtdWx0aURyYWdFbGVtZW50cy5mb3JFYWNoKGZ1bmN0aW9uIChtdWx0aURyYWdFbGVtZW50KSB7XG4gICAgICAgICAgICB1bnNldFJlY3QobXVsdGlEcmFnRWxlbWVudCk7XG4gICAgICAgICAgfSk7XG4gICAgICAgIH0gLy8gUmVtb3ZlIGFsbCBhdXhpbGlhcnkgbXVsdGlkcmFnIGl0ZW1zIGZyb20gZWwsIGlmIHNvcnRpbmcgZW5hYmxlZFxuXG5cbiAgICAgICAgaWYgKF90aGlzMi5vcHRpb25zLnNvcnQpIHtcbiAgICAgICAgICByZW1vdmVNdWx0aURyYWdFbGVtZW50cygpO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9LFxuICAgIGRyYWdPdmVyOiBmdW5jdGlvbiBkcmFnT3ZlcihfcmVmOCkge1xuICAgICAgdmFyIHRhcmdldCA9IF9yZWY4LnRhcmdldCxcbiAgICAgICAgICBjb21wbGV0ZWQgPSBfcmVmOC5jb21wbGV0ZWQsXG4gICAgICAgICAgY2FuY2VsID0gX3JlZjguY2FuY2VsO1xuXG4gICAgICBpZiAoZm9sZGluZyAmJiB+bXVsdGlEcmFnRWxlbWVudHMuaW5kZXhPZih0YXJnZXQpKSB7XG4gICAgICAgIGNvbXBsZXRlZChmYWxzZSk7XG4gICAgICAgIGNhbmNlbCgpO1xuICAgICAgfVxuICAgIH0sXG4gICAgcmV2ZXJ0OiBmdW5jdGlvbiByZXZlcnQoX3JlZjkpIHtcbiAgICAgIHZhciBmcm9tU29ydGFibGUgPSBfcmVmOS5mcm9tU29ydGFibGUsXG4gICAgICAgICAgcm9vdEVsID0gX3JlZjkucm9vdEVsLFxuICAgICAgICAgIHNvcnRhYmxlID0gX3JlZjkuc29ydGFibGUsXG4gICAgICAgICAgZHJhZ1JlY3QgPSBfcmVmOS5kcmFnUmVjdDtcblxuICAgICAgaWYgKG11bHRpRHJhZ0VsZW1lbnRzLmxlbmd0aCA+IDEpIHtcbiAgICAgICAgLy8gU2V0dXAgdW5mb2xkIGFuaW1hdGlvblxuICAgICAgICBtdWx0aURyYWdFbGVtZW50cy5mb3JFYWNoKGZ1bmN0aW9uIChtdWx0aURyYWdFbGVtZW50KSB7XG4gICAgICAgICAgc29ydGFibGUuYWRkQW5pbWF0aW9uU3RhdGUoe1xuICAgICAgICAgICAgdGFyZ2V0OiBtdWx0aURyYWdFbGVtZW50LFxuICAgICAgICAgICAgcmVjdDogZm9sZGluZyA/IGdldFJlY3QobXVsdGlEcmFnRWxlbWVudCkgOiBkcmFnUmVjdFxuICAgICAgICAgIH0pO1xuICAgICAgICAgIHVuc2V0UmVjdChtdWx0aURyYWdFbGVtZW50KTtcbiAgICAgICAgICBtdWx0aURyYWdFbGVtZW50LmZyb21SZWN0ID0gZHJhZ1JlY3Q7XG4gICAgICAgICAgZnJvbVNvcnRhYmxlLnJlbW92ZUFuaW1hdGlvblN0YXRlKG11bHRpRHJhZ0VsZW1lbnQpO1xuICAgICAgICB9KTtcbiAgICAgICAgZm9sZGluZyA9IGZhbHNlO1xuICAgICAgICBpbnNlcnRNdWx0aURyYWdFbGVtZW50cyghdGhpcy5vcHRpb25zLnJlbW92ZUNsb25lT25IaWRlLCByb290RWwpO1xuICAgICAgfVxuICAgIH0sXG4gICAgZHJhZ092ZXJDb21wbGV0ZWQ6IGZ1bmN0aW9uIGRyYWdPdmVyQ29tcGxldGVkKF9yZWYxMCkge1xuICAgICAgdmFyIHNvcnRhYmxlID0gX3JlZjEwLnNvcnRhYmxlLFxuICAgICAgICAgIGlzT3duZXIgPSBfcmVmMTAuaXNPd25lcixcbiAgICAgICAgICBpbnNlcnRpb24gPSBfcmVmMTAuaW5zZXJ0aW9uLFxuICAgICAgICAgIGFjdGl2ZVNvcnRhYmxlID0gX3JlZjEwLmFjdGl2ZVNvcnRhYmxlLFxuICAgICAgICAgIHBhcmVudEVsID0gX3JlZjEwLnBhcmVudEVsLFxuICAgICAgICAgIHB1dFNvcnRhYmxlID0gX3JlZjEwLnB1dFNvcnRhYmxlO1xuICAgICAgdmFyIG9wdGlvbnMgPSB0aGlzLm9wdGlvbnM7XG5cbiAgICAgIGlmIChpbnNlcnRpb24pIHtcbiAgICAgICAgLy8gQ2xvbmVzIG11c3QgYmUgaGlkZGVuIGJlZm9yZSBmb2xkaW5nIGFuaW1hdGlvbiB0byBjYXB0dXJlIGRyYWdSZWN0QWJzb2x1dGUgcHJvcGVybHlcbiAgICAgICAgaWYgKGlzT3duZXIpIHtcbiAgICAgICAgICBhY3RpdmVTb3J0YWJsZS5faGlkZUNsb25lKCk7XG4gICAgICAgIH1cblxuICAgICAgICBpbml0aWFsRm9sZGluZyA9IGZhbHNlOyAvLyBJZiBsZWF2aW5nIHNvcnQ6ZmFsc2Ugcm9vdCwgb3IgYWxyZWFkeSBmb2xkaW5nIC0gRm9sZCB0byBuZXcgbG9jYXRpb25cblxuICAgICAgICBpZiAob3B0aW9ucy5hbmltYXRpb24gJiYgbXVsdGlEcmFnRWxlbWVudHMubGVuZ3RoID4gMSAmJiAoZm9sZGluZyB8fCAhaXNPd25lciAmJiAhYWN0aXZlU29ydGFibGUub3B0aW9ucy5zb3J0ICYmICFwdXRTb3J0YWJsZSkpIHtcbiAgICAgICAgICAvLyBGb2xkOiBTZXQgYWxsIG11bHRpIGRyYWcgZWxlbWVudHMncyByZWN0cyB0byBkcmFnRWwncyByZWN0IHdoZW4gbXVsdGktZHJhZyBlbGVtZW50cyBhcmUgaW52aXNpYmxlXG4gICAgICAgICAgdmFyIGRyYWdSZWN0QWJzb2x1dGUgPSBnZXRSZWN0KGRyYWdFbCQxLCBmYWxzZSwgdHJ1ZSwgdHJ1ZSk7XG4gICAgICAgICAgbXVsdGlEcmFnRWxlbWVudHMuZm9yRWFjaChmdW5jdGlvbiAobXVsdGlEcmFnRWxlbWVudCkge1xuICAgICAgICAgICAgaWYgKG11bHRpRHJhZ0VsZW1lbnQgPT09IGRyYWdFbCQxKSByZXR1cm47XG4gICAgICAgICAgICBzZXRSZWN0KG11bHRpRHJhZ0VsZW1lbnQsIGRyYWdSZWN0QWJzb2x1dGUpOyAvLyBNb3ZlIGVsZW1lbnQocykgdG8gZW5kIG9mIHBhcmVudEVsIHNvIHRoYXQgaXQgZG9lcyBub3QgaW50ZXJmZXJlIHdpdGggbXVsdGktZHJhZyBjbG9uZXMgaW5zZXJ0aW9uIGlmIHRoZXkgYXJlIGluc2VydGVkXG4gICAgICAgICAgICAvLyB3aGlsZSBmb2xkaW5nLCBhbmQgc28gdGhhdCB3ZSBjYW4gY2FwdHVyZSB0aGVtIGFnYWluIGJlY2F1c2Ugb2xkIHNvcnRhYmxlIHdpbGwgbm8gbG9uZ2VyIGJlIGZyb21Tb3J0YWJsZVxuXG4gICAgICAgICAgICBwYXJlbnRFbC5hcHBlbmRDaGlsZChtdWx0aURyYWdFbGVtZW50KTtcbiAgICAgICAgICB9KTtcbiAgICAgICAgICBmb2xkaW5nID0gdHJ1ZTtcbiAgICAgICAgfSAvLyBDbG9uZXMgbXVzdCBiZSBzaG93biAoYW5kIGNoZWNrIHRvIHJlbW92ZSBtdWx0aSBkcmFncykgYWZ0ZXIgZm9sZGluZyB3aGVuIGludGVyZmVyaW5nIG11bHRpRHJhZ0VsZW1lbnRzIGFyZSBtb3ZlZCBvdXRcblxuXG4gICAgICAgIGlmICghaXNPd25lcikge1xuICAgICAgICAgIC8vIE9ubHkgcmVtb3ZlIGlmIG5vdCBmb2xkaW5nIChmb2xkaW5nIHdpbGwgcmVtb3ZlIHRoZW0gYW55d2F5cylcbiAgICAgICAgICBpZiAoIWZvbGRpbmcpIHtcbiAgICAgICAgICAgIHJlbW92ZU11bHRpRHJhZ0VsZW1lbnRzKCk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgaWYgKG11bHRpRHJhZ0VsZW1lbnRzLmxlbmd0aCA+IDEpIHtcbiAgICAgICAgICAgIHZhciBjbG9uZXNIaWRkZW5CZWZvcmUgPSBjbG9uZXNIaWRkZW47XG5cbiAgICAgICAgICAgIGFjdGl2ZVNvcnRhYmxlLl9zaG93Q2xvbmUoc29ydGFibGUpOyAvLyBVbmZvbGQgYW5pbWF0aW9uIGZvciBjbG9uZXMgaWYgc2hvd2luZyBmcm9tIGhpZGRlblxuXG5cbiAgICAgICAgICAgIGlmIChhY3RpdmVTb3J0YWJsZS5vcHRpb25zLmFuaW1hdGlvbiAmJiAhY2xvbmVzSGlkZGVuICYmIGNsb25lc0hpZGRlbkJlZm9yZSkge1xuICAgICAgICAgICAgICBtdWx0aURyYWdDbG9uZXMuZm9yRWFjaChmdW5jdGlvbiAoY2xvbmUpIHtcbiAgICAgICAgICAgICAgICBhY3RpdmVTb3J0YWJsZS5hZGRBbmltYXRpb25TdGF0ZSh7XG4gICAgICAgICAgICAgICAgICB0YXJnZXQ6IGNsb25lLFxuICAgICAgICAgICAgICAgICAgcmVjdDogY2xvbmVzRnJvbVJlY3RcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICBjbG9uZS5mcm9tUmVjdCA9IGNsb25lc0Zyb21SZWN0O1xuICAgICAgICAgICAgICAgIGNsb25lLnRoaXNBbmltYXRpb25EdXJhdGlvbiA9IG51bGw7XG4gICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBhY3RpdmVTb3J0YWJsZS5fc2hvd0Nsb25lKHNvcnRhYmxlKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9LFxuICAgIGRyYWdPdmVyQW5pbWF0aW9uQ2FwdHVyZTogZnVuY3Rpb24gZHJhZ092ZXJBbmltYXRpb25DYXB0dXJlKF9yZWYxMSkge1xuICAgICAgdmFyIGRyYWdSZWN0ID0gX3JlZjExLmRyYWdSZWN0LFxuICAgICAgICAgIGlzT3duZXIgPSBfcmVmMTEuaXNPd25lcixcbiAgICAgICAgICBhY3RpdmVTb3J0YWJsZSA9IF9yZWYxMS5hY3RpdmVTb3J0YWJsZTtcbiAgICAgIG11bHRpRHJhZ0VsZW1lbnRzLmZvckVhY2goZnVuY3Rpb24gKG11bHRpRHJhZ0VsZW1lbnQpIHtcbiAgICAgICAgbXVsdGlEcmFnRWxlbWVudC50aGlzQW5pbWF0aW9uRHVyYXRpb24gPSBudWxsO1xuICAgICAgfSk7XG5cbiAgICAgIGlmIChhY3RpdmVTb3J0YWJsZS5vcHRpb25zLmFuaW1hdGlvbiAmJiAhaXNPd25lciAmJiBhY3RpdmVTb3J0YWJsZS5tdWx0aURyYWcuaXNNdWx0aURyYWcpIHtcbiAgICAgICAgY2xvbmVzRnJvbVJlY3QgPSBfZXh0ZW5kcyh7fSwgZHJhZ1JlY3QpO1xuICAgICAgICB2YXIgZHJhZ01hdHJpeCA9IG1hdHJpeChkcmFnRWwkMSwgdHJ1ZSk7XG4gICAgICAgIGNsb25lc0Zyb21SZWN0LnRvcCAtPSBkcmFnTWF0cml4LmY7XG4gICAgICAgIGNsb25lc0Zyb21SZWN0LmxlZnQgLT0gZHJhZ01hdHJpeC5lO1xuICAgICAgfVxuICAgIH0sXG4gICAgZHJhZ092ZXJBbmltYXRpb25Db21wbGV0ZTogZnVuY3Rpb24gZHJhZ092ZXJBbmltYXRpb25Db21wbGV0ZSgpIHtcbiAgICAgIGlmIChmb2xkaW5nKSB7XG4gICAgICAgIGZvbGRpbmcgPSBmYWxzZTtcbiAgICAgICAgcmVtb3ZlTXVsdGlEcmFnRWxlbWVudHMoKTtcbiAgICAgIH1cbiAgICB9LFxuICAgIGRyb3A6IGZ1bmN0aW9uIGRyb3AoX3JlZjEyKSB7XG4gICAgICB2YXIgZXZ0ID0gX3JlZjEyLm9yaWdpbmFsRXZlbnQsXG4gICAgICAgICAgcm9vdEVsID0gX3JlZjEyLnJvb3RFbCxcbiAgICAgICAgICBwYXJlbnRFbCA9IF9yZWYxMi5wYXJlbnRFbCxcbiAgICAgICAgICBzb3J0YWJsZSA9IF9yZWYxMi5zb3J0YWJsZSxcbiAgICAgICAgICBkaXNwYXRjaFNvcnRhYmxlRXZlbnQgPSBfcmVmMTIuZGlzcGF0Y2hTb3J0YWJsZUV2ZW50LFxuICAgICAgICAgIG9sZEluZGV4ID0gX3JlZjEyLm9sZEluZGV4LFxuICAgICAgICAgIHB1dFNvcnRhYmxlID0gX3JlZjEyLnB1dFNvcnRhYmxlO1xuICAgICAgdmFyIHRvU29ydGFibGUgPSBwdXRTb3J0YWJsZSB8fCB0aGlzLnNvcnRhYmxlO1xuICAgICAgaWYgKCFldnQpIHJldHVybjtcbiAgICAgIHZhciBvcHRpb25zID0gdGhpcy5vcHRpb25zLFxuICAgICAgICAgIGNoaWxkcmVuID0gcGFyZW50RWwuY2hpbGRyZW47IC8vIE11bHRpLWRyYWcgc2VsZWN0aW9uXG5cbiAgICAgIGlmICghZHJhZ1N0YXJ0ZWQpIHtcbiAgICAgICAgaWYgKG9wdGlvbnMubXVsdGlEcmFnS2V5ICYmICF0aGlzLm11bHRpRHJhZ0tleURvd24pIHtcbiAgICAgICAgICB0aGlzLl9kZXNlbGVjdE11bHRpRHJhZygpO1xuICAgICAgICB9XG5cbiAgICAgICAgdG9nZ2xlQ2xhc3MoZHJhZ0VsJDEsIG9wdGlvbnMuc2VsZWN0ZWRDbGFzcywgIX5tdWx0aURyYWdFbGVtZW50cy5pbmRleE9mKGRyYWdFbCQxKSk7XG5cbiAgICAgICAgaWYgKCF+bXVsdGlEcmFnRWxlbWVudHMuaW5kZXhPZihkcmFnRWwkMSkpIHtcbiAgICAgICAgICBtdWx0aURyYWdFbGVtZW50cy5wdXNoKGRyYWdFbCQxKTtcbiAgICAgICAgICBkaXNwYXRjaEV2ZW50KHtcbiAgICAgICAgICAgIHNvcnRhYmxlOiBzb3J0YWJsZSxcbiAgICAgICAgICAgIHJvb3RFbDogcm9vdEVsLFxuICAgICAgICAgICAgbmFtZTogJ3NlbGVjdCcsXG4gICAgICAgICAgICB0YXJnZXRFbDogZHJhZ0VsJDEsXG4gICAgICAgICAgICBvcmlnaW5hbEV2ZW50OiBldnRcbiAgICAgICAgICB9KTsgLy8gTW9kaWZpZXIgYWN0aXZhdGVkLCBzZWxlY3QgZnJvbSBsYXN0IHRvIGRyYWdFbFxuXG4gICAgICAgICAgaWYgKGV2dC5zaGlmdEtleSAmJiBsYXN0TXVsdGlEcmFnU2VsZWN0ICYmIHNvcnRhYmxlLmVsLmNvbnRhaW5zKGxhc3RNdWx0aURyYWdTZWxlY3QpKSB7XG4gICAgICAgICAgICB2YXIgbGFzdEluZGV4ID0gaW5kZXgobGFzdE11bHRpRHJhZ1NlbGVjdCksXG4gICAgICAgICAgICAgICAgY3VycmVudEluZGV4ID0gaW5kZXgoZHJhZ0VsJDEpO1xuXG4gICAgICAgICAgICBpZiAofmxhc3RJbmRleCAmJiB+Y3VycmVudEluZGV4ICYmIGxhc3RJbmRleCAhPT0gY3VycmVudEluZGV4KSB7XG4gICAgICAgICAgICAgIC8vIE11c3QgaW5jbHVkZSBsYXN0TXVsdGlEcmFnU2VsZWN0IChzZWxlY3QgaXQpLCBpbiBjYXNlIG1vZGlmaWVkIHNlbGVjdGlvbiBmcm9tIG5vIHNlbGVjdGlvblxuICAgICAgICAgICAgICAvLyAoYnV0IHByZXZpb3VzIHNlbGVjdGlvbiBleGlzdGVkKVxuICAgICAgICAgICAgICB2YXIgbiwgaTtcblxuICAgICAgICAgICAgICBpZiAoY3VycmVudEluZGV4ID4gbGFzdEluZGV4KSB7XG4gICAgICAgICAgICAgICAgaSA9IGxhc3RJbmRleDtcbiAgICAgICAgICAgICAgICBuID0gY3VycmVudEluZGV4O1xuICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIGkgPSBjdXJyZW50SW5kZXg7XG4gICAgICAgICAgICAgICAgbiA9IGxhc3RJbmRleCArIDE7XG4gICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICBmb3IgKDsgaSA8IG47IGkrKykge1xuICAgICAgICAgICAgICAgIGlmICh+bXVsdGlEcmFnRWxlbWVudHMuaW5kZXhPZihjaGlsZHJlbltpXSkpIGNvbnRpbnVlO1xuICAgICAgICAgICAgICAgIHRvZ2dsZUNsYXNzKGNoaWxkcmVuW2ldLCBvcHRpb25zLnNlbGVjdGVkQ2xhc3MsIHRydWUpO1xuICAgICAgICAgICAgICAgIG11bHRpRHJhZ0VsZW1lbnRzLnB1c2goY2hpbGRyZW5baV0pO1xuICAgICAgICAgICAgICAgIGRpc3BhdGNoRXZlbnQoe1xuICAgICAgICAgICAgICAgICAgc29ydGFibGU6IHNvcnRhYmxlLFxuICAgICAgICAgICAgICAgICAgcm9vdEVsOiByb290RWwsXG4gICAgICAgICAgICAgICAgICBuYW1lOiAnc2VsZWN0JyxcbiAgICAgICAgICAgICAgICAgIHRhcmdldEVsOiBjaGlsZHJlbltpXSxcbiAgICAgICAgICAgICAgICAgIG9yaWdpbmFsRXZlbnQ6IGV2dFxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGxhc3RNdWx0aURyYWdTZWxlY3QgPSBkcmFnRWwkMTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBtdWx0aURyYWdTb3J0YWJsZSA9IHRvU29ydGFibGU7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgbXVsdGlEcmFnRWxlbWVudHMuc3BsaWNlKG11bHRpRHJhZ0VsZW1lbnRzLmluZGV4T2YoZHJhZ0VsJDEpLCAxKTtcbiAgICAgICAgICBsYXN0TXVsdGlEcmFnU2VsZWN0ID0gbnVsbDtcbiAgICAgICAgICBkaXNwYXRjaEV2ZW50KHtcbiAgICAgICAgICAgIHNvcnRhYmxlOiBzb3J0YWJsZSxcbiAgICAgICAgICAgIHJvb3RFbDogcm9vdEVsLFxuICAgICAgICAgICAgbmFtZTogJ2Rlc2VsZWN0JyxcbiAgICAgICAgICAgIHRhcmdldEVsOiBkcmFnRWwkMSxcbiAgICAgICAgICAgIG9yaWdpbmFsRXZlbnQ6IGV2dFxuICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICB9IC8vIE11bHRpLWRyYWcgZHJvcFxuXG5cbiAgICAgIGlmIChkcmFnU3RhcnRlZCAmJiB0aGlzLmlzTXVsdGlEcmFnKSB7XG4gICAgICAgIGZvbGRpbmcgPSBmYWxzZTsgLy8gRG8gbm90IFwidW5mb2xkXCIgYWZ0ZXIgYXJvdW5kIGRyYWdFbCBpZiByZXZlcnRlZFxuXG4gICAgICAgIGlmICgocGFyZW50RWxbZXhwYW5kb10ub3B0aW9ucy5zb3J0IHx8IHBhcmVudEVsICE9PSByb290RWwpICYmIG11bHRpRHJhZ0VsZW1lbnRzLmxlbmd0aCA+IDEpIHtcbiAgICAgICAgICB2YXIgZHJhZ1JlY3QgPSBnZXRSZWN0KGRyYWdFbCQxKSxcbiAgICAgICAgICAgICAgbXVsdGlEcmFnSW5kZXggPSBpbmRleChkcmFnRWwkMSwgJzpub3QoLicgKyB0aGlzLm9wdGlvbnMuc2VsZWN0ZWRDbGFzcyArICcpJyk7XG4gICAgICAgICAgaWYgKCFpbml0aWFsRm9sZGluZyAmJiBvcHRpb25zLmFuaW1hdGlvbikgZHJhZ0VsJDEudGhpc0FuaW1hdGlvbkR1cmF0aW9uID0gbnVsbDtcbiAgICAgICAgICB0b1NvcnRhYmxlLmNhcHR1cmVBbmltYXRpb25TdGF0ZSgpO1xuXG4gICAgICAgICAgaWYgKCFpbml0aWFsRm9sZGluZykge1xuICAgICAgICAgICAgaWYgKG9wdGlvbnMuYW5pbWF0aW9uKSB7XG4gICAgICAgICAgICAgIGRyYWdFbCQxLmZyb21SZWN0ID0gZHJhZ1JlY3Q7XG4gICAgICAgICAgICAgIG11bHRpRHJhZ0VsZW1lbnRzLmZvckVhY2goZnVuY3Rpb24gKG11bHRpRHJhZ0VsZW1lbnQpIHtcbiAgICAgICAgICAgICAgICBtdWx0aURyYWdFbGVtZW50LnRoaXNBbmltYXRpb25EdXJhdGlvbiA9IG51bGw7XG5cbiAgICAgICAgICAgICAgICBpZiAobXVsdGlEcmFnRWxlbWVudCAhPT0gZHJhZ0VsJDEpIHtcbiAgICAgICAgICAgICAgICAgIHZhciByZWN0ID0gZm9sZGluZyA/IGdldFJlY3QobXVsdGlEcmFnRWxlbWVudCkgOiBkcmFnUmVjdDtcbiAgICAgICAgICAgICAgICAgIG11bHRpRHJhZ0VsZW1lbnQuZnJvbVJlY3QgPSByZWN0OyAvLyBQcmVwYXJlIHVuZm9sZCBhbmltYXRpb25cblxuICAgICAgICAgICAgICAgICAgdG9Tb3J0YWJsZS5hZGRBbmltYXRpb25TdGF0ZSh7XG4gICAgICAgICAgICAgICAgICAgIHRhcmdldDogbXVsdGlEcmFnRWxlbWVudCxcbiAgICAgICAgICAgICAgICAgICAgcmVjdDogcmVjdFxuICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH0gLy8gTXVsdGkgZHJhZyBlbGVtZW50cyBhcmUgbm90IG5lY2Vzc2FyaWx5IHJlbW92ZWQgZnJvbSB0aGUgRE9NIG9uIGRyb3AsIHNvIHRvIHJlaW5zZXJ0XG4gICAgICAgICAgICAvLyBwcm9wZXJseSB0aGV5IG11c3QgYWxsIGJlIHJlbW92ZWRcblxuXG4gICAgICAgICAgICByZW1vdmVNdWx0aURyYWdFbGVtZW50cygpO1xuICAgICAgICAgICAgbXVsdGlEcmFnRWxlbWVudHMuZm9yRWFjaChmdW5jdGlvbiAobXVsdGlEcmFnRWxlbWVudCkge1xuICAgICAgICAgICAgICBpZiAoY2hpbGRyZW5bbXVsdGlEcmFnSW5kZXhdKSB7XG4gICAgICAgICAgICAgICAgcGFyZW50RWwuaW5zZXJ0QmVmb3JlKG11bHRpRHJhZ0VsZW1lbnQsIGNoaWxkcmVuW211bHRpRHJhZ0luZGV4XSk7XG4gICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgcGFyZW50RWwuYXBwZW5kQ2hpbGQobXVsdGlEcmFnRWxlbWVudCk7XG4gICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICBtdWx0aURyYWdJbmRleCsrO1xuICAgICAgICAgICAgfSk7IC8vIElmIGluaXRpYWwgZm9sZGluZyBpcyBkb25lLCB0aGUgZWxlbWVudHMgbWF5IGhhdmUgY2hhbmdlZCBwb3NpdGlvbiBiZWNhdXNlIHRoZXkgYXJlIG5vd1xuICAgICAgICAgICAgLy8gdW5mb2xkaW5nIGFyb3VuZCBkcmFnRWwsIGV2ZW4gdGhvdWdoIGRyYWdFbCBtYXkgbm90IGhhdmUgaGlzIGluZGV4IGNoYW5nZWQsIHNvIHVwZGF0ZSBldmVudFxuICAgICAgICAgICAgLy8gbXVzdCBiZSBmaXJlZCBoZXJlIGFzIFNvcnRhYmxlIHdpbGwgbm90LlxuXG4gICAgICAgICAgICBpZiAob2xkSW5kZXggPT09IGluZGV4KGRyYWdFbCQxKSkge1xuICAgICAgICAgICAgICB2YXIgdXBkYXRlID0gZmFsc2U7XG4gICAgICAgICAgICAgIG11bHRpRHJhZ0VsZW1lbnRzLmZvckVhY2goZnVuY3Rpb24gKG11bHRpRHJhZ0VsZW1lbnQpIHtcbiAgICAgICAgICAgICAgICBpZiAobXVsdGlEcmFnRWxlbWVudC5zb3J0YWJsZUluZGV4ICE9PSBpbmRleChtdWx0aURyYWdFbGVtZW50KSkge1xuICAgICAgICAgICAgICAgICAgdXBkYXRlID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICAgIGlmICh1cGRhdGUpIHtcbiAgICAgICAgICAgICAgICBkaXNwYXRjaFNvcnRhYmxlRXZlbnQoJ3VwZGF0ZScpO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSAvLyBNdXN0IGJlIGRvbmUgYWZ0ZXIgY2FwdHVyaW5nIGluZGl2aWR1YWwgcmVjdHMgKHNjcm9sbCBiYXIpXG5cblxuICAgICAgICAgIG11bHRpRHJhZ0VsZW1lbnRzLmZvckVhY2goZnVuY3Rpb24gKG11bHRpRHJhZ0VsZW1lbnQpIHtcbiAgICAgICAgICAgIHVuc2V0UmVjdChtdWx0aURyYWdFbGVtZW50KTtcbiAgICAgICAgICB9KTtcbiAgICAgICAgICB0b1NvcnRhYmxlLmFuaW1hdGVBbGwoKTtcbiAgICAgICAgfVxuXG4gICAgICAgIG11bHRpRHJhZ1NvcnRhYmxlID0gdG9Tb3J0YWJsZTtcbiAgICAgIH0gLy8gUmVtb3ZlIGNsb25lcyBpZiBuZWNlc3NhcnlcblxuXG4gICAgICBpZiAocm9vdEVsID09PSBwYXJlbnRFbCB8fCBwdXRTb3J0YWJsZSAmJiBwdXRTb3J0YWJsZS5sYXN0UHV0TW9kZSAhPT0gJ2Nsb25lJykge1xuICAgICAgICBtdWx0aURyYWdDbG9uZXMuZm9yRWFjaChmdW5jdGlvbiAoY2xvbmUpIHtcbiAgICAgICAgICBjbG9uZS5wYXJlbnROb2RlICYmIGNsb25lLnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQoY2xvbmUpO1xuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9LFxuICAgIG51bGxpbmdHbG9iYWw6IGZ1bmN0aW9uIG51bGxpbmdHbG9iYWwoKSB7XG4gICAgICB0aGlzLmlzTXVsdGlEcmFnID0gZHJhZ1N0YXJ0ZWQgPSBmYWxzZTtcbiAgICAgIG11bHRpRHJhZ0Nsb25lcy5sZW5ndGggPSAwO1xuICAgIH0sXG4gICAgZGVzdHJveUdsb2JhbDogZnVuY3Rpb24gZGVzdHJveUdsb2JhbCgpIHtcbiAgICAgIHRoaXMuX2Rlc2VsZWN0TXVsdGlEcmFnKCk7XG5cbiAgICAgIG9mZihkb2N1bWVudCwgJ3BvaW50ZXJ1cCcsIHRoaXMuX2Rlc2VsZWN0TXVsdGlEcmFnKTtcbiAgICAgIG9mZihkb2N1bWVudCwgJ21vdXNldXAnLCB0aGlzLl9kZXNlbGVjdE11bHRpRHJhZyk7XG4gICAgICBvZmYoZG9jdW1lbnQsICd0b3VjaGVuZCcsIHRoaXMuX2Rlc2VsZWN0TXVsdGlEcmFnKTtcbiAgICAgIG9mZihkb2N1bWVudCwgJ2tleWRvd24nLCB0aGlzLl9jaGVja0tleURvd24pO1xuICAgICAgb2ZmKGRvY3VtZW50LCAna2V5dXAnLCB0aGlzLl9jaGVja0tleVVwKTtcbiAgICB9LFxuICAgIF9kZXNlbGVjdE11bHRpRHJhZzogZnVuY3Rpb24gX2Rlc2VsZWN0TXVsdGlEcmFnKGV2dCkge1xuICAgICAgaWYgKHR5cGVvZiBkcmFnU3RhcnRlZCAhPT0gXCJ1bmRlZmluZWRcIiAmJiBkcmFnU3RhcnRlZCkgcmV0dXJuOyAvLyBPbmx5IGRlc2VsZWN0IGlmIHNlbGVjdGlvbiBpcyBpbiB0aGlzIHNvcnRhYmxlXG5cbiAgICAgIGlmIChtdWx0aURyYWdTb3J0YWJsZSAhPT0gdGhpcy5zb3J0YWJsZSkgcmV0dXJuOyAvLyBPbmx5IGRlc2VsZWN0IGlmIHRhcmdldCBpcyBub3QgaXRlbSBpbiB0aGlzIHNvcnRhYmxlXG5cbiAgICAgIGlmIChldnQgJiYgY2xvc2VzdChldnQudGFyZ2V0LCB0aGlzLm9wdGlvbnMuZHJhZ2dhYmxlLCB0aGlzLnNvcnRhYmxlLmVsLCBmYWxzZSkpIHJldHVybjsgLy8gT25seSBkZXNlbGVjdCBpZiBsZWZ0IGNsaWNrXG5cbiAgICAgIGlmIChldnQgJiYgZXZ0LmJ1dHRvbiAhPT0gMCkgcmV0dXJuO1xuXG4gICAgICB3aGlsZSAobXVsdGlEcmFnRWxlbWVudHMubGVuZ3RoKSB7XG4gICAgICAgIHZhciBlbCA9IG11bHRpRHJhZ0VsZW1lbnRzWzBdO1xuICAgICAgICB0b2dnbGVDbGFzcyhlbCwgdGhpcy5vcHRpb25zLnNlbGVjdGVkQ2xhc3MsIGZhbHNlKTtcbiAgICAgICAgbXVsdGlEcmFnRWxlbWVudHMuc2hpZnQoKTtcbiAgICAgICAgZGlzcGF0Y2hFdmVudCh7XG4gICAgICAgICAgc29ydGFibGU6IHRoaXMuc29ydGFibGUsXG4gICAgICAgICAgcm9vdEVsOiB0aGlzLnNvcnRhYmxlLmVsLFxuICAgICAgICAgIG5hbWU6ICdkZXNlbGVjdCcsXG4gICAgICAgICAgdGFyZ2V0RWw6IGVsLFxuICAgICAgICAgIG9yaWdpbmFsRXZlbnQ6IGV2dFxuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9LFxuICAgIF9jaGVja0tleURvd246IGZ1bmN0aW9uIF9jaGVja0tleURvd24oZXZ0KSB7XG4gICAgICBpZiAoZXZ0LmtleSA9PT0gdGhpcy5vcHRpb25zLm11bHRpRHJhZ0tleSkge1xuICAgICAgICB0aGlzLm11bHRpRHJhZ0tleURvd24gPSB0cnVlO1xuICAgICAgfVxuICAgIH0sXG4gICAgX2NoZWNrS2V5VXA6IGZ1bmN0aW9uIF9jaGVja0tleVVwKGV2dCkge1xuICAgICAgaWYgKGV2dC5rZXkgPT09IHRoaXMub3B0aW9ucy5tdWx0aURyYWdLZXkpIHtcbiAgICAgICAgdGhpcy5tdWx0aURyYWdLZXlEb3duID0gZmFsc2U7XG4gICAgICB9XG4gICAgfVxuICB9O1xuICByZXR1cm4gX2V4dGVuZHMoTXVsdGlEcmFnLCB7XG4gICAgLy8gU3RhdGljIG1ldGhvZHMgJiBwcm9wZXJ0aWVzXG4gICAgcGx1Z2luTmFtZTogJ211bHRpRHJhZycsXG4gICAgdXRpbHM6IHtcbiAgICAgIC8qKlxyXG4gICAgICAgKiBTZWxlY3RzIHRoZSBwcm92aWRlZCBtdWx0aS1kcmFnIGl0ZW1cclxuICAgICAgICogQHBhcmFtICB7SFRNTEVsZW1lbnR9IGVsICAgIFRoZSBlbGVtZW50IHRvIGJlIHNlbGVjdGVkXHJcbiAgICAgICAqL1xuICAgICAgc2VsZWN0OiBmdW5jdGlvbiBzZWxlY3QoZWwpIHtcbiAgICAgICAgdmFyIHNvcnRhYmxlID0gZWwucGFyZW50Tm9kZVtleHBhbmRvXTtcbiAgICAgICAgaWYgKCFzb3J0YWJsZSB8fCAhc29ydGFibGUub3B0aW9ucy5tdWx0aURyYWcgfHwgfm11bHRpRHJhZ0VsZW1lbnRzLmluZGV4T2YoZWwpKSByZXR1cm47XG5cbiAgICAgICAgaWYgKG11bHRpRHJhZ1NvcnRhYmxlICYmIG11bHRpRHJhZ1NvcnRhYmxlICE9PSBzb3J0YWJsZSkge1xuICAgICAgICAgIG11bHRpRHJhZ1NvcnRhYmxlLm11bHRpRHJhZy5fZGVzZWxlY3RNdWx0aURyYWcoKTtcblxuICAgICAgICAgIG11bHRpRHJhZ1NvcnRhYmxlID0gc29ydGFibGU7XG4gICAgICAgIH1cblxuICAgICAgICB0b2dnbGVDbGFzcyhlbCwgc29ydGFibGUub3B0aW9ucy5zZWxlY3RlZENsYXNzLCB0cnVlKTtcbiAgICAgICAgbXVsdGlEcmFnRWxlbWVudHMucHVzaChlbCk7XG4gICAgICB9LFxuXG4gICAgICAvKipcclxuICAgICAgICogRGVzZWxlY3RzIHRoZSBwcm92aWRlZCBtdWx0aS1kcmFnIGl0ZW1cclxuICAgICAgICogQHBhcmFtICB7SFRNTEVsZW1lbnR9IGVsICAgIFRoZSBlbGVtZW50IHRvIGJlIGRlc2VsZWN0ZWRcclxuICAgICAgICovXG4gICAgICBkZXNlbGVjdDogZnVuY3Rpb24gZGVzZWxlY3QoZWwpIHtcbiAgICAgICAgdmFyIHNvcnRhYmxlID0gZWwucGFyZW50Tm9kZVtleHBhbmRvXSxcbiAgICAgICAgICAgIGluZGV4ID0gbXVsdGlEcmFnRWxlbWVudHMuaW5kZXhPZihlbCk7XG4gICAgICAgIGlmICghc29ydGFibGUgfHwgIXNvcnRhYmxlLm9wdGlvbnMubXVsdGlEcmFnIHx8ICF+aW5kZXgpIHJldHVybjtcbiAgICAgICAgdG9nZ2xlQ2xhc3MoZWwsIHNvcnRhYmxlLm9wdGlvbnMuc2VsZWN0ZWRDbGFzcywgZmFsc2UpO1xuICAgICAgICBtdWx0aURyYWdFbGVtZW50cy5zcGxpY2UoaW5kZXgsIDEpO1xuICAgICAgfVxuICAgIH0sXG4gICAgZXZlbnRQcm9wZXJ0aWVzOiBmdW5jdGlvbiBldmVudFByb3BlcnRpZXMoKSB7XG4gICAgICB2YXIgX3RoaXMzID0gdGhpcztcblxuICAgICAgdmFyIG9sZEluZGljaWVzID0gW10sXG4gICAgICAgICAgbmV3SW5kaWNpZXMgPSBbXTtcbiAgICAgIG11bHRpRHJhZ0VsZW1lbnRzLmZvckVhY2goZnVuY3Rpb24gKG11bHRpRHJhZ0VsZW1lbnQpIHtcbiAgICAgICAgb2xkSW5kaWNpZXMucHVzaCh7XG4gICAgICAgICAgbXVsdGlEcmFnRWxlbWVudDogbXVsdGlEcmFnRWxlbWVudCxcbiAgICAgICAgICBpbmRleDogbXVsdGlEcmFnRWxlbWVudC5zb3J0YWJsZUluZGV4XG4gICAgICAgIH0pOyAvLyBtdWx0aURyYWdFbGVtZW50cyB3aWxsIGFscmVhZHkgYmUgc29ydGVkIGlmIGZvbGRpbmdcblxuICAgICAgICB2YXIgbmV3SW5kZXg7XG5cbiAgICAgICAgaWYgKGZvbGRpbmcgJiYgbXVsdGlEcmFnRWxlbWVudCAhPT0gZHJhZ0VsJDEpIHtcbiAgICAgICAgICBuZXdJbmRleCA9IC0xO1xuICAgICAgICB9IGVsc2UgaWYgKGZvbGRpbmcpIHtcbiAgICAgICAgICBuZXdJbmRleCA9IGluZGV4KG11bHRpRHJhZ0VsZW1lbnQsICc6bm90KC4nICsgX3RoaXMzLm9wdGlvbnMuc2VsZWN0ZWRDbGFzcyArICcpJyk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgbmV3SW5kZXggPSBpbmRleChtdWx0aURyYWdFbGVtZW50KTtcbiAgICAgICAgfVxuXG4gICAgICAgIG5ld0luZGljaWVzLnB1c2goe1xuICAgICAgICAgIG11bHRpRHJhZ0VsZW1lbnQ6IG11bHRpRHJhZ0VsZW1lbnQsXG4gICAgICAgICAgaW5kZXg6IG5ld0luZGV4XG4gICAgICAgIH0pO1xuICAgICAgfSk7XG4gICAgICByZXR1cm4ge1xuICAgICAgICBpdGVtczogX3RvQ29uc3VtYWJsZUFycmF5KG11bHRpRHJhZ0VsZW1lbnRzKSxcbiAgICAgICAgY2xvbmVzOiBbXS5jb25jYXQobXVsdGlEcmFnQ2xvbmVzKSxcbiAgICAgICAgb2xkSW5kaWNpZXM6IG9sZEluZGljaWVzLFxuICAgICAgICBuZXdJbmRpY2llczogbmV3SW5kaWNpZXNcbiAgICAgIH07XG4gICAgfSxcbiAgICBvcHRpb25MaXN0ZW5lcnM6IHtcbiAgICAgIG11bHRpRHJhZ0tleTogZnVuY3Rpb24gbXVsdGlEcmFnS2V5KGtleSkge1xuICAgICAgICBrZXkgPSBrZXkudG9Mb3dlckNhc2UoKTtcblxuICAgICAgICBpZiAoa2V5ID09PSAnY3RybCcpIHtcbiAgICAgICAgICBrZXkgPSAnQ29udHJvbCc7XG4gICAgICAgIH0gZWxzZSBpZiAoa2V5Lmxlbmd0aCA+IDEpIHtcbiAgICAgICAgICBrZXkgPSBrZXkuY2hhckF0KDApLnRvVXBwZXJDYXNlKCkgKyBrZXkuc3Vic3RyKDEpO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIGtleTtcbiAgICAgIH1cbiAgICB9XG4gIH0pO1xufVxuXG5mdW5jdGlvbiBpbnNlcnRNdWx0aURyYWdFbGVtZW50cyhjbG9uZXNJbnNlcnRlZCwgcm9vdEVsKSB7XG4gIG11bHRpRHJhZ0VsZW1lbnRzLmZvckVhY2goZnVuY3Rpb24gKG11bHRpRHJhZ0VsZW1lbnQsIGkpIHtcbiAgICB2YXIgdGFyZ2V0ID0gcm9vdEVsLmNoaWxkcmVuW211bHRpRHJhZ0VsZW1lbnQuc29ydGFibGVJbmRleCArIChjbG9uZXNJbnNlcnRlZCA/IE51bWJlcihpKSA6IDApXTtcblxuICAgIGlmICh0YXJnZXQpIHtcbiAgICAgIHJvb3RFbC5pbnNlcnRCZWZvcmUobXVsdGlEcmFnRWxlbWVudCwgdGFyZ2V0KTtcbiAgICB9IGVsc2Uge1xuICAgICAgcm9vdEVsLmFwcGVuZENoaWxkKG11bHRpRHJhZ0VsZW1lbnQpO1xuICAgIH1cbiAgfSk7XG59XG4vKipcclxuICogSW5zZXJ0IG11bHRpLWRyYWcgY2xvbmVzXHJcbiAqIEBwYXJhbSAge1tCb29sZWFuXX0gZWxlbWVudHNJbnNlcnRlZCAgV2hldGhlciB0aGUgbXVsdGktZHJhZyBlbGVtZW50cyBhcmUgaW5zZXJ0ZWRcclxuICogQHBhcmFtICB7SFRNTEVsZW1lbnR9IHJvb3RFbFxyXG4gKi9cblxuXG5mdW5jdGlvbiBpbnNlcnRNdWx0aURyYWdDbG9uZXMoZWxlbWVudHNJbnNlcnRlZCwgcm9vdEVsKSB7XG4gIG11bHRpRHJhZ0Nsb25lcy5mb3JFYWNoKGZ1bmN0aW9uIChjbG9uZSwgaSkge1xuICAgIHZhciB0YXJnZXQgPSByb290RWwuY2hpbGRyZW5bY2xvbmUuc29ydGFibGVJbmRleCArIChlbGVtZW50c0luc2VydGVkID8gTnVtYmVyKGkpIDogMCldO1xuXG4gICAgaWYgKHRhcmdldCkge1xuICAgICAgcm9vdEVsLmluc2VydEJlZm9yZShjbG9uZSwgdGFyZ2V0KTtcbiAgICB9IGVsc2Uge1xuICAgICAgcm9vdEVsLmFwcGVuZENoaWxkKGNsb25lKTtcbiAgICB9XG4gIH0pO1xufVxuXG5mdW5jdGlvbiByZW1vdmVNdWx0aURyYWdFbGVtZW50cygpIHtcbiAgbXVsdGlEcmFnRWxlbWVudHMuZm9yRWFjaChmdW5jdGlvbiAobXVsdGlEcmFnRWxlbWVudCkge1xuICAgIGlmIChtdWx0aURyYWdFbGVtZW50ID09PSBkcmFnRWwkMSkgcmV0dXJuO1xuICAgIG11bHRpRHJhZ0VsZW1lbnQucGFyZW50Tm9kZSAmJiBtdWx0aURyYWdFbGVtZW50LnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQobXVsdGlEcmFnRWxlbWVudCk7XG4gIH0pO1xufVxuXG5Tb3J0YWJsZS5tb3VudChuZXcgQXV0b1Njcm9sbFBsdWdpbigpKTtcblNvcnRhYmxlLm1vdW50KFJlbW92ZSwgUmV2ZXJ0KTtcblxuZXhwb3J0IGRlZmF1bHQgU29ydGFibGU7XG5leHBvcnQgeyBNdWx0aURyYWdQbHVnaW4gYXMgTXVsdGlEcmFnLCBTb3J0YWJsZSwgU3dhcFBsdWdpbiBhcyBTd2FwIH07XG4iLCIvLy8gR2xvYmFsIHZhcmlhYmxlc1xuXG5pbXBvcnQgU29ydGFibGUgZnJvbSAnc29ydGFibGVqcyc7XG5cbi8vIERlYnVnXG5jb25zdCBsb2dUb0NvbnNvbGUgPSBmYWxzZTtcblxuLy8gQWR2YW5jZWQgZmVhdHVyZVxuY29uc3QgZGVmYXVsdFJlZ2V4ID0gL1tcXHNcXFNdKi9pO1xuXG4vLyBPdGhlciBcbmNvbnN0IG9zID0gZ2V0T1MoKTtcbmNvbnN0IG1vZGlmaWVycyA9IFtcIkNvbnRyb2xcIiwgXCJTaGlmdFwiLCBcIkFsdFwiLCBcIk1ldGFcIl07XG5sZXQgbWV0YSA9ICcnO1xuaWYgKG9zID09PSAnbWFjT1MnKSB7XG4gICAgbWV0YSA9ICdjbWQrJztcbn0gZWxzZSBpZiAob3MgPT09ICdXaW5kb3dzJykge1xuICAgIG1ldGEgPSAnd2luKyc7XG59IGVsc2UgaWYgKG9zID09PSAnTGludXgnKSB7XG4gICAgbWV0YSA9ICdzdXBlcisnO1xufSBlbHNlIG1ldGEgPSAnbWV0YSsnO1xuXG4vLyBTZXR0aW5ncyBjb250YWluZXIgYW5kIGRpdiBmb3IgYWRkU2VhcmNoRW5naW5lXG5jb25zdCBkaXZDb250YWluZXIgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnY29udGFpbmVyJyk7XG5cbi8vIEFkZCBTZWFyY2ggRW5naW5lXG5jb25zdCBzaG93ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ3Nob3cnKTsgLy8gQm9vbGVhblxuY29uc3Qgc2VuYW1lID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ25hbWUnKTsgLy8gU3RyaW5nXG5jb25zdCBrZXl3b3JkID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2tleXdvcmQnKTsgLy8gU3RyaW5nXG5jb25zdCBtdWx0aXRhYiA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdtdWx0aXRhYicpOyAvLyBCb29sZWFuXG5jb25zdCB1cmwgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgndXJsJyk7IC8vIFN0cmluZ1xuY29uc3QgcmVnZXggPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgncmVnZXgnKTsgLy8gU3RyaW5nXG5jb25zdCBrYnNjID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2tiLXNob3J0Y3V0Jyk7IC8vIFN0cmluZ1xuXG4vLyBBZGQgZm9sZGVyXG5jb25zdCBmb2xkZXJOYW1lID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2ZvbGRlck5hbWUnKTtcbmNvbnN0IGZvbGRlcktleXdvcmQgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnZm9sZGVyS2V5d29yZCcpO1xuXG4vLyBTZXR0aW5nc1xuY29uc3QgZXhhY3RNYXRjaCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdleGFjdE1hdGNoJyk7XG5jb25zdCBvcGVuTmV3VGFiID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ29wZW5OZXdUYWInKTtcbmNvbnN0IHNhbWVUYWIgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnc2FtZVRhYicpO1xuY29uc3Qgb3Blbk5ld1dpbmRvdyA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdvcGVuTmV3V2luZG93Jyk7XG5jb25zdCBvcGVuU2lkZWJhciA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdvcGVuU2lkZWJhcicpO1xuY29uc3QgdGFiTW9kZSA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCd0YWJNb2RlJyk7XG5jb25zdCB0YWJBY3RpdmUgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgndGFiQWN0aXZlJyk7XG5jb25zdCBwcml2YXRlTW9kZSA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdwcml2YXRlTW9kZScpO1xuY29uc3QgYWN0aXZlID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2FjdGl2ZScpO1xuY29uc3QgcG9zaXRpb24gPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgncG9zaXRpb24nKTtcbmNvbnN0IHByaXZhY3kgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgncHJpdmFjeScpO1xuY29uc3QgbGFzdFRhYiA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdsYXN0VGFiJyk7XG5jb25zdCBvcHRpb25zTWVudUxvY2F0aW9uID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ29wdGlvbnNNZW51TG9jYXRpb24nKTtcbmNvbnN0IGRpc3BsYXlFeGlmU3VtbWFyeSA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdkaXNwbGF5RXhpZlN1bW1hcnknKTtcbmNvbnN0IGRpc3BsYXlGYXZpY29ucyA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdkaXNwbGF5RmF2aWNvbnMnKTtcbmNvbnN0IGRpc2FibGVBbHRDbGljayA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdkaXNhYmxlQWx0Q2xpY2snKTtcbmNvbnN0IHJlc2V0UHJlZmVyZW5jZXMgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgncmVzZXRQcmVmZXJlbmNlcycpO1xuY29uc3QgZm9yY2VTZWFyY2hFbmdpbmVzUmVsb2FkID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2ZvcmNlU2VhcmNoRW5naW5lc1JlbG9hZCcpO1xuY29uc3QgZm9yY2VGYXZpY29uc1JlbG9hZCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdmb3JjZUZhdmljb25zUmVsb2FkJyk7XG5jb25zdCBzZWFyY2hFbmdpbmVTaXRlU2VhcmNoID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ3NpdGVTZWFyY2gnKTtcbmNvbnN0IHVzZVJlZ2V4ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ3VzZVJlZ2V4Jyk7XG5jb25zdCBtdWx0aU5ld1dpbmRvdyA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdtdWx0aU5ld1dpbmRvdycpO1xuY29uc3QgbXVsdGlBY3RpdmVUYWIgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnbXVsdGlBY3RpdmVUYWInKTtcbmNvbnN0IG11bHRpQWZ0ZXJMYXN0VGFiID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ211bHRpQWZ0ZXJMYXN0VGFiJyk7XG5jb25zdCBtdWx0aU1vZGUgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnbXVsdGlNb2RlJyk7XG5cbi8vIEFsbCBlbmdpbmUgYnV0dG9uc1xuY29uc3QgYnRuQ2xlYXJBbGwgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnY2xlYXJBbGwnKTtcbmNvbnN0IGJ0blNlbGVjdEFsbCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdzZWxlY3RBbGwnKTtcbmNvbnN0IGJ0blNvcnRBbHBoYSA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdzb3J0QWxwaGFiZXRpY2FsbHknKTtcbmNvbnN0IGJ0blNob3dBZHZhbmNlZEZlYXR1cmVzID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ3Nob3dBZHZhbmNlZEZlYXR1cmVzJyk7XG5jb25zdCBidG5IaWRlQWR2YW5jZWRGZWF0dXJlcyA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdoaWRlQWR2YW5jZWRGZWF0dXJlcycpO1xuY29uc3QgYnRuUmVzZXQgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgncmVzZXQnKTtcblxuLy8gQWRkIG5ldyBzZWFyY2ggZW5naW5lIGJ1dHRvbnNcbmNvbnN0IGJ0blRlc3QgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgndGVzdCcpO1xuY29uc3QgYnRuQWRkID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2FkZFNlYXJjaEVuZ2luZScpO1xuY29uc3QgYnRuQ2xlYXJBZGRTZWFyY2hFbmdpbmUgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnY2xlYXJBZGRTZWFyY2hFbmdpbmUnKTtcbmNvbnN0IGJ0bkFkZEZvbGRlciA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdhZGRGb2xkZXInKTtcbmNvbnN0IGJ0bkNsZWFyQWRkRm9sZGVyID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2NsZWFyQWRkRm9sZGVyJyk7XG5cbi8vIEltcG9ydC9leHBvcnRcbmNvbnN0IGJ0bkRvd25sb2FkID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2Rvd25sb2FkJyk7XG5jb25zdCBidG5VcGxvYWQgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgndXBsb2FkJyk7XG5cbi8vIFRyYW5zbGF0aW9uIHZhcmlhYmxlc1xuY29uc3QgcmVtb3ZlID0gYnJvd3Nlci5pMThuLmdldE1lc3NhZ2UoJ3JlbW92ZScpO1xuY29uc3QgZm9sZGVyID0gYnJvd3Nlci5pMThuLmdldE1lc3NhZ2UoJ2ZvbGRlcicpO1xuY29uc3QgbXVsdGlwbGVTZWFyY2hFbmdpbmVzU2VhcmNoID0gYnJvd3Nlci5pMThuLmdldE1lc3NhZ2UoJ211bHRpcGxlU2VhcmNoRW5naW5lc1NlYXJjaCcpO1xuY29uc3QgdGl0bGVTaG93RW5naW5lID0gYnJvd3Nlci5pMThuLmdldE1lc3NhZ2UoJ3RpdGxlU2hvd0VuZ2luZScpO1xuY29uc3QgcGxhY2VIb2xkZXJOYW1lID0gYnJvd3Nlci5pMThuLmdldE1lc3NhZ2UoJ3NlYXJjaEVuZ2luZU5hbWUnKTtcbmNvbnN0IHBsYWNlSG9sZGVyS2V5d29yZCA9IGJyb3dzZXIuaTE4bi5nZXRNZXNzYWdlKCdwbGFjZUhvbGRlcktleXdvcmQnKTtcbmNvbnN0IHBsYWNlSG9sZGVyS2V5Ym9hcmRTaG9ydGN1dCA9IGJyb3dzZXIuaTE4bi5nZXRNZXNzYWdlKCdwbGFjZUhvbGRlcktleWJvYXJkU2hvcnRjdXQnKTtcbmNvbnN0IG5vdGlmeVNlYXJjaEVuZ2luZVVybFJlcXVpcmVkID0gYnJvd3Nlci5pMThuLmdldE1lc3NhZ2UoJ25vdGlmeVNlYXJjaEVuZ2luZVVybFJlcXVpcmVkJyk7XG5cbi8vIFR5cGluZyB0aW1lclxubGV0IHR5cGluZ1RpbWVyU2VhcmNoRW5naW5lTmFtZTtcbmxldCB0eXBpbmdUaW1lcktleXdvcmQ7XG5sZXQgdHlwaW5nVGltZXJGb2xkZXJOYW1lO1xubGV0IHR5cGluZ1RpbWVyRm9sZGVyS2V5d29yZDtcbmxldCB0eXBpbmdUaW1lclF1ZXJ5U3RyaW5nO1xubGV0IHR5cGluZ1RpbWVyUmVnZXg7XG5sZXQgdHlwaW5nRXZlbnRTZWFyY2hFbmdpbmVOYW1lO1xubGV0IHR5cGluZ0V2ZW50S2V5d29yZDtcbmxldCB0eXBpbmdFdmVudEZvbGRlcktleXdvcmQ7XG5sZXQgdHlwaW5nRXZlbnRGb2xkZXJOYW1lO1xubGV0IHR5cGluZ0V2ZW50UXVlcnlTdHJpbmc7XG5sZXQgdHlwaW5nRXZlbnRSZWdleDtcbmxldCB0eXBpbmdJbnRlcnZhbCA9IDE1MDA7XG5cbi8vIE90aGVyIHZhcmlhYmxlc1xubGV0IG51bWJlck9mU2VhcmNoRW5naW5lcyA9IDA7XG5sZXQgc2VhcmNoRW5naW5lcyA9IHt9O1xubGV0IGtleXNQcmVzc2VkID0ge307XG5cbi8vLyBFdmVudCBoYW5kbGVyc1xuZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcignRE9NQ29udGVudExvYWRlZCcsIHJlc3RvcmVPcHRpb25zUGFnZSk7XG5icm93c2VyLnN0b3JhZ2Uub25DaGFuZ2VkLmFkZExpc3RlbmVyKGhhbmRsZVN0b3JhZ2VDaGFuZ2UpO1xuLy8gYnJvd3Nlci5ydW50aW1lLm9uTWVzc2FnZS5hZGRMaXN0ZW5lcihoYW5kbGVJbmNvbWluZ01lc3NhZ2VzKTtcblxuLy8gU2V0dGluZ3NcbmV4YWN0TWF0Y2guYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCB1cGRhdGVTZWFyY2hPcHRpb25zKTtcbmRpc3BsYXlGYXZpY29ucy5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIHVwZGF0ZURpc3BsYXlGYXZpY29ucyk7XG5kaXNhYmxlQWx0Q2xpY2suYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCB1cGRhdGVEaXNhYmxlQWx0Q2xpY2spO1xudGFiTW9kZS5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIHVwZGF0ZVRhYk1vZGUpO1xudGFiQWN0aXZlLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgdXBkYXRlVGFiTW9kZSk7XG5sYXN0VGFiLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgdXBkYXRlVGFiTW9kZSk7XG5wcml2YXRlTW9kZS5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIHVwZGF0ZVRhYk1vZGUpO1xub3B0aW9uc01lbnVMb2NhdGlvbi5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIHVwZGF0ZU9wdGlvbnNNZW51TG9jYXRpb24pO1xuZGlzcGxheUV4aWZTdW1tYXJ5LmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgdXBkYXRlRGlzcGxheUV4aWZTdW1tYXJ5KTtcbnNlYXJjaEVuZ2luZVNpdGVTZWFyY2guYWRkRXZlbnRMaXN0ZW5lcignY2hhbmdlJywgdXBkYXRlU2l0ZVNlYXJjaFNldHRpbmcpO1xucmVzZXRQcmVmZXJlbmNlcy5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIHVwZGF0ZVJlc2V0T3B0aW9ucyk7XG5mb3JjZVNlYXJjaEVuZ2luZXNSZWxvYWQuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCB1cGRhdGVSZXNldE9wdGlvbnMpO1xuZm9yY2VGYXZpY29uc1JlbG9hZC5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIHVwZGF0ZVJlc2V0T3B0aW9ucyk7XG51c2VSZWdleC5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIHVwZGF0ZVVzZVJlZ2V4KTtcbm11bHRpTW9kZS5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIHVwZGF0ZU11bHRpTW9kZSk7XG5cbi8vIEFsbCBlbmdpbmUgYnV0dG9uc1xuYnRuQ2xlYXJBbGwuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCBjbGVhckFsbCk7XG5idG5TZWxlY3RBbGwuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCBzZWxlY3RBbGwpO1xuYnRuU29ydEFscGhhLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgc29ydFNlYXJjaEVuZ2luZXNBbHBoYWJldGljYWxseSk7XG5idG5TaG93QWR2YW5jZWRGZWF0dXJlcy5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIHRvZ2dsZUFkdmFuY2VkRmVhdHVyZXMpO1xuYnRuSGlkZUFkdmFuY2VkRmVhdHVyZXMuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCB0b2dnbGVBZHZhbmNlZEZlYXR1cmVzKTtcbmJ0blJlc2V0LmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgcmVzZXQpO1xuXG4vLyBBZGQgbmV3IGVuZ2luZVxuYnRuVGVzdC5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIHRlc3RTZWFyY2hFbmdpbmUpO1xuYnRuQWRkLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgYWRkU2VhcmNoRW5naW5lKTtcbmJ0bkNsZWFyQWRkU2VhcmNoRW5naW5lLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgY2xlYXJBZGRTZWFyY2hFbmdpbmUpO1xuLy9idG5BZGRGb2xkZXIuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCBhZGRGb2xkZXIpO1xuLy9idG5DbGVhckFkZEZvbGRlci5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIGNsZWFyQWRkRm9sZGVyKTtcblxuLy8gSW1wb3J0L2V4cG9ydFxuYnRuRG93bmxvYWQuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCBzYXZlVG9Mb2NhbERpc2spO1xuYnRuVXBsb2FkLmFkZEV2ZW50TGlzdGVuZXIoJ2NoYW5nZScsIGhhbmRsZUZpbGVVcGxvYWQpO1xuXG4vLyBEZXRlY3QgdGhlIHVuZGVybHlpbmcgT1NcbmZ1bmN0aW9uIGdldE9TKCkge1xuICAgIGNvbnN0IHVzZXJBZ2VudCA9IHdpbmRvdy5uYXZpZ2F0b3IudXNlckFnZW50O1xuICAgIGNvbnN0IHBsYXRmb3JtID0gd2luZG93Lm5hdmlnYXRvci5wbGF0Zm9ybTtcbiAgICAvLyBpZiAobmF2aWdhdG9yLnVzZXJBZ2VudERhdGEucGxhdGZvcm0gIT09IHVuZGVmaW5lZCkge1xuICAgIC8vIFx0cGxhdGZvcm0gPSBuYXZpZ2F0b3IudXNlckFnZW50RGF0YS5wbGF0Zm9ybTtcbiAgICAvLyB9IGVsc2Uge1xuICAgIC8vIFx0cGxhdGZvcm0gPSB3aW5kb3cubmF2aWdhdG9yLnBsYXRmb3JtO1xuICAgIC8vIH1cblxuICAgIGlmIChwbGF0Zm9ybS50b0xvd2VyQ2FzZSgpLnN0YXJ0c1dpdGgoXCJtYWNcIikpIHtcbiAgICAgICAgcmV0dXJuICdtYWNPUyc7XG4gICAgfSBlbHNlIGlmIChwbGF0Zm9ybS50b0xvd2VyQ2FzZSgpLnN0YXJ0c1dpdGgoXCJpcFwiKSkge1xuICAgICAgICByZXR1cm4gJ2lPUyc7XG4gICAgfSBlbHNlIGlmIChwbGF0Zm9ybS50b0xvd2VyQ2FzZSgpLnN0YXJ0c1dpdGgoXCJ3aW5cIikpIHtcbiAgICAgICAgcmV0dXJuICdXaW5kb3dzJztcbiAgICB9IGVsc2UgaWYgKC9BbmRyb2lkLy50ZXN0KHVzZXJBZ2VudCkpIHtcbiAgICAgICAgcmV0dXJuICdBbmRyb2lkJztcbiAgICB9IGVsc2UgaWYgKC9MaW51eC8udGVzdChwbGF0Zm9ybSkpIHtcbiAgICAgICAgcmV0dXJuICdMaW51eCc7XG4gICAgfSBlbHNlIHJldHVybiBudWxsO1xuXG59XG5cbi8vIFNlbmQgYSBtZXNzYWdlIHRvIHRoZSBiYWNrZ3JvdW5kIHNjcmlwdFxuYXN5bmMgZnVuY3Rpb24gc2VuZE1lc3NhZ2UoYWN0aW9uLCBkYXRhKSB7XG4gICAgYXdhaXQgYnJvd3Nlci5ydW50aW1lLnNlbmRNZXNzYWdlKHsgYWN0aW9uOiBhY3Rpb24sIGRhdGE6IEpTT04ucGFyc2UoSlNPTi5zdHJpbmdpZnkoZGF0YSkpIH0pXG4gICAgICAgIC5jYXRjaChlID0+IHtcbiAgICAgICAgICAgIGlmIChsb2dUb0NvbnNvbGUpIGNvbnNvbGUuZXJyb3IoZSk7XG4gICAgICAgIH0pO1xufVxuXG5mdW5jdGlvbiBoYW5kbGVTdG9yYWdlQ2hhbmdlKGNoYW5nZXMsIGFyZWEpIHtcbiAgICBpZiAoYXJlYSA9PT0gJ2xvY2FsJykge1xuICAgICAgICBsZXQgb2xkU2VhcmNoRW5naW5lcyA9IEpTT04ucGFyc2UoSlNPTi5zdHJpbmdpZnkoc2VhcmNoRW5naW5lcykpO1xuICAgICAgICBzZWFyY2hFbmdpbmVzID0ge307XG4gICAgICAgIGxldCBpZHMgPSBPYmplY3Qua2V5cyhjaGFuZ2VzKTtcbiAgICAgICAgaWYgKGxvZ1RvQ29uc29sZSkge1xuICAgICAgICAgICAgY29uc29sZS5sb2coY2hhbmdlcyk7XG4gICAgICAgICAgICBjb25zb2xlLmxvZyhpZHMpO1xuICAgICAgICB9XG4gICAgICAgIGZvciAobGV0IGlkIG9mIGlkcykge1xuICAgICAgICAgICAgaWYgKGNoYW5nZXNbaWRdLm5ld1ZhbHVlID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChsb2dUb0NvbnNvbGUpIGNvbnNvbGUubG9nKGlkKTtcbiAgICAgICAgICAgIHNlYXJjaEVuZ2luZXNbaWRdID0gY2hhbmdlc1tpZF0ubmV3VmFsdWU7XG4gICAgICAgICAgICBpZiAobG9nVG9Db25zb2xlKSB7XG4gICAgICAgICAgICAgICAgY29uc29sZS5sb2coYFNlYXJjaCBlbmdpbmUgJHtpZH06XFxuYCk7XG4gICAgICAgICAgICAgICAgY29uc29sZS5sb2coc2VhcmNoRW5naW5lc1tpZF0pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGlmICghT2JqZWN0LmtleXMoc2VhcmNoRW5naW5lcykubGVuZ3RoID4gMCkgc2VhcmNoRW5naW5lcyA9IG9sZFNlYXJjaEVuZ2luZXM7XG4gICAgICAgIGlmIChsb2dUb0NvbnNvbGUpIGNvbnNvbGUubG9nKHNlYXJjaEVuZ2luZXMpO1xuICAgICAgICBkaXNwbGF5U2VhcmNoRW5naW5lcygpO1xuICAgIH0gZWxzZSBpZiAoYXJlYSA9PT0gJ3N5bmMnKSB7XG4gICAgICAgIGxldCBkYXRhID0ge307XG4gICAgICAgIGxldCBvcHRpb25LZXlzID0gT2JqZWN0LmtleXMoY2hhbmdlcyk7XG4gICAgICAgIGlmIChsb2dUb0NvbnNvbGUpIHtcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKGNoYW5nZXMpO1xuICAgICAgICAgICAgY29uc29sZS5sb2cob3B0aW9uS2V5cyk7XG4gICAgICAgIH1cbiAgICAgICAgZm9yIChsZXQgb3B0aW9uS2V5IG9mIG9wdGlvbktleXMpIHtcbiAgICAgICAgICAgIGlmIChjaGFuZ2VzW29wdGlvbktleV0ubmV3VmFsdWUgIT09IHVuZGVmaW5lZCkgZGF0YVtvcHRpb25LZXldID0gY2hhbmdlc1tvcHRpb25LZXldLm5ld1ZhbHVlO1xuICAgICAgICAgICAgaWYgKGxvZ1RvQ29uc29sZSkge1xuICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKG9wdGlvbktleSk7XG4gICAgICAgICAgICAgICAgY29uc29sZS5sb2coY2hhbmdlc1tvcHRpb25LZXldLm5ld1ZhbHVlKTtcbiAgICAgICAgICAgICAgICBjb25zb2xlLmxvZygnLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tJyk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGxvZ1RvQ29uc29sZSkgY29uc29sZS5sb2coZGF0YSk7XG4gICAgICAgIGNvbnN0IG9wdGlvbnMgPSBkYXRhLm9wdGlvbnM7XG4gICAgICAgIGlmICghaXNFbXB0eShvcHRpb25zKSkgc2V0T3B0aW9ucyhvcHRpb25zKTtcbiAgICB9XG59XG5cbi8vIE5vdGlmaWNhdGlvblxuZnVuY3Rpb24gbm90aWZ5KG1lc3NhZ2UpIHtcbiAgICBzZW5kTWVzc2FnZSgnbm90aWZ5JywgbWVzc2FnZSk7XG59XG5cbi8vIEdlbmVyaWMgRXJyb3IgSGFuZGxlclxuZnVuY3Rpb24gb25FcnJvcihlcnJvcikge1xuICAgIGlmIChsb2dUb0NvbnNvbGUpIGNvbnNvbGUubG9nKGAke2Vycm9yfWApO1xufVxuXG5mdW5jdGlvbiByZW1vdmVFdmVudEhhbmRsZXIoZSkge1xuICAgIGUuc3RvcFByb3BhZ2F0aW9uKCk7XG4gICAgcmVtb3ZlU2VhcmNoRW5naW5lKGUpO1xufVxuXG5mdW5jdGlvbiB0b2dnbGVBZHZhbmNlZEZlYXR1cmVzKCkge1xuICAgIGlmIChidG5TaG93QWR2YW5jZWRGZWF0dXJlcy5zdHlsZS5kaXNwbGF5ICE9ICdub25lJykge1xuICAgICAgICBidG5TaG93QWR2YW5jZWRGZWF0dXJlcy5zdHlsZS5kaXNwbGF5ID0gJ25vbmUnO1xuICAgICAgICBidG5IaWRlQWR2YW5jZWRGZWF0dXJlcy5zdHlsZS5kaXNwbGF5ID0gJ2Jsb2NrJztcbiAgICAgICAgZm9yIChsZXQgZWwgb2YgZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbCgnLnJlZ2V4JykpIGVsLnN0eWxlLmRpc3BsYXkgPSAnaW5saW5lLWJsb2NrJztcbiAgICB9IGVsc2Uge1xuICAgICAgICBidG5TaG93QWR2YW5jZWRGZWF0dXJlcy5zdHlsZS5kaXNwbGF5ID0gJ2Jsb2NrJztcbiAgICAgICAgYnRuSGlkZUFkdmFuY2VkRmVhdHVyZXMuc3R5bGUuZGlzcGxheSA9ICdub25lJztcbiAgICAgICAgZm9yIChsZXQgZWwgb2YgZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbCgnLnJlZ2V4JykpIGVsLnN0eWxlLmRpc3BsYXkgPSAnbm9uZSc7XG4gICAgfVxufVxuXG4vLyBEaXNwbGF5IHRoZSBsaXN0IG9mIHNlYXJjaCBlbmdpbmVzXG5mdW5jdGlvbiBkaXNwbGF5U2VhcmNoRW5naW5lcygpIHtcbiAgICBjb25zdCBkaXYgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnc2VhcmNoRW5naW5lcycpO1xuICAgIGlmICghaXNFbXB0eShkaXYpKSBkaXZDb250YWluZXIucmVtb3ZlQ2hpbGQoZGl2KTtcblxuICAgIHNlYXJjaEVuZ2luZXMgPSBzb3J0QnlJbmRleChzZWFyY2hFbmdpbmVzKTtcbiAgICBudW1iZXJPZlNlYXJjaEVuZ2luZXMgPSBPYmplY3Qua2V5cyhzZWFyY2hFbmdpbmVzKS5sZW5ndGg7XG4gICAgbGV0IGRpdlNlYXJjaEVuZ2luZXMgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdvbCcpO1xuICAgIGRpdlNlYXJjaEVuZ2luZXMuc2V0QXR0cmlidXRlKCdpZCcsICdzZWFyY2hFbmdpbmVzJyk7XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBudW1iZXJPZlNlYXJjaEVuZ2luZXMgKyAxOyBpKyspIHtcbiAgICAgICAgZm9yIChsZXQgaWQgaW4gc2VhcmNoRW5naW5lcykge1xuICAgICAgICAgICAgaWYgKHNlYXJjaEVuZ2luZXNbaWRdLmluZGV4ID09PSBpKSB7XG4gICAgICAgICAgICAgICAgbGV0IHNlYXJjaEVuZ2luZSA9IHNlYXJjaEVuZ2luZXNbaWRdO1xuICAgICAgICAgICAgICAgIGxldCBsaW5lSXRlbSA9IGNyZWF0ZUxpbmVJdGVtKGlkLCBzZWFyY2hFbmdpbmUsIHNlYXJjaEVuZ2luZS5mb2xkZXIpO1xuICAgICAgICAgICAgICAgIGRpdlNlYXJjaEVuZ2luZXMuYXBwZW5kQ2hpbGQobGluZUl0ZW0pO1xuXG4gICAgICAgICAgICAgICAgLy8gSWYgZm9sZGVyLCBhZGQgc2VhcmNoIGVuZ2luZXMgd2l0aGluIGZvbGRlclxuICAgICAgICAgICAgICAgIGlmIChzZWFyY2hFbmdpbmUuZm9sZGVyICYmIHNlYXJjaEVuZ2luZS5zZWFyY2hFbmdpbmVzKSB7XG4gICAgICAgICAgICAgICAgICAgIHNlYXJjaEVuZ2luZS5zZWFyY2hFbmdpbmVzLmZvckVhY2goc2UgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgbGV0IHNlSXRlbSA9IGNyZWF0ZUxpbmVJdGVtKHNlLmlkLCBzZSwgZmFsc2UpO1xuICAgICAgICAgICAgICAgICAgICAgICAgbGluZUl0ZW0ucXVlcnlTZWxlY3RvcignLnN1YmZvbGRlcicpLmFwcGVuZENoaWxkKHNlSXRlbSk7XG4gICAgICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuICAgIGRpdkNvbnRhaW5lci5hcHBlbmRDaGlsZChkaXZTZWFyY2hFbmdpbmVzKTtcbiAgICBudW1iZXJPZlNlYXJjaEVuZ2luZXMgPSBkaXZTZWFyY2hFbmdpbmVzLmNoaWxkTm9kZXMubGVuZ3RoO1xuXG4gICAgLy8gSW5pdGlhbGl6ZSBTb3J0YWJsZSBsaXN0XG4gICAgbmV3IFNvcnRhYmxlKGRpdlNlYXJjaEVuZ2luZXMsIHtcbiAgICAgICAgZ3JvdXA6IFwibmVzdGVkXCIsXG4gICAgICAgIGhhbmRsZTogJy5zb3J0JyxcbiAgICAgICAgYW5pbWF0aW9uOiAyMDAsXG4gICAgICAgIC8vIFJlY29tbWVuZGVkIGJ5IHNvcnRhYmxlIGZvciBuZXN0ZWQgc29ydGFibGVzXG4gICAgICAgIGZhbGxiYWNrT25Cb2R5OiB0cnVlLFxuICAgICAgICAvLyBPbiBlbGVtZW50IGRyYWcgZW5kZWQsIHNhdmUgc2VhcmNoIGVuZ2luZXNcbiAgICAgICAgb25FbmQ6IHNhdmVTZWFyY2hFbmdpbmVzXG4gICAgfSk7XG59XG5cbi8vIENyZWF0ZSBhIG5hdmlnYXRpb24gYnV0dG9uIHVzaW5nIGljb25zIGZyb20gaW9uaWNvbiAodXAgYXJyb3csIGRvd24gYXJyb3cgYW5kIGJpbilcbmZ1bmN0aW9uIGNyZWF0ZUJ1dHRvbihpb25pY29uQ2xhc3MsIGJ0bkNsYXNzLCBidG5UaXRsZSkge1xuICAgIGxldCBidXR0b24gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdidXR0b24nKTtcbiAgICBsZXQgYnRuSWNvbiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2knKTtcbiAgICBidXR0b24uc2V0QXR0cmlidXRlKCd0eXBlJywgJ2J1dHRvbicpO1xuICAgIGJ1dHRvbi5zZXRBdHRyaWJ1dGUoJ2NsYXNzJywgYnRuQ2xhc3MpO1xuICAgIGJ1dHRvbi5zZXRBdHRyaWJ1dGUoJ3RpdGxlJywgYnRuVGl0bGUpO1xuICAgIGJ0bkljb24uc2V0QXR0cmlidXRlKCdjbGFzcycsICdpY29uICcgKyBpb25pY29uQ2xhc3MpO1xuICAgIGJ1dHRvbi5hcHBlbmRDaGlsZChidG5JY29uKTtcbiAgICByZXR1cm4gYnV0dG9uO1xufVxuXG4vLyBEaXNwbGF5IGEgc2luZ2xlIHNlYXJjaCBlbmdpbmUgaW4gYSByb3cgb3IgbGluZSBpdGVtXG5mdW5jdGlvbiBjcmVhdGVMaW5lSXRlbShpZCwgc2VhcmNoRW5naW5lLCBpc0ZvbGRlciA9IGZhbHNlKSB7XG4gICAgaWYgKGlzRm9sZGVyKSB7IHJldHVybiBjcmVhdGVGb2xkZXJJdGVtKHNlYXJjaEVuZ2luZS5uYW1lLCBzZWFyY2hFbmdpbmUua2V5d29yZCk7IH1cblxuICAgIGNvbnN0IHNlYXJjaEVuZ2luZU5hbWUgPSBzZWFyY2hFbmdpbmUubmFtZTtcbiAgICBjb25zdCBsaW5lSXRlbSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2xpJyk7XG5cbiAgICAvLyBJbnB1dCBlbGVtZW50cyBmb3IgZWFjaCBzZWFyY2ggZW5naW5lIGNvbXBvc2luZyBlYWNoIGxpbmUgaXRlbVxuICAgIGNvbnN0IGNoa1Nob3dTZWFyY2hFbmdpbmUgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdpbnB1dCcpO1xuICAgIGNvbnN0IGlucHV0U2VhcmNoRW5naW5lTmFtZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2lucHV0Jyk7XG4gICAgY29uc3QgaW5wdXRLZXl3b3JkID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnaW5wdXQnKTtcbiAgICBjb25zdCBpbnB1dEtleWJvYXJkU2hvcnRjdXQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdpbnB1dCcpO1xuICAgIGNvbnN0IGNoa011bHRpU2VhcmNoID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnaW5wdXQnKTtcbiAgICBjb25zdCBpbnB1dFF1ZXJ5U3RyaW5nID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnaW5wdXQnKTtcbiAgICBjb25zdCBpbnB1dFJlZ2V4ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnaW5wdXQnKTtcblxuICAgIC8vIE5hdmlnYXRpb24gYW5kIGRlbGV0aW9uIGJ1dHRvbnMgZm9yIGVhY2ggc2VhcmNoIGVuZ2luZSBvciBsaW5lIGl0ZW1cbiAgICAvLyBDcmVhdGUgbWVudSB0YXJnZXQgZm9yIGxpbmUgaXRlbSBzb3J0aW5nXG4gICAgY29uc3Qgc29ydFRhcmdldCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2knKTtcbiAgICBzb3J0VGFyZ2V0LmNsYXNzTGlzdC5hZGQoJ3NvcnQnLCAnaWNvbicsICdpb24tYXJyb3ctbW92ZScpO1xuICAgIGNvbnN0IHJlbW92ZUJ1dHRvbiA9IGNyZWF0ZUJ1dHRvbignaW9uLWlvcy10cmFzaCcsICdyZW1vdmUnLCByZW1vdmUgKyAnICcgKyBzZWFyY2hFbmdpbmVOYW1lKTtcblxuICAgIC8vIEV2ZW50IGhhbmRsZXIgZm9yICdzaG93IHNlYXJjaCBlbmdpbmUnIGNoZWNrYm94IGNsaWNrIGV2ZW50XG4gICAgY2hrU2hvd1NlYXJjaEVuZ2luZS5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIHZpc2libGVDaGFuZ2VkKTsgLy8gd2hlbiB1c2VycyBjaGVjayBvciB1bmNoZWNrIHRoZSBjaGVja2JveFxuXG4gICAgLy8gRXZlbnQgaGFuZGxlcnMgZm9yIHNlYXJjaCBlbmdpbmUgbmFtZSBjaGFuZ2VzXG4gICAgaW5wdXRTZWFyY2hFbmdpbmVOYW1lLmFkZEV2ZW50TGlzdGVuZXIoJ2N1dCcsIHNlYXJjaEVuZ2luZU5hbWVDaGFuZ2VkKTsgLy8gd2hlbiB1c2VycyBjdXQgdGV4dFxuICAgIGlucHV0U2VhcmNoRW5naW5lTmFtZS5hZGRFdmVudExpc3RlbmVyKCdwYXN0ZScsIHNlYXJjaEVuZ2luZU5hbWVDaGFuZ2VkKTsgLy8gd2hlbiB1c2VycyBwYXN0ZSB0ZXh0XG4gICAgaW5wdXRTZWFyY2hFbmdpbmVOYW1lLmFkZEV2ZW50TGlzdGVuZXIoJ2lucHV0JywgKGUpID0+IHtcbiAgICAgICAgdHlwaW5nRXZlbnRTZWFyY2hFbmdpbmVOYW1lID0gZTtcbiAgICAgICAgY2xlYXJUaW1lb3V0KHR5cGluZ1RpbWVyU2VhcmNoRW5naW5lTmFtZSk7XG4gICAgICAgIHR5cGluZ1RpbWVyU2VhcmNoRW5naW5lTmFtZSA9IHNldFRpbWVvdXQoc2VhcmNoRW5naW5lTmFtZUNoYW5nZWQsIHR5cGluZ0ludGVydmFsKTtcbiAgICB9KTtcbiAgICBpbnB1dFNlYXJjaEVuZ2luZU5hbWUuYWRkRXZlbnRMaXN0ZW5lcignY2hhbmdlJywgKGUpID0+IHtcbiAgICAgICAgdHlwaW5nRXZlbnRTZWFyY2hFbmdpbmVOYW1lID0gZTtcbiAgICAgICAgY2xlYXJUaW1lb3V0KHR5cGluZ1RpbWVyU2VhcmNoRW5naW5lTmFtZSk7XG4gICAgICAgIHNlYXJjaEVuZ2luZU5hbWVDaGFuZ2VkKCk7XG4gICAgfSk7XG5cbiAgICAvLyBFdmVudCBoYW5kbGVycyBmb3Iga2V5d29yZCB0ZXh0IGNoYW5nZXNcbiAgICBpbnB1dEtleXdvcmQuYWRkRXZlbnRMaXN0ZW5lcigncGFzdGUnLCBrZXl3b3JkQ2hhbmdlZCk7IC8vIHdoZW4gdXNlcnMgcGFzdGUgdGV4dFxuICAgIGlucHV0S2V5d29yZC5hZGRFdmVudExpc3RlbmVyKCdjaGFuZ2UnLCBrZXl3b3JkQ2hhbmdlZCk7IC8vIHdoZW4gdXNlcnMgbGVhdmUgdGhlIGlucHV0IGZpZWxkIGFuZCBjb250ZW50IGhhcyBjaGFuZ2VkXG4gICAgaW5wdXRLZXl3b3JkLmFkZEV2ZW50TGlzdGVuZXIoJ2tleXVwJywgKCkgPT4ge1xuICAgICAgICBjbGVhclRpbWVvdXQodHlwaW5nVGltZXJLZXl3b3JkKTtcbiAgICAgICAgdHlwaW5nVGltZXJLZXl3b3JkID0gc2V0VGltZW91dChrZXl3b3JkQ2hhbmdlZCwgdHlwaW5nSW50ZXJ2YWwpO1xuICAgIH0pO1xuICAgIGlucHV0S2V5d29yZC5hZGRFdmVudExpc3RlbmVyKCdrZXlkb3duJywgKGUpID0+IHtcbiAgICAgICAgdHlwaW5nRXZlbnRLZXl3b3JkID0gZTtcbiAgICAgICAgY2xlYXJUaW1lb3V0KHR5cGluZ1RpbWVyS2V5d29yZCk7XG4gICAgfSk7XG5cbiAgICAvLyBFdmVudCBoYW5kbGVycyBmb3IgYWRkaW5nIGEga2V5Ym9hcmQgc2hvcnRjdXRcbiAgICBpbnB1dEtleWJvYXJkU2hvcnRjdXQuYWRkRXZlbnRMaXN0ZW5lcigna2V5dXAnLCBoYW5kbGVLZXlib2FyZFNob3J0Y3V0KTtcbiAgICBpbnB1dEtleWJvYXJkU2hvcnRjdXQuYWRkRXZlbnRMaXN0ZW5lcigna2V5ZG93bicsIChldmVudCkgPT4ge1xuICAgICAgICBrZXlzUHJlc3NlZFtldmVudC5rZXldID0gW3RydWUsIGV2ZW50LmNvZGVdO1xuICAgICAgICBpZiAobG9nVG9Db25zb2xlKSBjb25zb2xlLmxvZyhrZXlzUHJlc3NlZCk7XG4gICAgfSk7XG5cbiAgICAvLyBFdmVudCBoYW5kbGVyIGZvciAnaW5jbHVkZSBzZWFyY2ggZW5naW5lIGluIG11bHRpLXNlYXJjaCcgY2hlY2tib3ggY2xpY2sgZXZlbnRcbiAgICBjaGtNdWx0aVNlYXJjaC5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIG11bHRpVGFiQ2hhbmdlZCk7IC8vIHdoZW4gdXNlcnMgY2hlY2sgb3IgdW5jaGVjayB0aGUgY2hlY2tib3hcblxuICAgIC8vIEV2ZW50IGhhbmRsZXJzIGZvciBxdWVyeSBzdHJpbmcgY2hhbmdlc1xuICAgIGlucHV0UXVlcnlTdHJpbmcuYWRkRXZlbnRMaXN0ZW5lcigncGFzdGUnLCBxdWVyeVN0cmluZ0NoYW5nZWQpOyAvLyB3aGVuIHVzZXJzIHBhc3RlIHRleHRcbiAgICBpbnB1dFF1ZXJ5U3RyaW5nLmFkZEV2ZW50TGlzdGVuZXIoJ2NoYW5nZScsIHF1ZXJ5U3RyaW5nQ2hhbmdlZCk7IC8vIHdoZW4gdXNlcnMgbGVhdmUgdGhlIGlucHV0IGZpZWxkIGFuZCBjb250ZW50IGhhcyBjaGFuZ2VkXG4gICAgaW5wdXRRdWVyeVN0cmluZy5hZGRFdmVudExpc3RlbmVyKCdrZXl1cCcsICgpID0+IHtcbiAgICAgICAgY2xlYXJUaW1lb3V0KHR5cGluZ1RpbWVyUXVlcnlTdHJpbmcpO1xuICAgICAgICB0eXBpbmdUaW1lclF1ZXJ5U3RyaW5nID0gc2V0VGltZW91dChxdWVyeVN0cmluZ0NoYW5nZWQsIHR5cGluZ0ludGVydmFsKTtcbiAgICB9KTtcbiAgICBpbnB1dFF1ZXJ5U3RyaW5nLmFkZEV2ZW50TGlzdGVuZXIoJ2tleWRvd24nLCAoZSkgPT4ge1xuICAgICAgICB0eXBpbmdFdmVudFF1ZXJ5U3RyaW5nID0gZTtcbiAgICAgICAgY2xlYXJUaW1lb3V0KHR5cGluZ1RpbWVyUXVlcnlTdHJpbmcpO1xuICAgIH0pO1xuXG4gICAgLy8gRXZlbnQgaGFuZGxlcnMgZm9yIHJlZ2V4IHN0cmluZyBjaGFuZ2VzXG4gICAgaW5wdXRSZWdleC5hZGRFdmVudExpc3RlbmVyKCdwYXN0ZScsIHJlZ2V4Q2hhbmdlZCk7IC8vIHdoZW4gdXNlcnMgcGFzdGUgdGV4dFxuICAgIGlucHV0UmVnZXguYWRkRXZlbnRMaXN0ZW5lcignY2hhbmdlJywgcmVnZXhDaGFuZ2VkKTsgLy8gd2hlbiB1c2VycyBsZWF2ZSB0aGUgaW5wdXQgZmllbGQgYW5kIGNvbnRlbnQgaGFzIGNoYW5nZWRcbiAgICBpbnB1dFJlZ2V4LmFkZEV2ZW50TGlzdGVuZXIoJ2tleXVwJywgKCkgPT4ge1xuICAgICAgICBjbGVhclRpbWVvdXQodHlwaW5nVGltZXJSZWdleCk7XG4gICAgICAgIHR5cGluZ1RpbWVyUmVnZXggPSBzZXRUaW1lb3V0KHJlZ2V4Q2hhbmdlZCwgdHlwaW5nSW50ZXJ2YWwpO1xuICAgIH0pO1xuICAgIGlucHV0UmVnZXguYWRkRXZlbnRMaXN0ZW5lcigna2V5ZG93bicsIChlKSA9PiB7XG4gICAgICAgIHR5cGluZ0V2ZW50UmVnZXggPSBlO1xuICAgICAgICBjbGVhclRpbWVvdXQodHlwaW5nVGltZXJSZWdleCk7XG4gICAgfSk7XG5cbiAgICAvLyBOYXZpZ2F0aW9uIGFuZCBkZWxldGlvbiBidXR0b25zIGV2ZW50IGhhbmRsZXJzXG4gICAgcmVtb3ZlQnV0dG9uLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgcmVtb3ZlRXZlbnRIYW5kbGVyKTtcblxuICAgIC8vIFNldCBhdHRyaWJ1dGVzIGZvciBhbGwgdGhlIGVsZW1lbnRzIGNvbXBvc2luZyBhIHNlYXJjaCBlbmdpbmUgb3IgbGluZSBpdGVtXG4gICAgbGluZUl0ZW0uc2V0QXR0cmlidXRlKCdpZCcsIGlkKTtcblxuICAgIGNoa1Nob3dTZWFyY2hFbmdpbmUuc2V0QXR0cmlidXRlKCd0eXBlJywgJ2NoZWNrYm94Jyk7XG4gICAgY2hrU2hvd1NlYXJjaEVuZ2luZS5zZXRBdHRyaWJ1dGUoJ3RpdGxlJywgdGl0bGVTaG93RW5naW5lKTtcbiAgICBjaGtTaG93U2VhcmNoRW5naW5lLnNldEF0dHJpYnV0ZSgnaWQnLCBpZCArICctY2hrJyk7XG4gICAgY2hrU2hvd1NlYXJjaEVuZ2luZS5jaGVja2VkID0gc2VhcmNoRW5naW5lLnNob3c7XG5cbiAgICBpbnB1dFNlYXJjaEVuZ2luZU5hbWUuc2V0QXR0cmlidXRlKCd0eXBlJywgJ3RleHQnKTtcbiAgICBpbnB1dFNlYXJjaEVuZ2luZU5hbWUuc2V0QXR0cmlidXRlKCdpZCcsIGlkICsgJy1uYW1lJyk7XG4gICAgaW5wdXRTZWFyY2hFbmdpbmVOYW1lLnNldEF0dHJpYnV0ZSgncGxhY2Vob2xkZXInLCBwbGFjZUhvbGRlck5hbWUpO1xuICAgIGlucHV0U2VhcmNoRW5naW5lTmFtZS5zZXRBdHRyaWJ1dGUoJ3ZhbHVlJywgc2VhcmNoRW5naW5lTmFtZSk7XG5cbiAgICBpbnB1dEtleXdvcmQuc2V0QXR0cmlidXRlKCd0eXBlJywgJ3RleHQnKTtcbiAgICBpbnB1dEtleXdvcmQuc2V0QXR0cmlidXRlKCdpZCcsIGlkICsgJy1rdycpO1xuICAgIGlucHV0S2V5d29yZC5zZXRBdHRyaWJ1dGUoJ2NsYXNzJywgJ2tleXdvcmQnKTtcbiAgICBpbnB1dEtleXdvcmQuc2V0QXR0cmlidXRlKCdwbGFjZWhvbGRlcicsIHBsYWNlSG9sZGVyS2V5d29yZCk7XG4gICAgaW5wdXRLZXl3b3JkLnNldEF0dHJpYnV0ZSgndmFsdWUnLCBzZWFyY2hFbmdpbmUua2V5d29yZCk7XG5cbiAgICBpbnB1dEtleWJvYXJkU2hvcnRjdXQuc2V0QXR0cmlidXRlKCd0eXBlJywgJ3RleHQnKTtcbiAgICBpbnB1dEtleWJvYXJkU2hvcnRjdXQuc2V0QXR0cmlidXRlKCdpZCcsIGlkICsgJy1rYnNjJyk7XG4gICAgaW5wdXRLZXlib2FyZFNob3J0Y3V0LnNldEF0dHJpYnV0ZSgnY2xhc3MnLCAna2Itc2hvcnRjdXQnKTtcbiAgICBpbnB1dEtleWJvYXJkU2hvcnRjdXQuc2V0QXR0cmlidXRlKCdwbGFjZWhvbGRlcicsIHBsYWNlSG9sZGVyS2V5Ym9hcmRTaG9ydGN1dCk7XG4gICAgaW5wdXRLZXlib2FyZFNob3J0Y3V0LnNldEF0dHJpYnV0ZSgndmFsdWUnLCBzZWFyY2hFbmdpbmUua2V5Ym9hcmRTaG9ydGN1dCk7XG5cbiAgICBjaGtNdWx0aVNlYXJjaC5zZXRBdHRyaWJ1dGUoJ3R5cGUnLCAnY2hlY2tib3gnKTtcbiAgICBjaGtNdWx0aVNlYXJjaC5zZXRBdHRyaWJ1dGUoJ2lkJywgaWQgKyAnLW10Jyk7XG4gICAgY2hrTXVsdGlTZWFyY2guc2V0QXR0cmlidXRlKCd0aXRsZScsIG11bHRpcGxlU2VhcmNoRW5naW5lc1NlYXJjaCk7XG4gICAgY2hrTXVsdGlTZWFyY2guY2hlY2tlZCA9IHNlYXJjaEVuZ2luZS5tdWx0aXRhYjtcblxuICAgIGlucHV0UXVlcnlTdHJpbmcuc2V0QXR0cmlidXRlKCd0eXBlJywgJ3VybCcpO1xuICAgIGlucHV0UXVlcnlTdHJpbmcuc2V0QXR0cmlidXRlKCd2YWx1ZScsIHNlYXJjaEVuZ2luZS51cmwpO1xuXG4gICAgaW5wdXRSZWdleC5zZXRBdHRyaWJ1dGUoJ3R5cGUnLCAndGV4dCcpO1xuICAgIGlucHV0UmVnZXguc2V0QXR0cmlidXRlKCdjbGFzcycsICdyZWdleCcpO1xuICAgIGlmICghaXNFbXB0eShzZWFyY2hFbmdpbmUucmVnZXgpKSB7XG4gICAgICAgIGlucHV0UmVnZXguc2V0QXR0cmlidXRlKCd2YWx1ZScsIFwiL1wiICsgc2VhcmNoRW5naW5lLnJlZ2V4LmJvZHkgKyBcIi9cIiArIHNlYXJjaEVuZ2luZS5yZWdleC5mbGFncyk7XG4gICAgfSBlbHNlIHtcbiAgICAgICAgaW5wdXRSZWdleC5zZXRBdHRyaWJ1dGUoJ3ZhbHVlJywgZGVmYXVsdFJlZ2V4LnRvU3RyaW5nKCkpO1xuICAgIH1cblxuICAgIC8vIEF0dGFjaCBhbGwgdGhlIGVsZW1lbnRzIGNvbXBvc2luZyBhIHNlYXJjaCBlbmdpbmUgdG8gdGhlIGxpbmUgaXRlbVxuICAgIGxpbmVJdGVtLmFwcGVuZENoaWxkKGNoa1Nob3dTZWFyY2hFbmdpbmUpO1xuICAgIGxpbmVJdGVtLmFwcGVuZENoaWxkKGlucHV0U2VhcmNoRW5naW5lTmFtZSk7XG4gICAgbGluZUl0ZW0uYXBwZW5kQ2hpbGQoaW5wdXRLZXl3b3JkKTtcbiAgICBsaW5lSXRlbS5hcHBlbmRDaGlsZChpbnB1dEtleWJvYXJkU2hvcnRjdXQpO1xuICAgIGxpbmVJdGVtLmFwcGVuZENoaWxkKGNoa011bHRpU2VhcmNoKTtcbiAgICBsaW5lSXRlbS5hcHBlbmRDaGlsZChpbnB1dFF1ZXJ5U3RyaW5nKTtcbiAgICBsaW5lSXRlbS5hcHBlbmRDaGlsZChpbnB1dFJlZ2V4KTtcbiAgICBsaW5lSXRlbS5hcHBlbmRDaGlsZChzb3J0VGFyZ2V0KTtcbiAgICBsaW5lSXRlbS5hcHBlbmRDaGlsZChyZW1vdmVCdXR0b24pO1xuXG4gICAgcmV0dXJuIGxpbmVJdGVtO1xufVxuXG5mdW5jdGlvbiBjcmVhdGVGb2xkZXJJdGVtKG5hbWUsIGtleXdvcmQpIHtcbiAgICBjb25zdCBlbCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdvbCNzZWFyY2hFbmdpbmVzJyk7XG4gICAgY29uc3QgZm9sZGVySXRlbSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2xpJyk7XG4gICAgY29uc3QgaWNvbiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3NwYW4nKTtcbiAgICBjb25zdCBpbnB1dEZvbGRlck5hbWUgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdpbnB1dCcpO1xuICAgIGNvbnN0IGlucHV0Rm9sZGVyS2V5d29yZCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2lucHV0Jyk7XG4gICAgY29uc3Qgc3ViRm9sZGVyID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG5cbiAgICAvLyBFdmVudCBoYW5kbGVycyBmb3Igc2VhcmNoIGVuZ2luZSBuYW1lIGNoYW5nZXNcbiAgICBpbnB1dEZvbGRlck5hbWUuYWRkRXZlbnRMaXN0ZW5lcignY3V0JywgZm9sZGVyTmFtZUNoYW5nZWQpOyAvLyB3aGVuIHVzZXJzIGN1dCB0ZXh0XG4gICAgaW5wdXRGb2xkZXJOYW1lLmFkZEV2ZW50TGlzdGVuZXIoJ3Bhc3RlJywgZm9sZGVyTmFtZUNoYW5nZWQpOyAvLyB3aGVuIHVzZXJzIHBhc3RlIHRleHRcbiAgICBpbnB1dEZvbGRlck5hbWUuYWRkRXZlbnRMaXN0ZW5lcignaW5wdXQnLCAoZSkgPT4ge1xuICAgICAgICB0eXBpbmdFdmVudEZvbGRlck5hbWUgPSBlO1xuICAgICAgICBjbGVhclRpbWVvdXQodHlwaW5nVGltZXJGb2xkZXJOYW1lKTtcbiAgICAgICAgdHlwaW5nVGltZXJGb2xkZXJOYW1lID0gc2V0VGltZW91dChmb2xkZXJOYW1lQ2hhbmdlZCwgdHlwaW5nSW50ZXJ2YWwpO1xuICAgIH0pO1xuICAgIGlucHV0Rm9sZGVyTmFtZS5hZGRFdmVudExpc3RlbmVyKCdjaGFuZ2UnLCAoZSkgPT4ge1xuICAgICAgICB0eXBpbmdFdmVudEZvbGRlck5hbWUgPSBlO1xuICAgICAgICBjbGVhclRpbWVvdXQodHlwaW5nVGltZXJGb2xkZXJOYW1lKTtcbiAgICAgICAgZm9sZGVyTmFtZUNoYW5nZWQoKTtcbiAgICB9KTtcblxuICAgIC8vIEV2ZW50IGhhbmRsZXJzIGZvciBrZXl3b3JkIHRleHQgY2hhbmdlc1xuICAgIGlucHV0Rm9sZGVyS2V5d29yZC5hZGRFdmVudExpc3RlbmVyKCdwYXN0ZScsIGZvbGRlcktleXdvcmRDaGFuZ2VkKTsgLy8gd2hlbiB1c2VycyBwYXN0ZSB0ZXh0XG4gICAgaW5wdXRGb2xkZXJLZXl3b3JkLmFkZEV2ZW50TGlzdGVuZXIoJ2NoYW5nZScsIGZvbGRlcktleXdvcmRDaGFuZ2VkKTsgLy8gd2hlbiB1c2VycyBsZWF2ZSB0aGUgaW5wdXQgZmllbGQgYW5kIGNvbnRlbnQgaGFzIGNoYW5nZWRcbiAgICBpbnB1dEZvbGRlcktleXdvcmQuYWRkRXZlbnRMaXN0ZW5lcigna2V5dXAnLCAoKSA9PiB7XG4gICAgICAgIGNsZWFyVGltZW91dCh0eXBpbmdUaW1lckZvbGRlcktleXdvcmQpO1xuICAgICAgICB0eXBpbmdUaW1lckZvbGRlcktleXdvcmQgPSBzZXRUaW1lb3V0KGZvbGRlcktleXdvcmRDaGFuZ2VkLCB0eXBpbmdJbnRlcnZhbCk7XG4gICAgfSk7XG4gICAgaW5wdXRGb2xkZXJLZXl3b3JkLmFkZEV2ZW50TGlzdGVuZXIoJ2tleWRvd24nLCAoZSkgPT4ge1xuICAgICAgICB0eXBpbmdFdmVudEZvbGRlcktleXdvcmQgPSBlO1xuICAgICAgICBjbGVhclRpbWVvdXQodHlwaW5nVGltZXJGb2xkZXJLZXl3b3JkKTtcbiAgICB9KTtcblxuICAgIC8vIE5hdmlnYXRpb24gYW5kIGRlbGV0aW9uIGJ1dHRvbnMgZm9yIGVhY2ggc2VhcmNoIGVuZ2luZSBvciBsaW5lIGl0ZW1cbiAgICAvLyBDcmVhdGUgbWVudSB0YXJnZXQgZm9yIGxpbmUgaXRlbSBzb3J0aW5nXG4gICAgY29uc3QgbmF2RGl2ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG4gICAgbmF2RGl2LnNldEF0dHJpYnV0ZSgnY2xhc3MnLCAnbmF2Jyk7XG4gICAgY29uc3Qgc29ydFRhcmdldCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3NwYW4nKTtcbiAgICBzb3J0VGFyZ2V0LmNsYXNzTGlzdC5hZGQoJ3NvcnQnLCAnaWNvbicsICdpb24tYXJyb3ctbW92ZScpO1xuICAgIGNvbnN0IHJlbW92ZUJ1dHRvbiA9IGNyZWF0ZUJ1dHRvbignaW9uLWlvcy10cmFzaCcsICdyZW1vdmUnLCBgJHtyZW1vdmV9ICR7bmFtZX0gJHtmb2xkZXJ9YCk7XG4gICAgbmF2RGl2LmFwcGVuZENoaWxkKHNvcnRUYXJnZXQpO1xuICAgIG5hdkRpdi5hcHBlbmRDaGlsZChyZW1vdmVCdXR0b24pO1xuXG4gICAgZm9sZGVySXRlbS5zZXRBdHRyaWJ1dGUoJ2lkJywgbmFtZSk7XG4gICAgZm9sZGVySXRlbS5zZXRBdHRyaWJ1dGUoJ2NsYXNzJywgJ2ZvbGRlcicpO1xuXG4gICAgaWNvbi5zZXRBdHRyaWJ1dGUoJ2NsYXNzJywgJ2ljb24gaW9uLWZvbGRlcicpO1xuXG4gICAgaW5wdXRGb2xkZXJOYW1lLnNldEF0dHJpYnV0ZSgndHlwZScsICd0ZXh0Jyk7XG4gICAgaW5wdXRGb2xkZXJOYW1lLnNldEF0dHJpYnV0ZSgnZGF0YS1pMThuLXBsYWNlaG9sZGVyJywgJ2ZvbGRlck5hbWUnKTtcbiAgICBpbnB1dEZvbGRlck5hbWUuc2V0QXR0cmlidXRlKCd2YWx1ZScsIG5hbWUpO1xuXG4gICAgaW5wdXRGb2xkZXJLZXl3b3JkLnNldEF0dHJpYnV0ZSgndHlwZScsICd0ZXh0Jyk7XG4gICAgaW5wdXRGb2xkZXJLZXl3b3JkLnNldEF0dHJpYnV0ZSgnY2xhc3MnLCAna2V5d29yZCcpO1xuICAgIGlucHV0Rm9sZGVyS2V5d29yZC5zZXRBdHRyaWJ1dGUoJ2RhdGEtaTE4bi1wbGFjZWhvbGRlcicsICdwbGFjZWhvbGRlcktleXdvcmQnKTtcbiAgICBpbnB1dEZvbGRlcktleXdvcmQuc2V0QXR0cmlidXRlKCd2YWx1ZScsIGtleXdvcmQpO1xuXG4gICAgc3ViRm9sZGVyLnNldEF0dHJpYnV0ZSgnY2xhc3MnLCAnc3ViZm9sZGVyJyk7XG5cbiAgICBmb2xkZXJJdGVtLmFwcGVuZENoaWxkKGljb24pO1xuICAgIGZvbGRlckl0ZW0uYXBwZW5kQ2hpbGQoaW5wdXRGb2xkZXJOYW1lKTtcbiAgICBmb2xkZXJJdGVtLmFwcGVuZENoaWxkKGlucHV0Rm9sZGVyS2V5d29yZCk7XG4gICAgZm9sZGVySXRlbS5hcHBlbmRDaGlsZChuYXZEaXYpO1xuICAgIGZvbGRlckl0ZW0uYXBwZW5kQ2hpbGQoc3ViRm9sZGVyKTtcblxuICAgIC8vIEluaXRpYWxpemUgU29ydGFibGUgc3ViZm9sZGVyXG4gICAgbmV3IFNvcnRhYmxlKGVsLnF1ZXJ5U2VsZWN0b3IoJy5zdWJmb2xkZXInKSwge1xuICAgICAgICBncm91cDogJ25lc3RlZCcsXG4gICAgICAgIGFuaW1hdGlvbjogMjAwLFxuICAgICAgICBmYWxsYmFja09uQm9keTogdHJ1ZSxcbiAgICAgICAgb25FbmQ6IHNhdmVTZWFyY2hFbmdpbmVzXG4gICAgfSk7XG5cbiAgICByZXR1cm4gZm9sZGVySXRlbTtcbn1cblxuZnVuY3Rpb24gY2xlYXJBbGwoKSB7XG4gICAgbGV0IGRpdlNlYXJjaEVuZ2luZXMgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnc2VhcmNoRW5naW5lcycpO1xuICAgIGxldCBsaW5lSXRlbXMgPSBkaXZTZWFyY2hFbmdpbmVzLmNoaWxkTm9kZXM7XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBsaW5lSXRlbXMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgbGV0IGlucHV0ID0gbGluZUl0ZW1zW2ldLmZpcnN0Q2hpbGQ7XG4gICAgICAgIGlmIChpbnB1dCAhPSBudWxsICYmIGlucHV0Lm5vZGVOYW1lID09ICdJTlBVVCcgJiYgaW5wdXQuZ2V0QXR0cmlidXRlKCd0eXBlJykgPT0gJ2NoZWNrYm94Jykge1xuICAgICAgICAgICAgaW5wdXQuY2hlY2tlZCA9IGZhbHNlO1xuICAgICAgICB9XG4gICAgfVxuICAgIHNhdmVTZWFyY2hFbmdpbmVzKCk7XG59XG5cbmZ1bmN0aW9uIHNlbGVjdEFsbCgpIHtcbiAgICBsZXQgZGl2U2VhcmNoRW5naW5lcyA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdzZWFyY2hFbmdpbmVzJyk7XG4gICAgbGV0IGxpbmVJdGVtcyA9IGRpdlNlYXJjaEVuZ2luZXMuY2hpbGROb2RlcztcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IGxpbmVJdGVtcy5sZW5ndGg7IGkrKykge1xuICAgICAgICBsZXQgaW5wdXQgPSBsaW5lSXRlbXNbaV0uZmlyc3RDaGlsZDtcbiAgICAgICAgaWYgKGlucHV0ICE9IG51bGwgJiYgaW5wdXQubm9kZU5hbWUgPT0gJ0lOUFVUJyAmJiBpbnB1dC5nZXRBdHRyaWJ1dGUoJ3R5cGUnKSA9PSAnY2hlY2tib3gnKSB7XG4gICAgICAgICAgICBpbnB1dC5jaGVja2VkID0gdHJ1ZTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBzYXZlU2VhcmNoRW5naW5lcygpO1xufVxuXG5mdW5jdGlvbiBzb3J0U2VhcmNoRW5naW5lc0FscGhhYmV0aWNhbGx5KCkge1xuICAgIGxldCBzZSA9IFtdO1xuICAgIGxldCBjb3VudGVyID0gMDtcbiAgICBmb3IgKGxldCBpZCBpbiBzZWFyY2hFbmdpbmVzKSB7XG4gICAgICAgIHNlLnB1c2goc2VhcmNoRW5naW5lc1tpZF0ubmFtZSk7XG4gICAgfVxuICAgIHNlID0gc29ydEFscGhhYmV0aWNhbGx5KHNlKTtcbiAgICBpZiAobG9nVG9Db25zb2xlKSBjb25zb2xlLmxvZyhzZSk7XG4gICAgZm9yIChsZXQgbmFtZSBvZiBzZSkge1xuICAgICAgICBmb3IgKGxldCBpZCBpbiBzZWFyY2hFbmdpbmVzKSB7XG4gICAgICAgICAgICBpZiAoc2VhcmNoRW5naW5lc1tpZF0ubmFtZSA9PSBuYW1lKSB7XG4gICAgICAgICAgICAgICAgc2VhcmNoRW5naW5lc1tpZF0uaW5kZXggPSBjb3VudGVyO1xuICAgICAgICAgICAgICAgIGNvdW50ZXIrKztcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbiAgICBkaXNwbGF5U2VhcmNoRW5naW5lcygpO1xuICAgIHNhdmVTZWFyY2hFbmdpbmVzKCk7XG59XG5cbmZ1bmN0aW9uIHJlc2V0KCkge1xuICAgIGxldCBzZW5kaW5nID0gc2VuZE1lc3NhZ2UoJ3Jlc2V0JywgbnVsbCk7XG4gICAgc2VuZGluZy50aGVuKGhhbmRsZVJlc3BvbnNlLCBoYW5kbGVFcnJvcik7XG59XG5cbmZ1bmN0aW9uIGhhbmRsZVJlc3BvbnNlKG1lc3NhZ2UpIHtcbiAgICBpZiAobG9nVG9Db25zb2xlKSBjb25zb2xlLmxvZyhgUmVzcG9uc2UgZnJvbSBiYWNrZ3JvdW5kIHNjcmlwdDogJHttZXNzYWdlLnJlc3BvbnNlfWApO1xuICAgIGlmIChtZXNzYWdlLnJlc3BvbnNlID09PSAncmVzZXRDb21wbGV0ZWQnKSB7XG4gICAgICAgIHJlc3RvcmVPcHRpb25zUGFnZSgpO1xuICAgIH1cbn1cblxuZnVuY3Rpb24gaGFuZGxlRXJyb3IoZXJyb3IpIHtcbiAgICBpZiAobG9nVG9Db25zb2xlKSBjb25zb2xlLmVycm9yKGVycm9yKTtcbn1cblxuLy8gQmVnaW4gb2YgdXNlciBldmVudCBoYW5kbGVyc1xuZnVuY3Rpb24gcmVtb3ZlU2VhcmNoRW5naW5lKGUpIHtcbiAgICAvLyBGaW5kIGNsb3Nlc3QgPGxpPiBwYXJlbnRcbiAgICBsZXQgbGluZUl0ZW0gPSBlLnRhcmdldC5jbG9zZXN0KCdsaScpO1xuICAgIGlmICghbGluZUl0ZW0pIHJldHVybjtcbiAgICBsZXQgaWQgPSBsaW5lSXRlbS5nZXRBdHRyaWJ1dGUoJ2lkJyk7XG4gICAgbGV0IHBuID0gbGluZUl0ZW0ucGFyZW50Tm9kZTtcbiAgICBpZiAobG9nVG9Db25zb2xlKSBjb25zb2xlLmxvZyhpZCk7XG5cbiAgICBwbi5yZW1vdmVDaGlsZChsaW5lSXRlbSk7XG4gICAgZGVsZXRlIHNlYXJjaEVuZ2luZXNbaWRdO1xuICAgIGlmIChsb2dUb0NvbnNvbGUpIGNvbnNvbGUubG9nKHNlYXJjaEVuZ2luZXMpO1xuXG4gICAgc2VuZE1lc3NhZ2UoJ3NhdmVTZWFyY2hFbmdpbmVzJywgc2VhcmNoRW5naW5lcyk7XG59XG5cbmZ1bmN0aW9uIHZpc2libGVDaGFuZ2VkKGUpIHtcbiAgICBsZXQgbGluZUl0ZW0gPSBlLnRhcmdldC5wYXJlbnROb2RlO1xuICAgIGxldCBpZCA9IGxpbmVJdGVtLmdldEF0dHJpYnV0ZSgnaWQnKTtcbiAgICBsZXQgdmlzaWJsZSA9IGUudGFyZ2V0LmNoZWNrZWQ7XG5cbiAgICBzZWFyY2hFbmdpbmVzW2lkXVsnc2hvdyddID0gdmlzaWJsZTtcblxuICAgIHNlbmRNZXNzYWdlKCdzYXZlU2VhcmNoRW5naW5lcycsIHNlYXJjaEVuZ2luZXMpO1xufVxuXG5mdW5jdGlvbiBzZWFyY2hFbmdpbmVOYW1lQ2hhbmdlZChlKSB7XG4gICAgaWYgKGUpIHtcbiAgICAgICAgaWYgKGUudGFyZ2V0LnZhbHVlID09IHR5cGluZ0V2ZW50U2VhcmNoRW5naW5lTmFtZS50YXJnZXQudmFsdWUpIHJldHVybjtcbiAgICB9XG4gICAgbGV0IGV2ZW50ID0gZSB8fCB0eXBpbmdFdmVudFNlYXJjaEVuZ2luZU5hbWU7XG4gICAgaWYgKCFldmVudCkgcmV0dXJuO1xuICAgIGxldCBsaW5lSXRlbSA9IGV2ZW50LnRhcmdldC5wYXJlbnROb2RlO1xuICAgIGxldCBpZCA9IGxpbmVJdGVtLmdldEF0dHJpYnV0ZSgnaWQnKTtcbiAgICBsZXQgc2VhcmNoRW5naW5lTmFtZSA9IGV2ZW50LnRhcmdldC52YWx1ZTtcblxuICAgIHNlYXJjaEVuZ2luZXNbaWRdWyduYW1lJ10gPSBzZWFyY2hFbmdpbmVOYW1lO1xuXG4gICAgc2VuZE1lc3NhZ2UoJ3NhdmVTZWFyY2hFbmdpbmVzJywgc2VhcmNoRW5naW5lcyk7XG59XG5cbmZ1bmN0aW9uIGZvbGRlck5hbWVDaGFuZ2VkKGUpIHtcbiAgICBpZiAoZSkge1xuICAgICAgICBpZiAoZS50YXJnZXQudmFsdWUgPT0gdHlwaW5nRXZlbnRGb2xkZXJOYW1lLnRhcmdldC52YWx1ZSkgcmV0dXJuO1xuICAgIH1cbiAgICBsZXQgZXZlbnQgPSBlIHx8IHR5cGluZ0V2ZW50Rm9sZGVyTmFtZTtcbiAgICBpZiAoIWV2ZW50KSByZXR1cm47XG4gICAgbGV0IGxpbmVJdGVtID0gZXZlbnQudGFyZ2V0LnBhcmVudE5vZGU7XG4gICAgbGV0IGlkID0gbGluZUl0ZW0uZ2V0QXR0cmlidXRlKCdpZCcpO1xuICAgIGxldCBzZWFyY2hFbmdpbmVOYW1lID0gZXZlbnQudGFyZ2V0LnZhbHVlO1xuXG4gICAgc2VhcmNoRW5naW5lc1tpZF1bJ25hbWUnXSA9IHNlYXJjaEVuZ2luZU5hbWU7XG5cbiAgICBzZW5kTWVzc2FnZSgnc2F2ZVNlYXJjaEVuZ2luZXMnLCBzZWFyY2hFbmdpbmVzKTtcbn1cblxuZnVuY3Rpb24ga2V5d29yZENoYW5nZWQoZSkge1xuICAgIGlmIChlKSB7XG4gICAgICAgIGlmIChlLnRhcmdldC52YWx1ZSA9PSB0eXBpbmdFdmVudEtleXdvcmQudGFyZ2V0LnZhbHVlKSByZXR1cm47XG4gICAgfVxuICAgIGxldCBldmVudCA9IGUgfHwgdHlwaW5nRXZlbnRLZXl3b3JkO1xuICAgIGlmICghZXZlbnQpIHJldHVybjtcbiAgICBsZXQgbGluZUl0ZW0gPSBldmVudC50YXJnZXQucGFyZW50Tm9kZTtcbiAgICBsZXQgaWQgPSBsaW5lSXRlbS5nZXRBdHRyaWJ1dGUoJ2lkJyk7XG4gICAgbGV0IGtleXdvcmQgPSBldmVudC50YXJnZXQudmFsdWU7XG5cbiAgICBzZWFyY2hFbmdpbmVzW2lkXVsna2V5d29yZCddID0ga2V5d29yZDtcblxuICAgIHNlbmRNZXNzYWdlKCdzYXZlU2VhcmNoRW5naW5lcycsIHNlYXJjaEVuZ2luZXMpO1xufVxuXG5mdW5jdGlvbiBmb2xkZXJLZXl3b3JkQ2hhbmdlZChlKSB7XG4gICAgaWYgKGUpIHtcbiAgICAgICAgaWYgKGUudGFyZ2V0LnZhbHVlID09IHR5cGluZ0V2ZW50Rm9sZGVyS2V5d29yZC50YXJnZXQudmFsdWUpIHJldHVybjtcbiAgICB9XG4gICAgbGV0IGV2ZW50ID0gZSB8fCB0eXBpbmdFdmVudEZvbGRlcktleXdvcmQ7XG4gICAgaWYgKCFldmVudCkgcmV0dXJuO1xuICAgIGxldCBsaW5lSXRlbSA9IGV2ZW50LnRhcmdldC5wYXJlbnROb2RlO1xuICAgIGxldCBpZCA9IGxpbmVJdGVtLmdldEF0dHJpYnV0ZSgnaWQnKTtcbiAgICBsZXQga2V5d29yZCA9IGV2ZW50LnRhcmdldC52YWx1ZTtcblxuICAgIHNlYXJjaEVuZ2luZXNbaWRdWydrZXl3b3JkJ10gPSBrZXl3b3JkO1xuXG4gICAgc2VuZE1lc3NhZ2UoJ3NhdmVTZWFyY2hFbmdpbmVzJywgc2VhcmNoRW5naW5lcyk7XG59XG5cbmZ1bmN0aW9uIGhhbmRsZUtleWJvYXJkU2hvcnRjdXQoZSkge1xuICAgIGlmIChlLnRhcmdldC5ub2RlTmFtZSAhPT0gJ0lOUFVUJykgcmV0dXJuO1xuICAgIGlmICgob3MgPT09ICdtYWNPUycgJiYgZS5tZXRhS2V5KSB8fCAoKG9zID09PSAnV2luZG93cycgfHwgb3MgPT09ICdMaW51eCcpICYmIGUuY3RybEtleSkpIHJldHVybjtcbiAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgaWYgKGxvZ1RvQ29uc29sZSkgY29uc29sZS5sb2cob3MpO1xuICAgIGlmIChsb2dUb0NvbnNvbGUpIGNvbnNvbGUubG9nKGtleXNQcmVzc2VkKTtcbiAgICBsZXQgbGluZUl0ZW0gPSBlLnRhcmdldC5wYXJlbnROb2RlO1xuICAgIGxldCBpZCA9IGxpbmVJdGVtLmdldEF0dHJpYnV0ZSgnaWQnKTtcbiAgICBsZXQgaW5wdXQgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChpZCArICcta2JzYycpO1xuICAgIGxldCBrZXlib2FyZFNob3J0Y3V0ID0gJyc7XG4gICAgaWYgKGxvZ1RvQ29uc29sZSkgY29uc29sZS5sb2coZSk7XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBtb2RpZmllcnMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgY29uc3QgbW9kaWZpZXIgPSBtb2RpZmllcnNbaV07XG4gICAgICAgIGlmIChsb2dUb0NvbnNvbGUpIGNvbnNvbGUubG9nKG1vZGlmaWVyKTtcbiAgICAgICAgaWYgKCEobW9kaWZpZXIgaW4ga2V5c1ByZXNzZWQpKSBjb250aW51ZTtcbiAgICAgICAgc3dpdGNoIChtb2RpZmllcikge1xuICAgICAgICAgICAgY2FzZSAnQ29udHJvbCc6XG4gICAgICAgICAgICAgICAga2V5Ym9hcmRTaG9ydGN1dCA9IGtleWJvYXJkU2hvcnRjdXQgKyAnY3RybCsnO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSAnU2hpZnQnOlxuICAgICAgICAgICAgICAgIGtleWJvYXJkU2hvcnRjdXQgPSBrZXlib2FyZFNob3J0Y3V0ICsgJ3NoaWZ0Kyc7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlICdBbHQnOlxuICAgICAgICAgICAgICAgIGtleWJvYXJkU2hvcnRjdXQgPSBrZXlib2FyZFNob3J0Y3V0ICsgJ2FsdCsnO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSAnTWV0YSc6XG4gICAgICAgICAgICAgICAga2V5Ym9hcmRTaG9ydGN1dCA9IGtleWJvYXJkU2hvcnRjdXQgKyBtZXRhO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgfVxuICAgICAgICBkZWxldGUga2V5c1ByZXNzZWRbbW9kaWZpZXJdO1xuICAgIH1cbiAgICBpZiAobG9nVG9Db25zb2xlKSBjb25zb2xlLmxvZyhga2V5cyBwcmVzc2VkOiAke2tleWJvYXJkU2hvcnRjdXR9YCk7XG4gICAgaWYgKGxvZ1RvQ29uc29sZSkgY29uc29sZS5sb2coYHJlbWFpbmluZyBrZXlzIGRvd246IGApO1xuICAgIGlmIChsb2dUb0NvbnNvbGUpIGNvbnNvbGUubG9nKGtleXNQcmVzc2VkKTtcbiAgICBmb3IgKGxldCBrZXkgaW4ga2V5c1ByZXNzZWQpIHtcbiAgICAgICAgaWYgKGxvZ1RvQ29uc29sZSkgY29uc29sZS5sb2coa2V5KTtcbiAgICAgICAgaWYgKG9zID09PSAnbWFjT1MnICYmIGtleWJvYXJkU2hvcnRjdXQuaW5jbHVkZXMoJ2FsdCcpKSB7XG4gICAgICAgICAgICBrZXlib2FyZFNob3J0Y3V0ICs9IGtleXNQcmVzc2VkW2tleV1bMV0uc3Vic3RyaW5nKDMpLnRvTG93ZXJDYXNlKCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBrZXlib2FyZFNob3J0Y3V0ICs9IGtleS50b0xvd2VyQ2FzZSgpO1xuICAgICAgICB9XG4gICAgfVxuICAgIGlucHV0LnZhbHVlID0ga2V5Ym9hcmRTaG9ydGN1dDtcbiAgICBrZXlzUHJlc3NlZCA9IHt9O1xuICAgIHNlYXJjaEVuZ2luZXNbaWRdWydrZXlib2FyZFNob3J0Y3V0J10gPSBrZXlib2FyZFNob3J0Y3V0O1xuXG4gICAgc2VuZE1lc3NhZ2UoJ3NhdmVTZWFyY2hFbmdpbmVzJywgc2VhcmNoRW5naW5lcyk7XG59XG5cbmZ1bmN0aW9uIG11bHRpVGFiQ2hhbmdlZChlKSB7XG4gICAgaWYgKGxvZ1RvQ29uc29sZSkgY29uc29sZS5sb2coc2VhcmNoRW5naW5lcyk7XG4gICAgaWYgKGxvZ1RvQ29uc29sZSkgY29uc29sZS5sb2coZS50YXJnZXQpO1xuICAgIGxldCBsaW5lSXRlbSA9IGUudGFyZ2V0LnBhcmVudE5vZGU7XG4gICAgbGV0IGlkID0gbGluZUl0ZW0uZ2V0QXR0cmlidXRlKCdpZCcpO1xuICAgIGxldCBtdWx0aVRhYiA9IGUudGFyZ2V0LmNoZWNrZWQ7XG5cbiAgICBzZWFyY2hFbmdpbmVzW2lkXVsnbXVsdGl0YWInXSA9IG11bHRpVGFiO1xuXG4gICAgc2VuZE1lc3NhZ2UoJ3NhdmVTZWFyY2hFbmdpbmVzJywgc2VhcmNoRW5naW5lcyk7XG59XG5cbmZ1bmN0aW9uIHF1ZXJ5U3RyaW5nQ2hhbmdlZChlKSB7XG4gICAgaWYgKGUpIHtcbiAgICAgICAgaWYgKGUudGFyZ2V0LnZhbHVlID09IHR5cGluZ0V2ZW50UXVlcnlTdHJpbmcudGFyZ2V0LnZhbHVlKSByZXR1cm47XG4gICAgfVxuICAgIGxldCBldmVudCA9IGUgfHwgdHlwaW5nRXZlbnRRdWVyeVN0cmluZztcbiAgICBpZiAoIWV2ZW50KSByZXR1cm47XG4gICAgbGV0IGxpbmVJdGVtID0gZXZlbnQudGFyZ2V0LnBhcmVudE5vZGU7XG4gICAgbGV0IGlkID0gbGluZUl0ZW0uZ2V0QXR0cmlidXRlKCdpZCcpO1xuICAgIGxldCBxdWVyeVN0cmluZyA9IGV2ZW50LnRhcmdldC52YWx1ZTtcblxuICAgIHNlYXJjaEVuZ2luZXNbaWRdWyd1cmwnXSA9IHF1ZXJ5U3RyaW5nO1xuXG4gICAgc2VuZE1lc3NhZ2UoJ3NhdmVTZWFyY2hFbmdpbmVzJywgc2VhcmNoRW5naW5lcyk7XG59XG5cbmZ1bmN0aW9uIHJlZ2V4Q2hhbmdlZChlKSB7XG4gICAgaWYgKGUpIHtcbiAgICAgICAgaWYgKGUudGFyZ2V0LnZhbHVlID09IHR5cGluZ0V2ZW50UmVnZXgudGFyZ2V0LnZhbHVlKSByZXR1cm47XG4gICAgfVxuICAgIGNvbnN0IGV2ZW50ID0gZSB8fCB0eXBpbmdFdmVudFJlZ2V4O1xuICAgIGlmICghZXZlbnQpIHJldHVybjtcbiAgICBjb25zdCBsaW5lSXRlbSA9IGV2ZW50LnRhcmdldC5wYXJlbnROb2RlO1xuICAgIGNvbnN0IGlkID0gbGluZUl0ZW0uZ2V0QXR0cmlidXRlKCdpZCcpO1xuICAgIGNvbnN0IHJlZ2V4U3RyaW5nID0gZXZlbnQudGFyZ2V0LnZhbHVlO1xuICAgIGNvbnN0IGxhc3RTbGFzaCA9IHJlZ2V4U3RyaW5nLmxhc3RJbmRleE9mKFwiL1wiKTtcbiAgICBjb25zdCBib2R5ID0gcmVnZXhTdHJpbmcuc2xpY2UoMSwgbGFzdFNsYXNoKTtcbiAgICBjb25zdCBmbGFncyA9IHJlZ2V4U3RyaW5nLnNwbGl0KCcvJykucG9wKCk7XG5cbiAgICBzZWFyY2hFbmdpbmVzW2lkXVsncmVnZXgnXSA9IHt9O1xuICAgIHNlYXJjaEVuZ2luZXNbaWRdWydyZWdleCddWydib2R5J10gPSBib2R5O1xuICAgIHNlYXJjaEVuZ2luZXNbaWRdWydyZWdleCddWydmbGFncyddID0gZmxhZ3M7XG5cbiAgICBzZW5kTWVzc2FnZSgnc2F2ZVNlYXJjaEVuZ2luZXMnLCBzZWFyY2hFbmdpbmVzKTtcbn1cbi8vIEVuZCBvZiB1c2VyIGV2ZW50IGhhbmRsZXJzXG5cbmZ1bmN0aW9uIHJlYWREYXRhKCkge1xuICAgIGxldCBvbGRTZWFyY2hFbmdpbmVzID0ge307XG4gICAgb2xkU2VhcmNoRW5naW5lcyA9IHNlYXJjaEVuZ2luZXM7XG4gICAgc2VhcmNoRW5naW5lcyA9IHt9O1xuXG4gICAgbGV0IGRpdlNlYXJjaEVuZ2luZXMgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnc2VhcmNoRW5naW5lcycpO1xuICAgIGxldCBsaW5lSXRlbXMgPSBkaXZTZWFyY2hFbmdpbmVzLmNoaWxkTm9kZXM7XG4gICAgbnVtYmVyT2ZTZWFyY2hFbmdpbmVzID0gbGluZUl0ZW1zLmxlbmd0aDtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IG51bWJlck9mU2VhcmNoRW5naW5lczsgaSsrKSB7XG4gICAgICAgIGxldCBpbnB1dCA9IGxpbmVJdGVtc1tpXS5maXJzdENoaWxkO1xuICAgICAgICBpZiAoaW5wdXQgIT0gbnVsbCAmJiBpbnB1dC5ub2RlTmFtZSA9PT0gJ0lOUFVUJyAmJiBpbnB1dC5nZXRBdHRyaWJ1dGUoJ3R5cGUnKSA9PT0gJ2NoZWNrYm94Jykge1xuICAgICAgICAgICAgbGV0IGxhYmVsID0gaW5wdXQubmV4dFNpYmxpbmc7XG4gICAgICAgICAgICBsZXQga2V5d29yZCA9IGxhYmVsLm5leHRTaWJsaW5nO1xuICAgICAgICAgICAgbGV0IGtleWJvYXJkU2hvcnRjdXQgPSBrZXl3b3JkLm5leHRTaWJsaW5nO1xuICAgICAgICAgICAgbGV0IG11bHRpVGFiID0ga2V5Ym9hcmRTaG9ydGN1dC5uZXh0U2libGluZztcbiAgICAgICAgICAgIGxldCB1cmwgPSBtdWx0aVRhYi5uZXh0U2libGluZztcbiAgICAgICAgICAgIGxldCBzdHJSZWdleCA9IHVybC5uZXh0U2libGluZztcbiAgICAgICAgICAgIHNlYXJjaEVuZ2luZXNbbGluZUl0ZW1zW2ldLmlkXSA9IHt9O1xuICAgICAgICAgICAgc2VhcmNoRW5naW5lc1tsaW5lSXRlbXNbaV0uaWRdWydpbmRleCddID0gaTtcbiAgICAgICAgICAgIHNlYXJjaEVuZ2luZXNbbGluZUl0ZW1zW2ldLmlkXVsnbmFtZSddID0gbGFiZWwudmFsdWU7XG4gICAgICAgICAgICBzZWFyY2hFbmdpbmVzW2xpbmVJdGVtc1tpXS5pZF1bJ2tleXdvcmQnXSA9IGtleXdvcmQudmFsdWU7XG4gICAgICAgICAgICBzZWFyY2hFbmdpbmVzW2xpbmVJdGVtc1tpXS5pZF1bJ2tleWJvYXJkU2hvcnRjdXQnXSA9IGtleWJvYXJkU2hvcnRjdXQudmFsdWU7XG4gICAgICAgICAgICBzZWFyY2hFbmdpbmVzW2xpbmVJdGVtc1tpXS5pZF1bJ211bHRpdGFiJ10gPSBtdWx0aVRhYi5jaGVja2VkO1xuICAgICAgICAgICAgc2VhcmNoRW5naW5lc1tsaW5lSXRlbXNbaV0uaWRdWyd1cmwnXSA9IHVybC52YWx1ZTtcbiAgICAgICAgICAgIHNlYXJjaEVuZ2luZXNbbGluZUl0ZW1zW2ldLmlkXVsncmVnZXgnXSA9IHt9O1xuICAgICAgICAgICAgc2VhcmNoRW5naW5lc1tsaW5lSXRlbXNbaV0uaWRdWydyZWdleCddWydib2R5J10gPSBzdHJSZWdleC52YWx1ZS5zcGxpdCgnLycpWzFdO1xuICAgICAgICAgICAgc2VhcmNoRW5naW5lc1tsaW5lSXRlbXNbaV0uaWRdWydyZWdleCddWydmbGFncyddID0gc3RyUmVnZXgudmFsdWUuc3BsaXQoJy8nKS5wb3AoKTtcbiAgICAgICAgICAgIHNlYXJjaEVuZ2luZXNbbGluZUl0ZW1zW2ldLmlkXVsnc2hvdyddID0gaW5wdXQuY2hlY2tlZDtcbiAgICAgICAgICAgIHNlYXJjaEVuZ2luZXNbbGluZUl0ZW1zW2ldLmlkXVsnYmFzZTY0J10gPSBvbGRTZWFyY2hFbmdpbmVzW2xpbmVJdGVtc1tpXS5pZF0uYmFzZTY0O1xuICAgICAgICB9XG4gICAgICAgIC8vIEFkZCBmb2xkZXJcbiAgICAgICAgZWxzZSBpZiAobGluZUl0ZW1zW2ldLmNsYXNzTGlzdC5jb250YWlucygnZm9sZGVyJykpIHtcbiAgICAgICAgICAgIGxldCBmb2xkZXIgPSB7XG4gICAgICAgICAgICAgICAgaW5kZXg6IGksXG4gICAgICAgICAgICAgICAgbmFtZTogbGluZUl0ZW1zW2ldLmlkLFxuICAgICAgICAgICAgICAgIGtleXdvcmQ6IGxpbmVJdGVtc1tpXS5xdWVyeVNlbGVjdG9yKCdpbnB1dC5rZXl3b3JkJykudmFsdWUsXG4gICAgICAgICAgICAgICAgZm9sZGVyOiB0cnVlLFxuICAgICAgICAgICAgICAgIHNlYXJjaEVuZ2luZXM6IFtdXG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8vIEFkZCBzZWFyY2ggZW5naW5lcyB0byBmb2xkZXJcbiAgICAgICAgICAgIGxpbmVJdGVtc1tpXS5xdWVyeVNlbGVjdG9yQWxsKCdsaScpLmZvckVhY2goaXRlbSA9PiB7XG4gICAgICAgICAgICAgICAgZm9sZGVyLnNlYXJjaEVuZ2luZXMucHVzaCh7XG4gICAgICAgICAgICAgICAgICAgIGluZGV4OiBpLFxuICAgICAgICAgICAgICAgICAgICBuYW1lOiBpdGVtLmlkLFxuICAgICAgICAgICAgICAgICAgICBrZXl3b3JkOiBpdGVtLnF1ZXJ5U2VsZWN0b3IoJ2lucHV0LmtleXdvcmQnKS52YWx1ZSxcbiAgICAgICAgICAgICAgICAgICAgbXVsdGl0YWI6IGl0ZW0ucXVlcnlTZWxlY3RvcignaW5wdXRbaWQkPVwiLW10XCJdJyksXG4gICAgICAgICAgICAgICAgICAgIHVybDogaXRlbS5xdWVyeVNlbGVjdG9yKCdpbnB1dFt0eXBlPVwidXJsXCJdJykudmFsdWUsXG4gICAgICAgICAgICAgICAgICAgIHNob3c6IGl0ZW0uZmlyc3RDaGlsZC5jaGVja2VkLFxuICAgICAgICAgICAgICAgICAgICAvLyBUT0RPIC0gbm90IHdvcmtpbmc7IGdldCBiYXNlNjRcbiAgICAgICAgICAgICAgICAgICAgLy8gYmFzZTY0OiBvbGRTZWFyY2hFbmdpbmVzW2xpbmVJdGVtc1tpXS5pZF0uYmFzZTY0XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9KVxuXG4gICAgICAgICAgICBzZWFyY2hFbmdpbmVzW2xpbmVJdGVtc1tpXS5pZF0gPSBmb2xkZXJcbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gc2VhcmNoRW5naW5lcztcbn1cblxuLy8gU2F2ZSB0aGUgbGlzdCBvZiBzZWFyY2ggZW5naW5lcyB0byBiZSBkaXNwbGF5ZWQgaW4gdGhlIGNvbnRleHQgbWVudVxuZnVuY3Rpb24gc2F2ZVNlYXJjaEVuZ2luZXMoKSB7XG4gICAgaWYgKGxvZ1RvQ29uc29sZSkgY29uc29sZS5sb2coJ1NlYXJjaCBFbmdpbmVzIEJFRk9SRSBTQVZFOlxcbicsIHNlYXJjaEVuZ2luZXMpO1xuICAgIHNlYXJjaEVuZ2luZXMgPSByZWFkRGF0YSgpO1xuICAgIGlmIChsb2dUb0NvbnNvbGUpIGNvbnNvbGUubG9nKCdTZWFyY2ggRW5naW5lcyBBRlRFUiBTQVZFOlxcbicsIHNlYXJjaEVuZ2luZXMpO1xuICAgIHNlbmRNZXNzYWdlKCdzYXZlU2VhcmNoRW5naW5lcycsIHNlYXJjaEVuZ2luZXMpO1xufVxuXG5mdW5jdGlvbiB0ZXN0U2VhcmNoRW5naW5lKCkge1xuICAgIHNlbmRNZXNzYWdlKCd0ZXN0U2VhcmNoRW5naW5lJywge1xuICAgICAgICB1cmw6IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCd1cmwnKS52YWx1ZVxuICAgIH0pO1xufVxuXG5mdW5jdGlvbiBhZGRTZWFyY2hFbmdpbmUoKSB7XG4gICAgY29uc3QgaWQgPSBzZW5hbWUudmFsdWUucmVwbGFjZSgnICcsICctJykudG9Mb3dlckNhc2UoKTtcbiAgICBjb25zdCBkaXZTZWFyY2hFbmdpbmVzID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ3NlYXJjaEVuZ2luZXMnKTtcbiAgICBjb25zdCBib2R5ID0gcmVnZXgudmFsdWUuc3BsaXQoJy8nKVsxXTtcbiAgICBjb25zdCBmbGFncyA9IHJlZ2V4LnZhbHVlLnNwbGl0KCcvJykucG9wKCk7XG4gICAgbGV0IHN0clVybCA9IHVybC52YWx1ZTtcbiAgICBsZXQgdGVzdFVybCA9ICcnO1xuXG4gICAgLy8gTWFrZSBjZXJ0YWluIHRoYXQgcXVlcnkgc3RyaW5nIHVybCBzdGFydHMgd2l0aCBcImh0dHBzXCIgdG8gZW5mb3JjZSBTU0xcbiAgICBpZiAoIXN0clVybC5zdGFydHNXaXRoKCdodHRwczovLycpKSB7XG4gICAgICAgIGlmIChzdHJVcmwuc3RhcnRzV2l0aCgnaHR0cDovLycpKSB7XG4gICAgICAgICAgICBzdHJVcmwucmVwbGFjZSgnaHR0cDovLycsICdodHRwczovLycpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgc3RyVXJsICs9ICdodHRwczovLycgKyBzdHJVcmw7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICAvLyBDcmVhdGUgdGVzdCB1cmxcbiAgICBpZiAoc3RyVXJsLmluY2x1ZGVzKCd7c2VhcmNoVGVybXN9JykpIHtcbiAgICAgICAgdGVzdFVybCA9IHN0clVybC5yZXBsYWNlKCd7c2VhcmNoVGVybXN9JywgJ3Rlc3QnKTtcbiAgICB9IGVsc2UgaWYgKHN0clVybC5pbmNsdWRlcygnJXMnKSkge1xuICAgICAgICB0ZXN0VXJsID0gc3RyVXJsLnJlcGxhY2UoJyVzJywgJ3Rlc3QnKTtcbiAgICB9IGVsc2Uge1xuICAgICAgICB0ZXN0VXJsID0gc3RyVXJsICsgJ3Rlc3QnO1xuICAgIH1cblxuICAgIC8vIFZhbGlkYXRlIHF1ZXJ5IHN0cmluZyB1cmxcbiAgICBpZiAodXJsLnZhbGlkaXR5LnR5cGVNaXNtYXRjaCB8fCAhaXNWYWxpZFVybCh0ZXN0VXJsKSkge1xuICAgICAgICBub3RpZnkobm90aWZ5U2VhcmNoRW5naW5lVXJsUmVxdWlyZWQpO1xuICAgICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgc2VhcmNoRW5naW5lc1tpZF0gPSB7XG4gICAgICAgIGluZGV4OiBudW1iZXJPZlNlYXJjaEVuZ2luZXMsXG4gICAgICAgIG5hbWU6IHNlbmFtZS52YWx1ZSxcbiAgICAgICAga2V5d29yZDoga2V5d29yZC52YWx1ZSxcbiAgICAgICAga2V5Ym9hcmRTaG9ydGN1dDoga2JzYy52YWx1ZSxcbiAgICAgICAgbXVsdGl0YWI6IG11bHRpdGFiLmNoZWNrZWQsXG4gICAgICAgIHVybDogdXJsLnZhbHVlLFxuICAgICAgICBzaG93OiBzaG93LmNoZWNrZWQsXG4gICAgICAgIHBhcmVudEZvbGRlcjogbnVsbFxuICAgIH07XG5cbiAgICBzZWFyY2hFbmdpbmVzW2lkXVsncmVnZXgnXSA9IHt9O1xuICAgIHNlYXJjaEVuZ2luZXNbaWRdWydyZWdleCddWydib2R5J10gPSBib2R5O1xuICAgIHNlYXJjaEVuZ2luZXNbaWRdWydyZWdleCddWydmbGFncyddID0gZmxhZ3M7XG5cbiAgICBpZiAobG9nVG9Db25zb2xlKSBjb25zb2xlLmxvZygnTmV3IHNlYXJjaCBlbmdpbmU6ICcgKyBpZCArICdcXG4nICsgSlNPTi5zdHJpbmdpZnkoc2VhcmNoRW5naW5lc1tpZF0pKTtcblxuICAgIGNvbnN0IGxpbmVJdGVtID0gY3JlYXRlTGluZUl0ZW0oaWQsIHNlYXJjaEVuZ2luZXNbaWRdLCBmYWxzZSk7XG4gICAgZGl2U2VhcmNoRW5naW5lcy5hcHBlbmRDaGlsZChsaW5lSXRlbSk7XG5cbiAgICBzZW5kTWVzc2FnZSgnYWRkTmV3U2VhcmNoRW5naW5lJywge1xuICAgICAgICBpZDogaWQsXG4gICAgICAgIHNlYXJjaEVuZ2luZTogc2VhcmNoRW5naW5lc1tpZF1cbiAgICB9KTtcblxuICAgIC8vIENsZWFyIEhUTUwgaW5wdXQgZmllbGRzIHRvIGFkZCBhIG5ldyBzZWFyY2ggZW5naW5lXG4gICAgY2xlYXJBZGRTZWFyY2hFbmdpbmUoKTtcbn1cblxuZnVuY3Rpb24gYWRkRm9sZGVyKCkge1xuICAgIGNvbnN0IGRpdlNlYXJjaEVuZ2luZXMgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnc2VhcmNoRW5naW5lcycpO1xuICAgIGNvbnN0IG5hbWUgPSBmb2xkZXJOYW1lLnZhbHVlO1xuICAgIGNvbnN0IGtleXdvcmQgPSBmb2xkZXJLZXl3b3JkLnZhbHVlO1xuICAgIGNvbnN0IGlkID0gbmFtZS5yZXBsYWNlKCcgJywgJy0nKS50b0xvd2VyQ2FzZSgpO1xuXG4gICAgLy8gQXBwZW5kIGZvbGRlciB0byBzZWFyY2ggZW5naW5lIGxpc3RcbiAgICBjb25zdCBmb2xkZXJJdGVtID0gY3JlYXRlRm9sZGVySXRlbShuYW1lLCBrZXl3b3JkKTtcbiAgICBkaXZTZWFyY2hFbmdpbmVzLmFwcGVuZENoaWxkKGZvbGRlckl0ZW0pO1xuXG4gICAgLy8gVGhlIG5ldyBmb2xkZXIgd2lsbCBiZSBzYXZlZCBhcyBhIHNlYXJjaCBlbmdpbmUgZW50cnlcbiAgICAvLyBGb2xkZXJzIGRvbid0IHBvc3Nlc3MgYWxsIHRoZSBwcm9wZXJ0aWVzIHRoYXQgc2VhcmNoIGVuZ2luZXMgZG9cbiAgICAvLyBBIGZvbGRlciBkb2Vzbid0IGhhdmUgYSBxdWVyeSBzdHJpbmcgdXJsIHByb3BlcnR5XG4gICAgLy8gQSBmb2xkZXIgbWF5IGhhdmUgY2hpbGRyZW47IG5vdCBhIHNlYXJjaCBlbmdpbmVcbiAgICBzZWFyY2hFbmdpbmVzW2lkXSA9IHtcbiAgICAgICAgaW5kZXg6IG51bWJlck9mU2VhcmNoRW5naW5lcyxcbiAgICAgICAgbmFtZTogbmFtZSxcbiAgICAgICAga2V5d29yZDoga2V5d29yZCxcbiAgICAgICAgcGFyZW50Rm9sZGVyOiBudWxsLCAvLyBQb2ludHMgdG8gdGhlIGlkIG9mIHRoZSBwYXJlbnQgZm9sZGVyOyB0YWtlcyB0aGUgdmFsdWUgbnVsbCBpZiB0aGVyZSBpcyBub25lXG4gICAgICAgIGNoaWxkcmVuOiBbXSAvLyBBcnJheSBvZiBzZWFyY2ggZW5naW5lIGFuZC9vciBzdWJmb2xkZXIgaWRzXG4gICAgfTtcblxuICAgIC8vIENsZWFyIEhUTUwgaW5wdXQgZmllbGRzIHRvIGFkZCBhIG5ldyBmb2xkZXJcbiAgICBjbGVhckFkZEZvbGRlcigpO1xuXG4gICAgc2VuZE1lc3NhZ2UoJ2FkZE5ld1NlYXJjaEVuZ2luZScsIHtcbiAgICAgICAgaWQ6IGlkLFxuICAgICAgICBzZWFyY2hFbmdpbmU6IHNlYXJjaEVuZ2luZXNbaWRdXG4gICAgfSk7XG59XG5cbmZ1bmN0aW9uIGNsZWFyQWRkU2VhcmNoRW5naW5lKCkge1xuICAgIC8vIENsZWFyIGNoZWNrIGJveGVzIGFuZCB0ZXh0IGJveCBlbnRyaWVzIG9mIHRoZSBsaW5lIHVzZWQgdG8gYWRkIGEgbmV3IHNlYXJjaCBlbmdpbmVcbiAgICBzaG93LmNoZWNrZWQgPSB0cnVlO1xuICAgIHNlbmFtZS52YWx1ZSA9IG51bGw7XG4gICAga2V5d29yZC52YWx1ZSA9IG51bGw7XG4gICAga2JzYy52YWx1ZSA9IG51bGw7XG4gICAgbXVsdGl0YWIuY2hlY2tlZCA9IGZhbHNlO1xuICAgIHVybC52YWx1ZSA9IG51bGw7XG4gICAgcmVnZXgudmFsdWUgPSBudWxsO1xufVxuXG5mdW5jdGlvbiBjbGVhckFkZEZvbGRlcigpIHtcbiAgICAvLyBDbGVhciB0ZXh0IGJveCBlbnRyaWVzIG9mIHRoZSBsaW5lIHVzZWQgdG8gYWRkIGEgbmV3IGZvbGRlclxuICAgIGZvbGRlck5hbWUudmFsdWUgPSBudWxsO1xuICAgIGZvbGRlcktleXdvcmQudmFsdWUgPSBudWxsO1xufVxuXG5mdW5jdGlvbiBzZXRPcHRpb25zKG9wdGlvbnMpIHtcbiAgICBpZiAoaXNFbXB0eShvcHRpb25zKSkgcmV0dXJuO1xuICAgIGlmIChsb2dUb0NvbnNvbGUpIHtcbiAgICAgICAgY29uc29sZS5sb2coJ1ByZWZlcmVuY2VzIHJldHJpZXZlZCBmcm9tIHN5bmMgc3RvcmFnZTpcXG4nKTtcbiAgICAgICAgY29uc29sZS5sb2cob3B0aW9ucyk7XG4gICAgfVxuXG4gICAgaWYgKG9wdGlvbnMuZXhhY3RNYXRjaCA9PT0gdHJ1ZSkge1xuICAgICAgICBleGFjdE1hdGNoLmNoZWNrZWQgPSB0cnVlO1xuICAgIH0gZWxzZSB7XG4gICAgICAgIGV4YWN0TWF0Y2guY2hlY2tlZCA9IGZhbHNlO1xuICAgIH1cblxuICAgIHN3aXRjaCAob3B0aW9ucy50YWJNb2RlKSB7XG4gICAgICAgIGNhc2UgJ29wZW5OZXdUYWInOlxuICAgICAgICAgICAgb3Blbk5ld1RhYi5jaGVja2VkID0gdHJ1ZTtcbiAgICAgICAgICAgIGFjdGl2ZS5zdHlsZS52aXNpYmlsaXR5ID0gJ3Zpc2libGUnO1xuICAgICAgICAgICAgcG9zaXRpb24uc3R5bGUudmlzaWJpbGl0eSA9ICd2aXNpYmxlJztcbiAgICAgICAgICAgIHByaXZhY3kuc3R5bGUudmlzaWJpbGl0eSA9ICdoaWRkZW4nO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgJ3NhbWVUYWInOlxuICAgICAgICAgICAgc2FtZVRhYi5jaGVja2VkID0gdHJ1ZTtcbiAgICAgICAgICAgIGFjdGl2ZS5zdHlsZS52aXNpYmlsaXR5ID0gJ2hpZGRlbic7XG4gICAgICAgICAgICBwb3NpdGlvbi5zdHlsZS52aXNpYmlsaXR5ID0gJ2hpZGRlbic7XG4gICAgICAgICAgICBwcml2YWN5LnN0eWxlLnZpc2liaWxpdHkgPSAnaGlkZGVuJztcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlICdvcGVuTmV3V2luZG93JzpcbiAgICAgICAgICAgIG9wZW5OZXdXaW5kb3cuY2hlY2tlZCA9IHRydWU7XG4gICAgICAgICAgICBhY3RpdmUuc3R5bGUudmlzaWJpbGl0eSA9ICd2aXNpYmxlJztcbiAgICAgICAgICAgIHBvc2l0aW9uLnN0eWxlLnZpc2liaWxpdHkgPSAnaGlkZGVuJztcbiAgICAgICAgICAgIHByaXZhY3kuc3R5bGUudmlzaWJpbGl0eSA9ICd2aXNpYmxlJztcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlICdvcGVuU2lkZWJhcic6XG4gICAgICAgICAgICBvcGVuU2lkZWJhci5jaGVja2VkID0gdHJ1ZTtcbiAgICAgICAgICAgIGFjdGl2ZS5zdHlsZS52aXNpYmlsaXR5ID0gJ2hpZGRlbic7XG4gICAgICAgICAgICBwb3NpdGlvbi5zdHlsZS52aXNpYmlsaXR5ID0gJ2hpZGRlbic7XG4gICAgICAgICAgICBwcml2YWN5LnN0eWxlLnZpc2liaWxpdHkgPSAnaGlkZGVuJztcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgb3Blbk5ld1RhYi5jaGVja2VkID0gdHJ1ZTtcbiAgICAgICAgICAgIGFjdGl2ZS5zdHlsZS52aXNpYmlsaXR5ID0gJ3Zpc2libGUnO1xuICAgICAgICAgICAgcG9zaXRpb24uc3R5bGUudmlzaWJpbGl0eSA9ICd2aXNpYmxlJztcbiAgICAgICAgICAgIHByaXZhY3kuc3R5bGUudmlzaWJpbGl0eSA9ICdoaWRkZW4nO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgfVxuXG4gICAgaWYgKG9wdGlvbnMudGFiQWN0aXZlID09PSB0cnVlKSB7XG4gICAgICAgIHRhYkFjdGl2ZS5jaGVja2VkID0gdHJ1ZTtcbiAgICB9IGVsc2Uge1xuICAgICAgICAvLyBEZWZhdWx0IHZhbHVlIGZvciB0YWJBY3RpdmUgaXMgZmFsc2VcbiAgICAgICAgdGFiQWN0aXZlLmNoZWNrZWQgPSBmYWxzZTtcbiAgICB9XG5cbiAgICBpZiAob3B0aW9ucy5sYXN0VGFiID09PSB0cnVlKSB7XG4gICAgICAgIGxhc3RUYWIuY2hlY2tlZCA9IHRydWU7XG4gICAgfSBlbHNlIHtcbiAgICAgICAgLy8gRGVmYXVsdCB2YWx1ZSBmb3IgbGFzdFRhYiBpcyBmYWxzZVxuICAgICAgICBsYXN0VGFiLmNoZWNrZWQgPSBmYWxzZTtcbiAgICB9XG5cbiAgICBpZiAob3B0aW9ucy5wcml2YXRlTW9kZSA9PT0gdHJ1ZSkge1xuICAgICAgICBwcml2YXRlTW9kZS5jaGVja2VkID0gdHJ1ZTtcbiAgICB9IGVsc2Uge1xuICAgICAgICAvLyBEZWZhdWx0IHZhbHVlIGZvciBwcml2YXRlTW9kZSBpcyBmYWxzZVxuICAgICAgICBwcml2YXRlTW9kZS5jaGVja2VkID0gZmFsc2U7XG4gICAgfVxuXG4gICAgaWYgKFxuICAgICAgICBvcHRpb25zLm9wdGlvbnNNZW51TG9jYXRpb24gPT09ICd0b3AnIHx8XG4gICAgICAgIG9wdGlvbnMub3B0aW9uc01lbnVMb2NhdGlvbiA9PT0gJ2JvdHRvbScgfHxcbiAgICAgICAgb3B0aW9ucy5vcHRpb25zTWVudUxvY2F0aW9uID09PSAnbm9uZSdcbiAgICApIHtcbiAgICAgICAgb3B0aW9uc01lbnVMb2NhdGlvbi52YWx1ZSA9IG9wdGlvbnMub3B0aW9uc01lbnVMb2NhdGlvbjtcbiAgICB9IGVsc2Uge1xuICAgICAgICAvLyBEZWZhdWx0IHZhbHVlIGZvciBvcHRpb25zTWVudUxvY2F0aW9uIGlzIGJvdHRvbVxuICAgICAgICBvcHRpb25zTWVudUxvY2F0aW9uLnZhbHVlID0gJ2JvdHRvbSc7XG4gICAgfVxuXG4gICAgaWYgKG9wdGlvbnMuZGlzcGxheUZhdmljb25zID09PSBmYWxzZSkge1xuICAgICAgICBkaXNwbGF5RmF2aWNvbnMuY2hlY2tlZCA9IGZhbHNlO1xuICAgIH0gZWxzZSB7XG4gICAgICAgIC8vIERlZmF1bHQgc2V0dGluZyBpcyB0byBmZXRjaCBmYXZpY29ucyBmb3IgY29udGV4dCBtZW51IGxpc3RcbiAgICAgICAgZGlzcGxheUZhdmljb25zLmNoZWNrZWQgPSB0cnVlO1xuICAgIH1cblxuICAgIGlmIChvcHRpb25zLmRpc3BsYXlFeGlmU3VtbWFyeSA9PT0gZmFsc2UpIHtcbiAgICAgICAgZGlzcGxheUV4aWZTdW1tYXJ5LmNoZWNrZWQgPSBmYWxzZTtcbiAgICB9IGVsc2Uge1xuICAgICAgICAvLyBEZWZhdWx0IHNldHRpbmcgaXMgdG8gZGlzcGxheSBhIHN1bW1hcnkgb2YgRXhpZiB0YWdzXG4gICAgICAgIGRpc3BsYXlFeGlmU3VtbWFyeS5jaGVja2VkID0gdHJ1ZTtcbiAgICB9XG5cbiAgICBkaXNhYmxlQWx0Q2xpY2suY2hlY2tlZCA9IG9wdGlvbnMuZGlzYWJsZUFsdENsaWNrIHx8IGZhbHNlO1xuXG4gICAgaWYgKG9wdGlvbnMucmVzZXRQcmVmZXJlbmNlcyA9PT0gZmFsc2UpIHtcbiAgICAgICAgcmVzZXRQcmVmZXJlbmNlcy5jaGVja2VkID0gZmFsc2U7XG4gICAgfSBlbHNlIHtcbiAgICAgICAgLy8gRGVmYXVsdCBzZXR0aW5nIGlzIHRvIGNhY2hlIGZhdmljb25zIGluIHN0b3JhZ2Ugc3luY1xuICAgICAgICByZXNldFByZWZlcmVuY2VzLmNoZWNrZWQgPSB0cnVlO1xuICAgIH1cblxuICAgIGlmIChvcHRpb25zLmZvcmNlU2VhcmNoRW5naW5lc1JlbG9hZCA9PT0gZmFsc2UpIHtcbiAgICAgICAgZm9yY2VTZWFyY2hFbmdpbmVzUmVsb2FkLmNoZWNrZWQgPSBmYWxzZTtcbiAgICB9IGVsc2Uge1xuICAgICAgICAvLyBEZWZhdWx0IHNldHRpbmcgaXMgdG8gY2FjaGUgZmF2aWNvbnMgaW4gc3RvcmFnZSBzeW5jXG4gICAgICAgIGZvcmNlU2VhcmNoRW5naW5lc1JlbG9hZC5jaGVja2VkID0gdHJ1ZTtcbiAgICB9XG5cbiAgICBpZiAob3B0aW9ucy5mb3JjZUZhdmljb25zUmVsb2FkID09PSBmYWxzZSkge1xuICAgICAgICBmb3JjZUZhdmljb25zUmVsb2FkLmNoZWNrZWQgPSBmYWxzZTtcbiAgICB9IGVsc2Uge1xuICAgICAgICAvLyBEZWZhdWx0IHNldHRpbmcgaXMgdG8gY2FjaGUgZmF2aWNvbnMgaW4gc3RvcmFnZSBzeW5jXG4gICAgICAgIGZvcmNlRmF2aWNvbnNSZWxvYWQuY2hlY2tlZCA9IHRydWU7XG4gICAgfVxuXG4gICAgaWYgKG9wdGlvbnMudXNlUmVnZXggPT09IHRydWUpIHtcbiAgICAgICAgdXNlUmVnZXguY2hlY2tlZCA9IHRydWU7XG4gICAgfSBlbHNlIHtcbiAgICAgICAgdXNlUmVnZXguY2hlY2tlZCA9IGZhbHNlO1xuICAgIH1cblxuICAgIHN3aXRjaCAob3B0aW9ucy5tdWx0aU1vZGUpIHtcbiAgICAgICAgY2FzZSAnbXVsdGlOZXdXaW5kb3cnOlxuICAgICAgICAgICAgbXVsdGlOZXdXaW5kb3cuY2hlY2tlZCA9IHRydWU7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSAnbXVsdGlBY3RpdmVUYWInOlxuICAgICAgICAgICAgbXVsdGlBY3RpdmVUYWIuY2hlY2tlZCA9IHRydWU7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSAnbXVsdGlBZnRlckxhc3RUYWInOlxuICAgICAgICAgICAgbXVsdGlBZnRlckxhc3RUYWIuY2hlY2tlZCA9IHRydWU7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgIGJyZWFrO1xuICAgIH1cblxuICAgIHNlYXJjaEVuZ2luZVNpdGVTZWFyY2gudmFsdWUgPSBvcHRpb25zLnNpdGVTZWFyY2ggfHwgXCJHb29nbGVcIjtcbn1cblxuLy8gUmVzdG9yZSB0aGUgbGlzdCBvZiBzZWFyY2ggZW5naW5lcyBhbmQgdGhlIG9wdGlvbnMgdG8gYmUgZGlzcGxheWVkIGluIHRoZSBvcHRpb25zIHBhZ2VcbmFzeW5jIGZ1bmN0aW9uIHJlc3RvcmVPcHRpb25zUGFnZSgpIHtcbiAgICB0cnkge1xuICAgICAgICBjb25zdCBkYXRhID0gYXdhaXQgYnJvd3Nlci5zdG9yYWdlLnN5bmMuZ2V0KG51bGwpO1xuICAgICAgICBjb25zdCBvcHRpb25zID0gZGF0YS5vcHRpb25zO1xuICAgICAgICBzZWFyY2hFbmdpbmVzID0gYXdhaXQgYnJvd3Nlci5zdG9yYWdlLmxvY2FsLmdldChudWxsKTtcbiAgICAgICAgaWYgKGxvZ1RvQ29uc29sZSkge1xuICAgICAgICAgICAgY29uc29sZS5sb2coJ1NlYXJjaCBlbmdpbmVzIHJldHJpZXZlZCBmcm9tIGxvY2FsIHN0b3JhZ2U6XFxuJyk7XG4gICAgICAgICAgICBjb25zb2xlLmxvZyhzZWFyY2hFbmdpbmVzKTtcbiAgICAgICAgfVxuICAgICAgICBkaXNwbGF5U2VhcmNoRW5naW5lcygpO1xuICAgICAgICBpZiAoIWlzRW1wdHkob3B0aW9ucykpIHNldE9wdGlvbnMob3B0aW9ucyk7XG4gICAgICAgIGlmIChsb2dUb0NvbnNvbGUpIHtcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKG9wdGlvbnMpO1xuICAgICAgICAgICAgY29uc29sZS5sb2coJ09wdGlvbnMgaGF2ZSBiZWVuIHJlc2V0LicpO1xuICAgICAgICB9XG4gICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICAgIGlmIChsb2dUb0NvbnNvbGUpIGNvbnNvbGUuZXJyb3IoZXJyKTtcbiAgICB9XG59XG5cbmZ1bmN0aW9uIHNhdmVUb0xvY2FsRGlzaygpIHtcbiAgICBzYXZlU2VhcmNoRW5naW5lcygpO1xuICAgIGxldCBmaWxlVG9Eb3dubG9hZCA9IG5ldyBCbG9iKFtKU09OLnN0cmluZ2lmeShzZWFyY2hFbmdpbmVzLCBudWxsLCAyKV0sIHtcbiAgICAgICAgdHlwZTogJ3RleHQvanNvbicsXG4gICAgICAgIG5hbWU6ICdzZWFyY2hFbmdpbmVzLmpzb24nXG4gICAgfSk7XG5cbiAgICBzZW5kTWVzc2FnZSgnc2F2ZVNlYXJjaEVuZ2luZXNUb0Rpc2snLCB3aW5kb3cuVVJMLmNyZWF0ZU9iamVjdFVSTChmaWxlVG9Eb3dubG9hZCkpO1xufVxuXG5mdW5jdGlvbiBoYW5kbGVGaWxlVXBsb2FkKCkge1xuICAgIGJyb3dzZXIuc3RvcmFnZS5sb2NhbC5jbGVhcigpLnRoZW4oKCkgPT4ge1xuICAgICAgICBsZXQgdXBsb2FkID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ3VwbG9hZCcpO1xuICAgICAgICBsZXQganNvbkZpbGUgPSB1cGxvYWQuZmlsZXNbMF07XG4gICAgICAgIGxldCByZWFkZXIgPSBuZXcgRmlsZVJlYWRlcigpO1xuICAgICAgICByZWFkZXIub25sb2FkID0gZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgICAgICAgICBzZWFyY2hFbmdpbmVzID0gSlNPTi5wYXJzZShldmVudC50YXJnZXQucmVzdWx0KTtcbiAgICAgICAgICAgIGRpc3BsYXlTZWFyY2hFbmdpbmVzKCk7XG4gICAgICAgICAgICBzYXZlU2VhcmNoRW5naW5lcygpO1xuICAgICAgICB9O1xuICAgICAgICByZWFkZXIucmVhZEFzVGV4dChqc29uRmlsZSk7XG4gICAgfSwgb25FcnJvcik7XG59XG5cbmZ1bmN0aW9uIHVwZGF0ZVNlYXJjaE9wdGlvbnMoKSB7XG4gICAgbGV0IGVtID0gZXhhY3RNYXRjaC5jaGVja2VkO1xuICAgIHNlbmRNZXNzYWdlKCd1cGRhdGVTZWFyY2hPcHRpb25zJywgeyBleGFjdE1hdGNoOiBlbSB9KTtcbn1cblxuZnVuY3Rpb24gdXBkYXRlVGFiTW9kZSgpIHtcbiAgICBpZiAoc2FtZVRhYi5jaGVja2VkIHx8IG9wZW5TaWRlYmFyLmNoZWNrZWQpIHtcbiAgICAgICAgYWN0aXZlLnN0eWxlLnZpc2liaWxpdHkgPSAnaGlkZGVuJztcbiAgICAgICAgcG9zaXRpb24uc3R5bGUudmlzaWJpbGl0eSA9ICdoaWRkZW4nO1xuICAgICAgICBwcml2YWN5LnN0eWxlLnZpc2liaWxpdHkgPSAnaGlkZGVuJztcbiAgICB9IGVsc2Uge1xuICAgICAgICBhY3RpdmUuc3R5bGUudmlzaWJpbGl0eSA9ICd2aXNpYmxlJztcbiAgICAgICAgaWYgKG9wZW5OZXdXaW5kb3cuY2hlY2tlZCkge1xuICAgICAgICAgICAgcG9zaXRpb24uc3R5bGUudmlzaWJpbGl0eSA9ICdoaWRkZW4nO1xuICAgICAgICAgICAgcHJpdmFjeS5zdHlsZS52aXNpYmlsaXR5ID0gJ3Zpc2libGUnO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcG9zaXRpb24uc3R5bGUudmlzaWJpbGl0eSA9ICd2aXNpYmxlJztcbiAgICAgICAgICAgIHByaXZhY3kuc3R5bGUudmlzaWJpbGl0eSA9ICdoaWRkZW4nO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgbGV0IGRhdGEgPSB7fTtcbiAgICBkYXRhWyd0YWJNb2RlJ10gPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCdpbnB1dFtuYW1lPVwicmVzdWx0c1wiXTpjaGVja2VkJykudmFsdWU7XG4gICAgZGF0YVsndGFiQWN0aXZlJ10gPSB0YWJBY3RpdmUuY2hlY2tlZDtcbiAgICBkYXRhWydsYXN0VGFiJ10gPSBsYXN0VGFiLmNoZWNrZWQ7XG4gICAgZGF0YVsncHJpdmF0ZU1vZGUnXSA9IHByaXZhdGVNb2RlLmNoZWNrZWQ7XG4gICAgc2VuZE1lc3NhZ2UoJ3VwZGF0ZVRhYk1vZGUnLCBkYXRhKTtcbn1cblxuZnVuY3Rpb24gdXBkYXRlTXVsdGlNb2RlKCkge1xuICAgIGxldCBkYXRhID0ge307XG4gICAgZGF0YVsnbXVsdGlNb2RlJ10gPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCdpbnB1dFtuYW1lPVwibXNfcmVzdWx0c1wiXTpjaGVja2VkJykudmFsdWU7XG4gICAgc2VuZE1lc3NhZ2UoJ3VwZGF0ZU11bHRpTW9kZScsIGRhdGEpO1xufVxuXG4vLyBDaGVjayBpZiB0aGUgZmF2aWNvbnMgc2hvdWxkIGJlIGRpc3BsYXllZCBpbiB0aGUgY29udGV4dCBtZW51XG5mdW5jdGlvbiB1cGRhdGVEaXNwbGF5RmF2aWNvbnMoKSB7XG4gICAgbGV0IGZhdiA9IGRpc3BsYXlGYXZpY29ucy5jaGVja2VkO1xuICAgIHNlbmRNZXNzYWdlKCd1cGRhdGVEaXNwbGF5RmF2aWNvbnMnLCB7IGRpc3BsYXlGYXZpY29uczogZmF2IH0pO1xufVxuXG5mdW5jdGlvbiB1cGRhdGVEaXNwbGF5RXhpZlN1bW1hcnkoKSB7XG4gICAgc2VuZE1lc3NhZ2UoJ3VwZGF0ZURpc3BsYXlFeGlmU3VtbWFyeScsIHsgZGlzcGxheUV4aWZTdW1tYXJ5OiBkaXNwbGF5RXhpZlN1bW1hcnkuY2hlY2tlZCB9KTtcbn1cblxuZnVuY3Rpb24gdXBkYXRlRGlzYWJsZUFsdENsaWNrKCkge1xuICAgIHNlbmRNZXNzYWdlKCd1cGRhdGVEaXNhYmxlQWx0Q2xpY2snLCB7IGRpc2FibGVBbHRDbGljazogZGlzYWJsZUFsdENsaWNrLmNoZWNrZWQgfSk7XG59XG5cbmZ1bmN0aW9uIHVwZGF0ZU9wdGlvbnNNZW51TG9jYXRpb24oKSB7XG4gICAgbGV0IG9tYXQgPSBvcHRpb25zTWVudUxvY2F0aW9uLnZhbHVlO1xuICAgIHNlbmRNZXNzYWdlKCd1cGRhdGVPcHRpb25zTWVudUxvY2F0aW9uJywgeyBvcHRpb25zTWVudUxvY2F0aW9uOiBvbWF0IH0pO1xufVxuXG5mdW5jdGlvbiB1cGRhdGVTaXRlU2VhcmNoU2V0dGluZygpIHtcbiAgICBzZW5kTWVzc2FnZSgndXBkYXRlU2l0ZVNlYXJjaFNldHRpbmcnLCB7XG4gICAgICAgIHNpdGVTZWFyY2g6IHNlYXJjaEVuZ2luZVNpdGVTZWFyY2gudmFsdWUsXG4gICAgICAgIHNpdGVTZWFyY2hVcmw6IHNlYXJjaEVuZ2luZVNpdGVTZWFyY2guc2VsZWN0ZWRPcHRpb25zWzBdLmRhdGFzZXQudXJsXG4gICAgfSk7XG59XG5cbmZ1bmN0aW9uIHVwZGF0ZVJlc2V0T3B0aW9ucygpIHtcbiAgICBsZXQgcmVzZXRPcHRpb25zID0ge1xuICAgICAgICBmb3JjZVNlYXJjaEVuZ2luZXNSZWxvYWQ6IGZvcmNlU2VhcmNoRW5naW5lc1JlbG9hZC5jaGVja2VkLFxuICAgICAgICByZXNldFByZWZlcmVuY2VzOiByZXNldFByZWZlcmVuY2VzLmNoZWNrZWQsXG4gICAgICAgIGZvcmNlRmF2aWNvbnNSZWxvYWQ6IGZvcmNlRmF2aWNvbnNSZWxvYWQuY2hlY2tlZFxuICAgIH07XG4gICAgc2VuZE1lc3NhZ2UoJ3VwZGF0ZVJlc2V0T3B0aW9ucycsIHsgcmVzZXRPcHRpb25zOiByZXNldE9wdGlvbnMgfSk7XG59XG5cbmZ1bmN0aW9uIHVwZGF0ZVVzZVJlZ2V4KCkge1xuICAgIGNvbnN0IGNoa2JveFJlZ2V4ID0gdXNlUmVnZXguY2hlY2tlZDtcbiAgICBzZW5kTWVzc2FnZSgndXBkYXRlVXNlUmVnZXgnLCB7IHVzZVJlZ2V4OiBjaGtib3hSZWdleCB9KTtcbn1cblxuZnVuY3Rpb24gaXNWYWxpZFVybCh1cmwpIHtcbiAgICB0cnkge1xuICAgICAgICBuZXcgVVJMKHVybCk7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgLy8gTWFsZm9ybWVkIFVSTFxuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxufVxuXG5mdW5jdGlvbiBjb21wYXJlTnVtYmVycyhhLCBiKSB7XG4gICAgcmV0dXJuIGEgLSBiO1xufVxuXG5mdW5jdGlvbiBjb21wYXJlU3RyaW5ncyhhLCBiKSB7XG4gICAgcmV0dXJuIGEudG9Mb3dlckNhc2UoKS5sb2NhbGVDb21wYXJlKGIudG9Mb3dlckNhc2UoKSk7XG59XG5cbmZ1bmN0aW9uIHNvcnRBbHBoYWJldGljYWxseShhcnJheSkge1xuICAgIGxldCBudW1iZXJzID0gW107XG4gICAgbGV0IGFscGhhID0gW107XG4gICAgZm9yIChsZXQgaXRlbSBvZiBhcnJheSkge1xuICAgICAgICBpZiAoIWlzTmFOKE51bWJlcihpdGVtKSkpIHtcbiAgICAgICAgICAgIG51bWJlcnMucHVzaChOdW1iZXIoaXRlbSkpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgYWxwaGEucHVzaChpdGVtKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBudW1iZXJzID0gbnVtYmVycy5zb3J0KGNvbXBhcmVOdW1iZXJzKTtcbiAgICBhbHBoYSA9IGFscGhhLnNvcnQoY29tcGFyZVN0cmluZ3MpO1xuICAgIHJldHVybiBudW1iZXJzLmNvbmNhdChhbHBoYSk7XG59XG5cbmZ1bmN0aW9uIGluaXQoKSB7XG4gICAgaTE4bigpO1xufVxuXG5mdW5jdGlvbiBpMThuKCkge1xuICAgIHRyYW5zbGF0ZUNvbnRlbnQoJ2RhdGEtaTE4bicsICd0ZXh0Q29udGVudCcpO1xuICAgIHRyYW5zbGF0ZUNvbnRlbnQoJ2RhdGEtaTE4bi1wbGFjZWhvbGRlcicsICdwbGFjZWhvbGRlcicpO1xuICAgIHRyYW5zbGF0ZUNvbnRlbnQoJ2RhdGEtaTE4bi10aXRsZScsICd0aXRsZScpO1xufVxuXG5mdW5jdGlvbiB0cmFuc2xhdGVDb250ZW50KGF0dHJpYnV0ZSwgdHlwZSkge1xuICAgIGxldCBpMThuRWxlbWVudHMgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKCdbJyArIGF0dHJpYnV0ZSArICddJyk7XG5cbiAgICBmb3IgKGxldCBpIGluIGkxOG5FbGVtZW50cykge1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgaWYgKGkxOG5FbGVtZW50c1tpXS5nZXRBdHRyaWJ1dGUgPT0gbnVsbCkgY29udGludWU7XG4gICAgICAgICAgICBsZXQgaTE4bl9hdHRyaWIgPSBpMThuRWxlbWVudHNbaV0uZ2V0QXR0cmlidXRlKGF0dHJpYnV0ZSk7XG4gICAgICAgICAgICBsZXQgbWVzc2FnZSA9IGJyb3dzZXIuaTE4bi5nZXRNZXNzYWdlKGkxOG5fYXR0cmliKTtcbiAgICAgICAgICAgIHN3aXRjaCAodHlwZSkge1xuICAgICAgICAgICAgICAgIGNhc2UgJ3RleHRDb250ZW50JzpcbiAgICAgICAgICAgICAgICAgICAgaTE4bkVsZW1lbnRzW2ldLnRleHRDb250ZW50ID0gbWVzc2FnZTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSAncGxhY2Vob2xkZXInOlxuICAgICAgICAgICAgICAgICAgICBpMThuRWxlbWVudHNbaV0ucGxhY2Vob2xkZXIgPSBtZXNzYWdlO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlICd0aXRsZSc6XG4gICAgICAgICAgICAgICAgICAgIGkxOG5FbGVtZW50c1tpXS50aXRsZSA9IG1lc3NhZ2U7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICB9IGNhdGNoIChleCkge1xuICAgICAgICAgICAgaWYgKGxvZ1RvQ29uc29sZSkgY29uc29sZS5lcnJvcihgVHJhbnNsYXRpb24gZm9yICR7aTE4bkVsZW1lbnRzW2ldfSBjb3VsZCBub3QgYmUgZm91bmRgKTtcbiAgICAgICAgfVxuICAgIH1cbn1cblxuLy8vIFNvcnQgc2VhcmNoIGVuZ2luZXMgYnkgaW5kZXhcbmZ1bmN0aW9uIHNvcnRCeUluZGV4KGxpc3QpIHtcbiAgICBsZXQgc29ydGVkTGlzdCA9IEpTT04ucGFyc2UoSlNPTi5zdHJpbmdpZnkobGlzdCkpO1xuICAgIGxldCBuID0gT2JqZWN0LmtleXMobGlzdCkubGVuZ3RoO1xuICAgIGxldCBhcnJheU9mSW5kZXhlcyA9IFtdO1xuICAgIGxldCBhcnJheU9mSWRzID0gW107XG4gICAgbGV0IG1pbiA9IDA7XG4gICAgaWYgKGxvZ1RvQ29uc29sZSkgY29uc29sZS5sb2cobGlzdCk7XG4gICAgLy8gQ3JlYXRlIHRoZSBhcnJheSBvZiBpbmRleGVzIGFuZCBpdHMgY29ycmVzcG9uZGluZyBhcnJheSBvZiBpZHNcbiAgICBmb3IgKGxldCBpZCBpbiBsaXN0KSB7XG4gICAgICAgIGlmIChsb2dUb0NvbnNvbGUpIGNvbnNvbGUubG9nKGBpZCA9ICR7aWR9YCk7XG4gICAgICAgIC8vIElmIHRoZXJlIGlzIG5vIGluZGV4LCB0aGVuIG1vdmUgdGhlIHNlYXJjaCBlbmdpbmUgdG8gdGhlIGVuZCBvZiB0aGUgbGlzdFxuICAgICAgICBpZiAoaXNFbXB0eShsaXN0W2lkXS5pbmRleCkpIHtcbiAgICAgICAgICAgIGxpc3RbaWRdLmluZGV4ID0gbiArIDE7XG4gICAgICAgICAgICBuKys7XG4gICAgICAgIH1cbiAgICAgICAgYXJyYXlPZkluZGV4ZXMucHVzaChsaXN0W2lkXS5pbmRleCk7XG4gICAgICAgIGFycmF5T2ZJZHMucHVzaChpZCk7XG4gICAgfVxuICAgIC8vIFNvcnQgdGhlIGxpc3QgYnkgaW5kZXhcbiAgICBmb3IgKGxldCBpID0gMTsgaSA8IG4gKyAxOyBpKyspIHtcbiAgICAgICAgbWluID0gTWF0aC5taW4oLi4uYXJyYXlPZkluZGV4ZXMpO1xuICAgICAgICBsZXQgaW5kID0gYXJyYXlPZkluZGV4ZXMuaW5kZXhPZihtaW4pO1xuICAgICAgICBhcnJheU9mSW5kZXhlcy5zcGxpY2UoaW5kLCAxKTtcbiAgICAgICAgbGV0IGlkID0gYXJyYXlPZklkcy5zcGxpY2UoaW5kLCAxKTtcbiAgICAgICAgc29ydGVkTGlzdFtpZF0uaW5kZXggPSBpO1xuICAgIH1cblxuICAgIHJldHVybiBzb3J0ZWRMaXN0O1xufVxuXG4vLyBUZXN0IGlmIGFuIG9iamVjdCBpcyBlbXB0eVxuZnVuY3Rpb24gaXNFbXB0eSh2YWx1ZSkge1xuICAgIGlmICh0eXBlb2YgdmFsdWUgPT09ICdudW1iZXInKSByZXR1cm4gZmFsc2U7XG4gICAgZWxzZSBpZiAodHlwZW9mIHZhbHVlID09PSAnc3RyaW5nJykgcmV0dXJuIHZhbHVlLnRyaW0oKS5sZW5ndGggPT09IDA7XG4gICAgZWxzZSBpZiAoQXJyYXkuaXNBcnJheSh2YWx1ZSkpIHJldHVybiB2YWx1ZS5sZW5ndGggPT09IDA7XG4gICAgZWxzZSBpZiAodHlwZW9mIHZhbHVlID09PSAnb2JqZWN0Jykge1xuICAgICAgICByZXR1cm4gdmFsdWUgPT09IG51bGwgfHwgT2JqZWN0LmtleXModmFsdWUpLmxlbmd0aCA9PT0gMDtcbiAgICB9IGVsc2UgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gJ2Jvb2xlYW4nKSByZXR1cm4gZmFsc2U7XG4gICAgZWxzZSByZXR1cm4gIXZhbHVlO1xufVxuXG5pbml0KCk7XG4iXSwibmFtZXMiOlsiJGJlNTdkNTgxMzhkMWJjMTckdmFyJG93bktleXMiLCJvYmplY3QiLCJlbnVtZXJhYmxlT25seSIsImtleXMiLCJPYmplY3QiLCJnZXRPd25Qcm9wZXJ0eVN5bWJvbHMiLCJzeW1ib2xzIiwiZmlsdGVyIiwic3ltIiwiZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yIiwiZW51bWVyYWJsZSIsInB1c2giLCJhcHBseSIsIiRiZTU3ZDU4MTM4ZDFiYzE3JHZhciRfb2JqZWN0U3ByZWFkMiIsInRhcmdldCIsImkiLCJhcmd1bWVudHMiLCJsZW5ndGgiLCJzb3VyY2UiLCJmb3JFYWNoIiwia2V5IiwiJGJlNTdkNTgxMzhkMWJjMTckdmFyJF9kZWZpbmVQcm9wZXJ0eSIsImdldE93blByb3BlcnR5RGVzY3JpcHRvcnMiLCJkZWZpbmVQcm9wZXJ0aWVzIiwiZGVmaW5lUHJvcGVydHkiLCIkYmU1N2Q1ODEzOGQxYmMxNyR2YXIkX3R5cGVvZiIsIm9iaiIsIlN5bWJvbCIsIml0ZXJhdG9yIiwiY29uc3RydWN0b3IiLCJwcm90b3R5cGUiLCJ2YWx1ZSIsImNvbmZpZ3VyYWJsZSIsIndyaXRhYmxlIiwiJGJlNTdkNTgxMzhkMWJjMTckdmFyJF9leHRlbmRzIiwiYXNzaWduIiwiaGFzT3duUHJvcGVydHkiLCJjYWxsIiwidGhpcyIsIiRiZTU3ZDU4MTM4ZDFiYzE3JHZhciRfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMiLCJleGNsdWRlZCIsInNvdXJjZUtleXMiLCJpbmRleE9mIiwiJGJlNTdkNTgxMzhkMWJjMTckdmFyJF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlIiwic291cmNlU3ltYm9sS2V5cyIsInByb3BlcnR5SXNFbnVtZXJhYmxlIiwiJGJlNTdkNTgxMzhkMWJjMTckdmFyJHVzZXJBZ2VudCIsInBhdHRlcm4iLCJ3aW5kb3ciLCJuYXZpZ2F0b3IiLCJ1c2VyQWdlbnQiLCJtYXRjaCIsIiRiZTU3ZDU4MTM4ZDFiYzE3JHZhciRJRTExT3JMZXNzIiwiJGJlNTdkNTgxMzhkMWJjMTckdmFyJEVkZ2UiLCIkYmU1N2Q1ODEzOGQxYmMxNyR2YXIkRmlyZUZveCIsIiRiZTU3ZDU4MTM4ZDFiYzE3JHZhciRTYWZhcmkiLCIkYmU1N2Q1ODEzOGQxYmMxNyR2YXIkSU9TIiwiJGJlNTdkNTgxMzhkMWJjMTckdmFyJENocm9tZUZvckFuZHJvaWQiLCIkYmU1N2Q1ODEzOGQxYmMxNyR2YXIkY2FwdHVyZU1vZGUiLCJjYXB0dXJlIiwicGFzc2l2ZSIsIiRiZTU3ZDU4MTM4ZDFiYzE3JHZhciRvbiIsImVsIiwiZXZlbnQiLCJmbiIsImFkZEV2ZW50TGlzdGVuZXIiLCIkYmU1N2Q1ODEzOGQxYmMxNyR2YXIkb2ZmIiwicmVtb3ZlRXZlbnRMaXN0ZW5lciIsIiRiZTU3ZDU4MTM4ZDFiYzE3JHZhciRtYXRjaGVzIiwic2VsZWN0b3IiLCJzdWJzdHJpbmciLCJtYXRjaGVzIiwibXNNYXRjaGVzU2VsZWN0b3IiLCJ3ZWJraXRNYXRjaGVzU2VsZWN0b3IiLCJfIiwiJGJlNTdkNTgxMzhkMWJjMTckdmFyJGdldFBhcmVudE9ySG9zdCIsImhvc3QiLCJkb2N1bWVudCIsIm5vZGVUeXBlIiwicGFyZW50Tm9kZSIsIiRiZTU3ZDU4MTM4ZDFiYzE3JHZhciRjbG9zZXN0IiwiY3R4IiwiaW5jbHVkZUNUWCIsIiRiZTU3ZDU4MTM4ZDFiYzE3JHZhciRfdGhyb3R0bGVUaW1lb3V0IiwiJGJlNTdkNTgxMzhkMWJjMTckdmFyJFJfU1BBQ0UiLCIkYmU1N2Q1ODEzOGQxYmMxNyR2YXIkdG9nZ2xlQ2xhc3MiLCJuYW1lIiwic3RhdGUiLCJjbGFzc0xpc3QiLCJjbGFzc05hbWUiLCJyZXBsYWNlIiwiJGJlNTdkNTgxMzhkMWJjMTckdmFyJGNzcyIsInByb3AiLCJ2YWwiLCJzdHlsZSIsImRlZmF1bHRWaWV3IiwiZ2V0Q29tcHV0ZWRTdHlsZSIsImN1cnJlbnRTdHlsZSIsIiRiZTU3ZDU4MTM4ZDFiYzE3JHZhciRtYXRyaXgiLCJzZWxmT25seSIsImFwcGxpZWRUcmFuc2Zvcm1zIiwidHJhbnNmb3JtIiwibWF0cml4Rm4iLCJET01NYXRyaXgiLCJXZWJLaXRDU1NNYXRyaXgiLCJDU1NNYXRyaXgiLCJNU0NTU01hdHJpeCIsIiRiZTU3ZDU4MTM4ZDFiYzE3JHZhciRmaW5kIiwidGFnTmFtZSIsImxpc3QiLCJnZXRFbGVtZW50c0J5VGFnTmFtZSIsIm4iLCIkYmU1N2Q1ODEzOGQxYmMxNyR2YXIkZ2V0V2luZG93U2Nyb2xsaW5nRWxlbWVudCIsInNjcm9sbGluZ0VsZW1lbnQiLCJkb2N1bWVudEVsZW1lbnQiLCIkYmU1N2Q1ODEzOGQxYmMxNyR2YXIkZ2V0UmVjdCIsInJlbGF0aXZlVG9Db250YWluaW5nQmxvY2siLCJyZWxhdGl2ZVRvTm9uU3RhdGljUGFyZW50IiwidW5kb1NjYWxlIiwiY29udGFpbmVyIiwiZ2V0Qm91bmRpbmdDbGllbnRSZWN0IiwiZWxSZWN0IiwidG9wIiwibGVmdCIsImJvdHRvbSIsInJpZ2h0IiwiaGVpZ2h0Iiwid2lkdGgiLCJpbm5lckhlaWdodCIsImlubmVyV2lkdGgiLCJjb250YWluZXJSZWN0IiwicGFyc2VJbnQiLCJlbE1hdHJpeCIsInNjYWxlWCIsImEiLCJzY2FsZVkiLCJkIiwiJGJlNTdkNTgxMzhkMWJjMTckdmFyJGlzU2Nyb2xsZWRQYXN0IiwiZWxTaWRlIiwicGFyZW50U2lkZSIsInBhcmVudCIsIiRiZTU3ZDU4MTM4ZDFiYzE3JHZhciRnZXRQYXJlbnRBdXRvU2Nyb2xsRWxlbWVudCIsImVsU2lkZVZhbCIsInBhcmVudFNpZGVWYWwiLCIkYmU1N2Q1ODEzOGQxYmMxNyR2YXIkZ2V0Q2hpbGQiLCJjaGlsZE51bSIsIm9wdGlvbnMiLCJpbmNsdWRlRHJhZ0VsIiwiY3VycmVudENoaWxkIiwiY2hpbGRyZW4iLCJkaXNwbGF5IiwiJGJlNTdkNTgxMzhkMWJjMTckZXhwb3J0JDMxYjNjYTcwZDhmNTc0MjMiLCJnaG9zdCIsImRyYWdnZWQiLCJkcmFnZ2FibGUiLCIkYmU1N2Q1ODEzOGQxYmMxNyR2YXIkbGFzdENoaWxkIiwibGFzdCIsImxhc3RFbGVtZW50Q2hpbGQiLCJwcmV2aW91c0VsZW1lbnRTaWJsaW5nIiwiJGJlNTdkNTgxMzhkMWJjMTckdmFyJGluZGV4IiwiaW5kZXgiLCJub2RlTmFtZSIsInRvVXBwZXJDYXNlIiwiY2xvbmUiLCIkYmU1N2Q1ODEzOGQxYmMxNyR2YXIkZ2V0UmVsYXRpdmVTY3JvbGxPZmZzZXQiLCJvZmZzZXRMZWZ0Iiwib2Zmc2V0VG9wIiwid2luU2Nyb2xsZXIiLCJzY3JvbGxMZWZ0Iiwic2Nyb2xsVG9wIiwiaW5jbHVkZVNlbGYiLCJlbGVtIiwiZ290U2VsZiIsImNsaWVudFdpZHRoIiwic2Nyb2xsV2lkdGgiLCJjbGllbnRIZWlnaHQiLCJzY3JvbGxIZWlnaHQiLCJlbGVtQ1NTIiwib3ZlcmZsb3dYIiwib3ZlcmZsb3dZIiwiYm9keSIsIiRiZTU3ZDU4MTM4ZDFiYzE3JHZhciRpc1JlY3RFcXVhbCIsInJlY3QxIiwicmVjdDIiLCJNYXRoIiwicm91bmQiLCIkYmU1N2Q1ODEzOGQxYmMxNyR2YXIkdGhyb3R0bGUiLCJjYWxsYmFjayIsIm1zIiwiYXJncyIsInNldFRpbWVvdXQiLCIkYmU1N2Q1ODEzOGQxYmMxNyR2YXIkc2Nyb2xsQnkiLCJ4IiwieSIsIiRiZTU3ZDU4MTM4ZDFiYzE3JHZhciRjbG9uZSIsIlBvbHltZXIiLCIkIiwialF1ZXJ5IiwiWmVwdG8iLCJkb20iLCJjbG9uZU5vZGUiLCIkYmU1N2Q1ODEzOGQxYmMxNyR2YXIkZXhwYW5kbyIsIkRhdGUiLCJnZXRUaW1lIiwiJGJlNTdkNTgxMzhkMWJjMTckdmFyJEFuaW1hdGlvblN0YXRlTWFuYWdlciIsImFuaW1hdGlvbkNhbGxiYWNrSWQiLCJhbmltYXRpb25TdGF0ZXMiLCJjYXB0dXJlQW5pbWF0aW9uU3RhdGUiLCJhbmltYXRpb24iLCJzbGljZSIsImNoaWxkIiwicmVjdCIsImZyb21SZWN0IiwidGhpc0FuaW1hdGlvbkR1cmF0aW9uIiwiY2hpbGRNYXRyaXgiLCJmIiwiZSIsImFkZEFuaW1hdGlvblN0YXRlIiwicmVtb3ZlQW5pbWF0aW9uU3RhdGUiLCJzcGxpY2UiLCJhcnIiLCJOdW1iZXIiLCIkYmU1N2Q1ODEzOGQxYmMxNyR2YXIkaW5kZXhPZk9iamVjdCIsImFuaW1hdGVBbGwiLCJfdGhpcyIsImNsZWFyVGltZW91dCIsImFuaW1hdGluZyIsImFuaW1hdGlvblRpbWUiLCJ0aW1lIiwidG9SZWN0IiwicHJldkZyb21SZWN0IiwicHJldlRvUmVjdCIsImFuaW1hdGluZ1JlY3QiLCJ0YXJnZXRNYXRyaXgiLCJzcXJ0IiwicG93IiwiJGJlNTdkNTgxMzhkMWJjMTckdmFyJGNhbGN1bGF0ZVJlYWxUaW1lIiwiYW5pbWF0ZSIsIm1heCIsImFuaW1hdGlvblJlc2V0VGltZXIiLCJjdXJyZW50UmVjdCIsImR1cmF0aW9uIiwidHJhbnNsYXRlWCIsInRyYW5zbGF0ZVkiLCJhbmltYXRpbmdYIiwiYW5pbWF0aW5nWSIsImZvclJlcGFpbnREdW1teSIsIm9mZnNldFdpZHRoIiwiJGJlNTdkNTgxMzhkMWJjMTckdmFyJHJlcGFpbnQiLCJlYXNpbmciLCJhbmltYXRlZCIsIiRiZTU3ZDU4MTM4ZDFiYzE3JHZhciRwbHVnaW5zIiwiJGJlNTdkNTgxMzhkMWJjMTckdmFyJGRlZmF1bHRzIiwiaW5pdGlhbGl6ZUJ5RGVmYXVsdCIsIiRiZTU3ZDU4MTM4ZDFiYzE3JHZhciRQbHVnaW5NYW5hZ2VyIiwibW91bnQiLCJwbHVnaW4iLCJvcHRpb24iLCJwIiwicGx1Z2luTmFtZSIsImNvbmNhdCIsInBsdWdpbkV2ZW50IiwiZXZlbnROYW1lIiwic29ydGFibGUiLCJldnQiLCJldmVudENhbmNlbGVkIiwiY2FuY2VsIiwiZXZlbnROYW1lR2xvYmFsIiwiaW5pdGlhbGl6ZVBsdWdpbnMiLCJkZWZhdWx0cyIsImluaXRpYWxpemVkIiwibW9kaWZpZWQiLCJtb2RpZnlPcHRpb24iLCJnZXRFdmVudFByb3BlcnRpZXMiLCJldmVudFByb3BlcnRpZXMiLCJtb2RpZmllZFZhbHVlIiwib3B0aW9uTGlzdGVuZXJzIiwiJGJlNTdkNTgxMzhkMWJjMTckdmFyJGRpc3BhdGNoRXZlbnQiLCJfcmVmIiwicm9vdEVsIiwidGFyZ2V0RWwiLCJjbG9uZUVsIiwidG9FbCIsImZyb21FbCIsIm9sZEluZGV4IiwibmV3SW5kZXgiLCJvbGREcmFnZ2FibGVJbmRleCIsIm5ld0RyYWdnYWJsZUluZGV4Iiwib3JpZ2luYWxFdmVudCIsInB1dFNvcnRhYmxlIiwiZXh0cmFFdmVudFByb3BlcnRpZXMiLCJvbk5hbWUiLCJjaGFyQXQiLCJzdWJzdHIiLCJDdXN0b21FdmVudCIsImNyZWF0ZUV2ZW50IiwiaW5pdEV2ZW50IiwiYnViYmxlcyIsImNhbmNlbGFibGUiLCJ0byIsImZyb20iLCJpdGVtIiwicHVsbE1vZGUiLCJsYXN0UHV0TW9kZSIsInVuZGVmaW5lZCIsImFsbEV2ZW50UHJvcGVydGllcyIsImRpc3BhdGNoRXZlbnQiLCIkYmU1N2Q1ODEzOGQxYmMxNyR2YXIkX2V4Y2x1ZGVkIiwiJGJlNTdkNTgxMzhkMWJjMTckdmFyJHBsdWdpbkV2ZW50IiwiZGF0YSIsImJpbmQiLCJkcmFnRWwiLCIkYmU1N2Q1ODEzOGQxYmMxNyR2YXIkZHJhZ0VsIiwicGFyZW50RWwiLCIkYmU1N2Q1ODEzOGQxYmMxNyR2YXIkcGFyZW50RWwiLCJnaG9zdEVsIiwiJGJlNTdkNTgxMzhkMWJjMTckdmFyJGdob3N0RWwiLCIkYmU1N2Q1ODEzOGQxYmMxNyR2YXIkcm9vdEVsIiwibmV4dEVsIiwiJGJlNTdkNTgxMzhkMWJjMTckdmFyJG5leHRFbCIsImxhc3REb3duRWwiLCIkYmU1N2Q1ODEzOGQxYmMxNyR2YXIkbGFzdERvd25FbCIsIiRiZTU3ZDU4MTM4ZDFiYzE3JHZhciRjbG9uZUVsIiwiY2xvbmVIaWRkZW4iLCIkYmU1N2Q1ODEzOGQxYmMxNyR2YXIkY2xvbmVIaWRkZW4iLCJkcmFnU3RhcnRlZCIsIiRiZTU3ZDU4MTM4ZDFiYzE3JHZhciRtb3ZlZCIsIiRiZTU3ZDU4MTM4ZDFiYzE3JHZhciRwdXRTb3J0YWJsZSIsImFjdGl2ZVNvcnRhYmxlIiwiYWN0aXZlIiwiJGJlNTdkNTgxMzhkMWJjMTckdmFyJG9sZEluZGV4IiwiJGJlNTdkNTgxMzhkMWJjMTckdmFyJG9sZERyYWdnYWJsZUluZGV4IiwiJGJlNTdkNTgxMzhkMWJjMTckdmFyJG5ld0luZGV4IiwiJGJlNTdkNTgxMzhkMWJjMTckdmFyJG5ld0RyYWdnYWJsZUluZGV4IiwiaGlkZUdob3N0Rm9yVGFyZ2V0IiwiJGJlNTdkNTgxMzhkMWJjMTckdmFyJF9oaWRlR2hvc3RGb3JUYXJnZXQiLCJ1bmhpZGVHaG9zdEZvclRhcmdldCIsIiRiZTU3ZDU4MTM4ZDFiYzE3JHZhciRfdW5oaWRlR2hvc3RGb3JUYXJnZXQiLCJjbG9uZU5vd0hpZGRlbiIsImNsb25lTm93U2hvd24iLCJkaXNwYXRjaFNvcnRhYmxlRXZlbnQiLCIkYmU1N2Q1ODEzOGQxYmMxNyR2YXIkX2Rpc3BhdGNoRXZlbnQiLCJpbmZvIiwiJGJlNTdkNTgxMzhkMWJjMTckdmFyJGFjdGl2ZUdyb3VwIiwiJGJlNTdkNTgxMzhkMWJjMTckdmFyJHRhcEV2dCIsIiRiZTU3ZDU4MTM4ZDFiYzE3JHZhciR0b3VjaEV2dCIsIiRiZTU3ZDU4MTM4ZDFiYzE3JHZhciRsYXN0RHgiLCIkYmU1N2Q1ODEzOGQxYmMxNyR2YXIkbGFzdER5IiwiJGJlNTdkNTgxMzhkMWJjMTckdmFyJHRhcERpc3RhbmNlTGVmdCIsIiRiZTU3ZDU4MTM4ZDFiYzE3JHZhciR0YXBEaXN0YW5jZVRvcCIsIiRiZTU3ZDU4MTM4ZDFiYzE3JHZhciRsYXN0VGFyZ2V0IiwiJGJlNTdkNTgxMzhkMWJjMTckdmFyJGxhc3REaXJlY3Rpb24iLCIkYmU1N2Q1ODEzOGQxYmMxNyR2YXIkdGFyZ2V0TW92ZURpc3RhbmNlIiwiJGJlNTdkNTgxMzhkMWJjMTckdmFyJGdob3N0UmVsYXRpdmVQYXJlbnQiLCIkYmU1N2Q1ODEzOGQxYmMxNyR2YXIkYXdhaXRpbmdEcmFnU3RhcnRlZCIsIiRiZTU3ZDU4MTM4ZDFiYzE3JHZhciRpZ25vcmVOZXh0Q2xpY2siLCIkYmU1N2Q1ODEzOGQxYmMxNyR2YXIkc29ydGFibGVzIiwiJGJlNTdkNTgxMzhkMWJjMTckdmFyJHBhc3RGaXJzdEludmVydFRocmVzaCIsIiRiZTU3ZDU4MTM4ZDFiYzE3JHZhciRpc0NpcmN1bXN0YW50aWFsSW52ZXJ0IiwiJGJlNTdkNTgxMzhkMWJjMTckdmFyJGdob3N0UmVsYXRpdmVQYXJlbnRJbml0aWFsU2Nyb2xsIiwiJGJlNTdkNTgxMzhkMWJjMTckdmFyJF9zaWxlbnQiLCIkYmU1N2Q1ODEzOGQxYmMxNyR2YXIkc2F2ZWRJbnB1dENoZWNrZWQiLCIkYmU1N2Q1ODEzOGQxYmMxNyR2YXIkZG9jdW1lbnRFeGlzdHMiLCIkYmU1N2Q1ODEzOGQxYmMxNyR2YXIkUG9zaXRpb25HaG9zdEFic29sdXRlbHkiLCIkYmU1N2Q1ODEzOGQxYmMxNyR2YXIkQ1NTRmxvYXRQcm9wZXJ0eSIsIiRiZTU3ZDU4MTM4ZDFiYzE3JHZhciRzdXBwb3J0RHJhZ2dhYmxlIiwiY3JlYXRlRWxlbWVudCIsIiRiZTU3ZDU4MTM4ZDFiYzE3JHZhciRzdXBwb3J0Q3NzUG9pbnRlckV2ZW50cyIsImNzc1RleHQiLCJwb2ludGVyRXZlbnRzIiwiJGJlNTdkNTgxMzhkMWJjMTckdmFyJF9kZXRlY3REaXJlY3Rpb24iLCJlbENTUyIsImVsV2lkdGgiLCJwYWRkaW5nTGVmdCIsInBhZGRpbmdSaWdodCIsImJvcmRlckxlZnRXaWR0aCIsImJvcmRlclJpZ2h0V2lkdGgiLCJjaGlsZDEiLCJjaGlsZDIiLCJmaXJzdENoaWxkQ1NTIiwic2Vjb25kQ2hpbGRDU1MiLCJmaXJzdENoaWxkV2lkdGgiLCJtYXJnaW5MZWZ0IiwibWFyZ2luUmlnaHQiLCJzZWNvbmRDaGlsZFdpZHRoIiwiZmxleERpcmVjdGlvbiIsImdyaWRUZW1wbGF0ZUNvbHVtbnMiLCJzcGxpdCIsInRvdWNoaW5nU2lkZUNoaWxkMiIsImNsZWFyIiwiJGJlNTdkNTgxMzhkMWJjMTckdmFyJF9wcmVwYXJlR3JvdXAiLCJ0b0ZuIiwicHVsbCIsInNhbWVHcm91cCIsImdyb3VwIiwib3RoZXJHcm91cCIsImpvaW4iLCJvcmlnaW5hbEdyb3VwIiwiY2hlY2tQdWxsIiwiY2hlY2tQdXQiLCJwdXQiLCJyZXZlcnRDbG9uZSIsInByZXZlbnREZWZhdWx0Iiwic3RvcFByb3BhZ2F0aW9uIiwic3RvcEltbWVkaWF0ZVByb3BhZ2F0aW9uIiwiJGJlNTdkNTgxMzhkMWJjMTckdmFyJG5lYXJlc3RFbXB0eUluc2VydERldGVjdEV2ZW50IiwidG91Y2hlcyIsIm5lYXJlc3QiLCJjbGllbnRYIiwiY2xpZW50WSIsInNvbWUiLCJ0aHJlc2hvbGQiLCJlbXB0eUluc2VydFRocmVzaG9sZCIsImluc2lkZUhvcml6b250YWxseSIsImluc2lkZVZlcnRpY2FsbHkiLCJyZXQiLCJfb25EcmFnT3ZlciIsIiRiZTU3ZDU4MTM4ZDFiYzE3JHZhciRfY2hlY2tPdXRzaWRlVGFyZ2V0RWwiLCJfaXNPdXRzaWRlVGhpc0VsIiwidG9TdHJpbmciLCJzb3J0IiwiZGlzYWJsZWQiLCJzdG9yZSIsImhhbmRsZSIsInRlc3QiLCJzd2FwVGhyZXNob2xkIiwiaW52ZXJ0U3dhcCIsImludmVydGVkU3dhcFRocmVzaG9sZCIsInJlbW92ZUNsb25lT25IaWRlIiwiZGlyZWN0aW9uIiwiZ2hvc3RDbGFzcyIsImNob3NlbkNsYXNzIiwiZHJhZ0NsYXNzIiwiaWdub3JlIiwicHJldmVudE9uRmlsdGVyIiwic2V0RGF0YSIsImRhdGFUcmFuc2ZlciIsInRleHRDb250ZW50IiwiZHJvcEJ1YmJsZSIsImRyYWdvdmVyQnViYmxlIiwiZGF0YUlkQXR0ciIsImRlbGF5IiwiZGVsYXlPblRvdWNoT25seSIsInRvdWNoU3RhcnRUaHJlc2hvbGQiLCJkZXZpY2VQaXhlbFJhdGlvIiwiZm9yY2VGYWxsYmFjayIsImZhbGxiYWNrQ2xhc3MiLCJmYWxsYmFja09uQm9keSIsImZhbGxiYWNrVG9sZXJhbmNlIiwiZmFsbGJhY2tPZmZzZXQiLCJzdXBwb3J0UG9pbnRlciIsIm5hdGl2ZURyYWdnYWJsZSIsIl9vblRhcFN0YXJ0IiwiZ2V0IiwiJGJlNTdkNTgxMzhkMWJjMTckdmFyJF9vbk1vdmUiLCJkcmFnUmVjdCIsInRhcmdldFJlY3QiLCJ3aWxsSW5zZXJ0QWZ0ZXIiLCJyZXRWYWwiLCJvbk1vdmVGbiIsIm9uTW92ZSIsImRyYWdnZWRSZWN0IiwicmVsYXRlZCIsInJlbGF0ZWRSZWN0IiwiJGJlNTdkNTgxMzhkMWJjMTckdmFyJF9kaXNhYmxlRHJhZ2dhYmxlIiwiJGJlNTdkNTgxMzhkMWJjMTckdmFyJF91bnNpbGVudCIsIiRiZTU3ZDU4MTM4ZDFiYzE3JHZhciRfZ2VuZXJhdGVJZCIsInN0ciIsInNyYyIsImhyZWYiLCJzdW0iLCJjaGFyQ29kZUF0IiwiJGJlNTdkNTgxMzhkMWJjMTckdmFyJF9uZXh0VGljayIsIiRiZTU3ZDU4MTM4ZDFiYzE3JHZhciRfY2FuY2VsTmV4dFRpY2siLCJpZCIsImNvbnRhaW5zIiwiX2dldERpcmVjdGlvbiIsInR5cGUiLCJ0b3VjaCIsInBvaW50ZXJUeXBlIiwib3JpZ2luYWxUYXJnZXQiLCJzaGFkb3dSb290IiwicGF0aCIsImNvbXBvc2VkUGF0aCIsInJvb3QiLCJpbnB1dHMiLCJpZHgiLCJjaGVja2VkIiwiJGJlNTdkNTgxMzhkMWJjMTckdmFyJF9zYXZlSW5wdXRDaGVja2VkU3RhdGUiLCJidXR0b24iLCJpc0NvbnRlbnRFZGl0YWJsZSIsImNyaXRlcmlhIiwidHJpbSIsIl9wcmVwYXJlRHJhZ1N0YXJ0IiwiZHJhZ1N0YXJ0Rm4iLCJvd25lckRvY3VtZW50IiwibmV4dFNpYmxpbmciLCJfbGFzdFgiLCJfbGFzdFkiLCJfb25Ecm9wIiwiX2Rpc2FibGVEZWxheWVkRHJhZ0V2ZW50cyIsIl90cmlnZ2VyRHJhZ1N0YXJ0IiwiX2Rpc2FibGVEZWxheWVkRHJhZyIsIl9kZWxheWVkRHJhZ1RvdWNoTW92ZUhhbmRsZXIiLCJfZHJhZ1N0YXJ0VGltZXIiLCJhYnMiLCJmbG9vciIsIl9vblRvdWNoTW92ZSIsIl9vbkRyYWdTdGFydCIsInNlbGVjdGlvbiIsImVtcHR5IiwiZ2V0U2VsZWN0aW9uIiwicmVtb3ZlQWxsUmFuZ2VzIiwiZXJyIiwiX2RyYWdTdGFydGVkIiwiZmFsbGJhY2siLCJfYXBwZW5kR2hvc3QiLCJfbnVsbGluZyIsIl9lbXVsYXRlRHJhZ092ZXIiLCJlbGVtZW50RnJvbVBvaW50IiwiZ2hvc3RNYXRyaXgiLCJyZWxhdGl2ZVNjcm9sbE9mZnNldCIsImR4IiwiZHkiLCJiIiwiYyIsImNzc01hdHJpeCIsImFwcGVuZENoaWxkIiwicmVtb3ZlQXR0cmlidXRlIiwiX2hpZGVDbG9uZSIsImNsb25lSWQiLCJpbnNlcnRCZWZvcmUiLCJfbG9vcElkIiwic2V0SW50ZXJ2YWwiLCJlZmZlY3RBbGxvd2VkIiwiX2RyYWdTdGFydElkIiwicmV2ZXJ0IiwidmVydGljYWwiLCJpc093bmVyIiwiY2FuU29ydCIsImZyb21Tb3J0YWJsZSIsImNvbXBsZXRlZEZpcmVkIiwiZHJhZ092ZXJFdmVudCIsIl9pZ25vcmVXaGlsZUFuaW1hdGluZyIsImNvbXBsZXRlZCIsImVsTGFzdENoaWxkIiwic3BhY2VyIiwiJGJlNTdkNTgxMzhkMWJjMTckdmFyJF9naG9zdElzTGFzdCIsImNoYW5nZWQiLCIkYmU1N2Q1ODEzOGQxYmMxNyR2YXIkX2dob3N0SXNGaXJzdCIsImZpcnN0Q2hpbGQiLCJ0YXJnZXRCZWZvcmVGaXJzdFN3YXAiLCJzaWJsaW5nIiwiZGlmZmVyZW50TGV2ZWwiLCJkaWZmZXJlbnRSb3dDb2wiLCJkcmFnRWxTMU9wcCIsImRyYWdFbFMyT3BwIiwiZHJhZ0VsT3BwTGVuZ3RoIiwidGFyZ2V0UzFPcHAiLCJ0YXJnZXRTMk9wcCIsInRhcmdldE9wcExlbmd0aCIsIiRiZTU3ZDU4MTM4ZDFiYzE3JHZhciRfZHJhZ0VsSW5Sb3dDb2x1bW4iLCJzaWRlMSIsInNjcm9sbGVkUGFzdFRvcCIsInNjcm9sbEJlZm9yZSIsImlzTGFzdFRhcmdldCIsIm1vdXNlT25BeGlzIiwidGFyZ2V0TGVuZ3RoIiwidGFyZ2V0UzEiLCJ0YXJnZXRTMiIsImludmVydCIsIiRiZTU3ZDU4MTM4ZDFiYzE3JHZhciRfZ2V0SW5zZXJ0RGlyZWN0aW9uIiwiJGJlNTdkNTgxMzhkMWJjMTckdmFyJF9nZXRTd2FwRGlyZWN0aW9uIiwiZHJhZ0luZGV4IiwibmV4dEVsZW1lbnRTaWJsaW5nIiwiYWZ0ZXIiLCJtb3ZlVmVjdG9yIiwiZXh0cmEiLCJheGlzIiwiaW5zZXJ0aW9uIiwiX3Nob3dDbG9uZSIsIl9vZmZNb3ZlRXZlbnRzIiwiX29mZlVwRXZlbnRzIiwiY2xlYXJJbnRlcnZhbCIsInJlbW92ZUNoaWxkIiwic2F2ZSIsImhhbmRsZUV2ZW50IiwiZHJvcEVmZmVjdCIsIiRiZTU3ZDU4MTM4ZDFiYzE3JHZhciRfZ2xvYmFsRHJhZ092ZXIiLCJ0b0FycmF5Iiwib3JkZXIiLCJnZXRBdHRyaWJ1dGUiLCJ1c2VBbmltYXRpb24iLCJpdGVtcyIsInNldCIsImNsb3Nlc3QiLCJkZXN0cm95IiwiQXJyYXkiLCJxdWVyeVNlbGVjdG9yQWxsIiwidXRpbHMiLCJvbiIsIm9mZiIsImNzcyIsImZpbmQiLCJpcyIsImV4dGVuZCIsImRzdCIsInRocm90dGxlIiwidG9nZ2xlQ2xhc3MiLCJuZXh0VGljayIsImNhbmNlbE5leHRUaWNrIiwiZGV0ZWN0RGlyZWN0aW9uIiwiZ2V0Q2hpbGQiLCJlbGVtZW50IiwiX2xlbiIsInBsdWdpbnMiLCJfa2V5IiwiY3JlYXRlIiwidmVyc2lvbiIsIiRiZTU3ZDU4MTM4ZDFiYzE3JHZhciRzY3JvbGxFbCIsIiRiZTU3ZDU4MTM4ZDFiYzE3JHZhciRzY3JvbGxSb290RWwiLCIkYmU1N2Q1ODEzOGQxYmMxNyR2YXIkbGFzdEF1dG9TY3JvbGxYIiwiJGJlNTdkNTgxMzhkMWJjMTckdmFyJGxhc3RBdXRvU2Nyb2xsWSIsIiRiZTU3ZDU4MTM4ZDFiYzE3JHZhciR0b3VjaEV2dCQxIiwiJGJlNTdkNTgxMzhkMWJjMTckdmFyJHBvaW50ZXJFbGVtQ2hhbmdlZEludGVydmFsIiwiJGJlNTdkNTgxMzhkMWJjMTckdmFyJGF1dG9TY3JvbGxzIiwiJGJlNTdkNTgxMzhkMWJjMTckdmFyJHNjcm9sbGluZyIsIiRiZTU3ZDU4MTM4ZDFiYzE3JHZhciRjbGVhckF1dG9TY3JvbGxzIiwiYXV0b1Njcm9sbCIsInBpZCIsIiRiZTU3ZDU4MTM4ZDFiYzE3JHZhciRjbGVhclBvaW50ZXJFbGVtQ2hhbmdlZEludGVydmFsIiwiJGJlNTdkNTgxMzhkMWJjMTckdmFyJGF1dG9TY3JvbGwiLCJpc0ZhbGxiYWNrIiwic2Nyb2xsIiwic2Nyb2xsQ3VzdG9tRm4iLCJzZW5zIiwic2Nyb2xsU2Vuc2l0aXZpdHkiLCJzcGVlZCIsInNjcm9sbFNwZWVkIiwic2Nyb2xsVGhpc0luc3RhbmNlIiwic2Nyb2xsRm4iLCJsYXllcnNPdXQiLCJjdXJyZW50UGFyZW50IiwiY2FuU2Nyb2xsWCIsImNhblNjcm9sbFkiLCJzY3JvbGxQb3NYIiwic2Nyb2xsUG9zWSIsInZ4IiwidnkiLCJsYXllciIsInNjcm9sbE9mZnNldFkiLCJzY3JvbGxPZmZzZXRYIiwiYnViYmxlU2Nyb2xsIiwiJGJlNTdkNTgxMzhkMWJjMTckdmFyJGRyb3AiLCJ0b1NvcnRhYmxlIiwiY2hhbmdlZFRvdWNoZXMiLCJvblNwaWxsIiwiJGJlNTdkNTgxMzhkMWJjMTckdmFyJFJldmVydCIsIiRiZTU3ZDU4MTM4ZDFiYzE3JHZhciRSZW1vdmUiLCJzdGFydEluZGV4IiwiZHJhZ1N0YXJ0IiwiX3JlZjIiLCJfcmVmMyIsImRyb3AiLCJfcmVmNCIsInBhcmVudFNvcnRhYmxlIiwiQXV0b1Njcm9sbCIsImZvcmNlQXV0b1Njcm9sbEZhbGxiYWNrIiwiX2hhbmRsZUF1dG9TY3JvbGwiLCJfaGFuZGxlRmFsbGJhY2tBdXRvU2Nyb2xsIiwiZHJhZ092ZXJDb21wbGV0ZWQiLCJkcmFnT3ZlckJ1YmJsZSIsIm51bGxpbmciLCJvZ0VsZW1TY3JvbGxlciIsIm5ld0VsZW0iLCIkYmU1N2Q1ODEzOGQxYmMxNyRleHBvcnQkMmUyYmNkODczOWFlMDM5IiwiJDhmNjc1NjQ4MmRhMzcyNzYkdmFyJGxvZ1RvQ29uc29sZSIsIiQ4ZjY3NTY0ODJkYTM3Mjc2JHZhciRkZWZhdWx0UmVnZXgiLCIkOGY2NzU2NDgyZGEzNzI3NiR2YXIkb3MiLCJwbGF0Zm9ybSIsInRvTG93ZXJDYXNlIiwic3RhcnRzV2l0aCIsIiQ4ZjY3NTY0ODJkYTM3Mjc2JHZhciRnZXRPUyIsIiQ4ZjY3NTY0ODJkYTM3Mjc2JHZhciRtb2RpZmllcnMiLCIkOGY2NzU2NDgyZGEzNzI3NiR2YXIkbWV0YSIsIiQ4ZjY3NTY0ODJkYTM3Mjc2JHZhciRkaXZDb250YWluZXIiLCJnZXRFbGVtZW50QnlJZCIsIiQ4ZjY3NTY0ODJkYTM3Mjc2JHZhciRzaG93IiwiJDhmNjc1NjQ4MmRhMzcyNzYkdmFyJHNlbmFtZSIsIiQ4ZjY3NTY0ODJkYTM3Mjc2JHZhciRrZXl3b3JkIiwiJDhmNjc1NjQ4MmRhMzcyNzYkdmFyJG11bHRpdGFiIiwiJDhmNjc1NjQ4MmRhMzcyNzYkdmFyJHVybCIsIiQ4ZjY3NTY0ODJkYTM3Mjc2JHZhciRyZWdleCIsIiQ4ZjY3NTY0ODJkYTM3Mjc2JHZhciRrYnNjIiwiJDhmNjc1NjQ4MmRhMzcyNzYkdmFyJGV4YWN0TWF0Y2giLCIkOGY2NzU2NDgyZGEzNzI3NiR2YXIkb3Blbk5ld1RhYiIsIiQ4ZjY3NTY0ODJkYTM3Mjc2JHZhciRzYW1lVGFiIiwiJDhmNjc1NjQ4MmRhMzcyNzYkdmFyJG9wZW5OZXdXaW5kb3ciLCIkOGY2NzU2NDgyZGEzNzI3NiR2YXIkb3BlblNpZGViYXIiLCIkOGY2NzU2NDgyZGEzNzI3NiR2YXIkdGFiTW9kZSIsIiQ4ZjY3NTY0ODJkYTM3Mjc2JHZhciR0YWJBY3RpdmUiLCIkOGY2NzU2NDgyZGEzNzI3NiR2YXIkcHJpdmF0ZU1vZGUiLCIkOGY2NzU2NDgyZGEzNzI3NiR2YXIkYWN0aXZlIiwiJDhmNjc1NjQ4MmRhMzcyNzYkdmFyJHBvc2l0aW9uIiwiJDhmNjc1NjQ4MmRhMzcyNzYkdmFyJHByaXZhY3kiLCIkOGY2NzU2NDgyZGEzNzI3NiR2YXIkbGFzdFRhYiIsIiQ4ZjY3NTY0ODJkYTM3Mjc2JHZhciRvcHRpb25zTWVudUxvY2F0aW9uIiwiJDhmNjc1NjQ4MmRhMzcyNzYkdmFyJGRpc3BsYXlFeGlmU3VtbWFyeSIsIiQ4ZjY3NTY0ODJkYTM3Mjc2JHZhciRkaXNwbGF5RmF2aWNvbnMiLCIkOGY2NzU2NDgyZGEzNzI3NiR2YXIkZGlzYWJsZUFsdENsaWNrIiwiJDhmNjc1NjQ4MmRhMzcyNzYkdmFyJHJlc2V0UHJlZmVyZW5jZXMiLCIkOGY2NzU2NDgyZGEzNzI3NiR2YXIkZm9yY2VTZWFyY2hFbmdpbmVzUmVsb2FkIiwiJDhmNjc1NjQ4MmRhMzcyNzYkdmFyJGZvcmNlRmF2aWNvbnNSZWxvYWQiLCIkOGY2NzU2NDgyZGEzNzI3NiR2YXIkc2VhcmNoRW5naW5lU2l0ZVNlYXJjaCIsIiQ4ZjY3NTY0ODJkYTM3Mjc2JHZhciR1c2VSZWdleCIsIiQ4ZjY3NTY0ODJkYTM3Mjc2JHZhciRtdWx0aU5ld1dpbmRvdyIsIiQ4ZjY3NTY0ODJkYTM3Mjc2JHZhciRtdWx0aUFjdGl2ZVRhYiIsIiQ4ZjY3NTY0ODJkYTM3Mjc2JHZhciRtdWx0aUFmdGVyTGFzdFRhYiIsIiQ4ZjY3NTY0ODJkYTM3Mjc2JHZhciRtdWx0aU1vZGUiLCIkOGY2NzU2NDgyZGEzNzI3NiR2YXIkYnRuQ2xlYXJBbGwiLCIkOGY2NzU2NDgyZGEzNzI3NiR2YXIkYnRuU2VsZWN0QWxsIiwiJDhmNjc1NjQ4MmRhMzcyNzYkdmFyJGJ0blNvcnRBbHBoYSIsIiQ4ZjY3NTY0ODJkYTM3Mjc2JHZhciRidG5TaG93QWR2YW5jZWRGZWF0dXJlcyIsIiQ4ZjY3NTY0ODJkYTM3Mjc2JHZhciRidG5IaWRlQWR2YW5jZWRGZWF0dXJlcyIsIiQ4ZjY3NTY0ODJkYTM3Mjc2JHZhciRidG5SZXNldCIsIiQ4ZjY3NTY0ODJkYTM3Mjc2JHZhciRidG5UZXN0IiwiJDhmNjc1NjQ4MmRhMzcyNzYkdmFyJGJ0bkFkZCIsIiQ4ZjY3NTY0ODJkYTM3Mjc2JHZhciRidG5DbGVhckFkZFNlYXJjaEVuZ2luZSIsIiQ4ZjY3NTY0ODJkYTM3Mjc2JHZhciRidG5Eb3dubG9hZCIsIiQ4ZjY3NTY0ODJkYTM3Mjc2JHZhciRidG5VcGxvYWQiLCIkOGY2NzU2NDgyZGEzNzI3NiR2YXIkcmVtb3ZlIiwiYnJvd3NlciIsImkxOG4iLCJnZXRNZXNzYWdlIiwiJDhmNjc1NjQ4MmRhMzcyNzYkdmFyJGZvbGRlciIsIiQ4ZjY3NTY0ODJkYTM3Mjc2JHZhciRtdWx0aXBsZVNlYXJjaEVuZ2luZXNTZWFyY2giLCIkOGY2NzU2NDgyZGEzNzI3NiR2YXIkdGl0bGVTaG93RW5naW5lIiwiJDhmNjc1NjQ4MmRhMzcyNzYkdmFyJHBsYWNlSG9sZGVyTmFtZSIsIiQ4ZjY3NTY0ODJkYTM3Mjc2JHZhciRwbGFjZUhvbGRlcktleXdvcmQiLCIkOGY2NzU2NDgyZGEzNzI3NiR2YXIkcGxhY2VIb2xkZXJLZXlib2FyZFNob3J0Y3V0IiwiJDhmNjc1NjQ4MmRhMzcyNzYkdmFyJG5vdGlmeVNlYXJjaEVuZ2luZVVybFJlcXVpcmVkIiwiJDhmNjc1NjQ4MmRhMzcyNzYkdmFyJHR5cGluZ1RpbWVyU2VhcmNoRW5naW5lTmFtZSIsIiQ4ZjY3NTY0ODJkYTM3Mjc2JHZhciR0eXBpbmdUaW1lcktleXdvcmQiLCIkOGY2NzU2NDgyZGEzNzI3NiR2YXIkdHlwaW5nVGltZXJGb2xkZXJOYW1lIiwiJDhmNjc1NjQ4MmRhMzcyNzYkdmFyJHR5cGluZ1RpbWVyRm9sZGVyS2V5d29yZCIsIiQ4ZjY3NTY0ODJkYTM3Mjc2JHZhciR0eXBpbmdUaW1lclF1ZXJ5U3RyaW5nIiwiJDhmNjc1NjQ4MmRhMzcyNzYkdmFyJHR5cGluZ1RpbWVyUmVnZXgiLCIkOGY2NzU2NDgyZGEzNzI3NiR2YXIkdHlwaW5nRXZlbnRTZWFyY2hFbmdpbmVOYW1lIiwiJDhmNjc1NjQ4MmRhMzcyNzYkdmFyJHR5cGluZ0V2ZW50S2V5d29yZCIsIiQ4ZjY3NTY0ODJkYTM3Mjc2JHZhciR0eXBpbmdFdmVudEZvbGRlcktleXdvcmQiLCIkOGY2NzU2NDgyZGEzNzI3NiR2YXIkdHlwaW5nRXZlbnRGb2xkZXJOYW1lIiwiJDhmNjc1NjQ4MmRhMzcyNzYkdmFyJHR5cGluZ0V2ZW50UXVlcnlTdHJpbmciLCIkOGY2NzU2NDgyZGEzNzI3NiR2YXIkdHlwaW5nRXZlbnRSZWdleCIsIiQ4ZjY3NTY0ODJkYTM3Mjc2JHZhciR0eXBpbmdJbnRlcnZhbCIsIiQ4ZjY3NTY0ODJkYTM3Mjc2JHZhciRudW1iZXJPZlNlYXJjaEVuZ2luZXMiLCIkOGY2NzU2NDgyZGEzNzI3NiR2YXIkc2VhcmNoRW5naW5lcyIsIiQ4ZjY3NTY0ODJkYTM3Mjc2JHZhciRrZXlzUHJlc3NlZCIsImFzeW5jIiwiJDhmNjc1NjQ4MmRhMzcyNzYkdmFyJHNlbmRNZXNzYWdlIiwiYWN0aW9uIiwicnVudGltZSIsInNlbmRNZXNzYWdlIiwiSlNPTiIsInBhcnNlIiwic3RyaW5naWZ5IiwiY2F0Y2giLCJjb25zb2xlIiwiZXJyb3IiLCIkOGY2NzU2NDgyZGEzNzI3NiR2YXIkb25FcnJvciIsImxvZyIsIiQ4ZjY3NTY0ODJkYTM3Mjc2JHZhciRyZW1vdmVFdmVudEhhbmRsZXIiLCJsaW5lSXRlbSIsInBuIiwiJDhmNjc1NjQ4MmRhMzcyNzYkdmFyJHJlbW92ZVNlYXJjaEVuZ2luZSIsIiQ4ZjY3NTY0ODJkYTM3Mjc2JHZhciR0b2dnbGVBZHZhbmNlZEZlYXR1cmVzIiwiJDhmNjc1NjQ4MmRhMzcyNzYkdmFyJGRpc3BsYXlTZWFyY2hFbmdpbmVzIiwiZGl2IiwiJDhmNjc1NjQ4MmRhMzcyNzYkdmFyJGlzRW1wdHkiLCJzb3J0ZWRMaXN0IiwiYXJyYXlPZkluZGV4ZXMiLCJhcnJheU9mSWRzIiwibWluIiwiaW5kIiwiJDhmNjc1NjQ4MmRhMzcyNzYkdmFyJHNvcnRCeUluZGV4IiwiZGl2U2VhcmNoRW5naW5lcyIsInNldEF0dHJpYnV0ZSIsInNlYXJjaEVuZ2luZSIsIiQ4ZjY3NTY0ODJkYTM3Mjc2JHZhciRjcmVhdGVMaW5lSXRlbSIsImZvbGRlciIsInNlYXJjaEVuZ2luZXMiLCJzZSIsInNlSXRlbSIsInF1ZXJ5U2VsZWN0b3IiLCJjaGlsZE5vZGVzIiwib25FbmQiLCIkOGY2NzU2NDgyZGEzNzI3NiR2YXIkc2F2ZVNlYXJjaEVuZ2luZXMiLCIkOGY2NzU2NDgyZGEzNzI3NiR2YXIkY3JlYXRlQnV0dG9uIiwiaW9uaWNvbkNsYXNzIiwiYnRuQ2xhc3MiLCJidG5UaXRsZSIsImJ0bkljb24iLCJpc0ZvbGRlciIsIiQ4ZjY3NTY0ODJkYTM3Mjc2JHZhciRjcmVhdGVGb2xkZXJJdGVtIiwia2V5d29yZCIsInNlYXJjaEVuZ2luZU5hbWUiLCJjaGtTaG93U2VhcmNoRW5naW5lIiwiaW5wdXRTZWFyY2hFbmdpbmVOYW1lIiwiaW5wdXRLZXl3b3JkIiwiaW5wdXRLZXlib2FyZFNob3J0Y3V0IiwiY2hrTXVsdGlTZWFyY2giLCJpbnB1dFF1ZXJ5U3RyaW5nIiwiaW5wdXRSZWdleCIsInNvcnRUYXJnZXQiLCJhZGQiLCJyZW1vdmVCdXR0b24iLCIkOGY2NzU2NDgyZGEzNzI3NiR2YXIkdmlzaWJsZUNoYW5nZWQiLCIkOGY2NzU2NDgyZGEzNzI3NiR2YXIkc2VhcmNoRW5naW5lTmFtZUNoYW5nZWQiLCIkOGY2NzU2NDgyZGEzNzI3NiR2YXIka2V5d29yZENoYW5nZWQiLCIkOGY2NzU2NDgyZGEzNzI3NiR2YXIkaGFuZGxlS2V5Ym9hcmRTaG9ydGN1dCIsImNvZGUiLCIkOGY2NzU2NDgyZGEzNzI3NiR2YXIkbXVsdGlUYWJDaGFuZ2VkIiwiJDhmNjc1NjQ4MmRhMzcyNzYkdmFyJHF1ZXJ5U3RyaW5nQ2hhbmdlZCIsIiQ4ZjY3NTY0ODJkYTM3Mjc2JHZhciRyZWdleENoYW5nZWQiLCJzaG93Iiwia2V5Ym9hcmRTaG9ydGN1dCIsIm11bHRpdGFiIiwidXJsIiwicmVnZXgiLCJmbGFncyIsImZvbGRlckl0ZW0iLCJpY29uIiwiaW5wdXRGb2xkZXJOYW1lIiwiaW5wdXRGb2xkZXJLZXl3b3JkIiwic3ViRm9sZGVyIiwiJDhmNjc1NjQ4MmRhMzcyNzYkdmFyJGZvbGRlck5hbWVDaGFuZ2VkIiwiJDhmNjc1NjQ4MmRhMzcyNzYkdmFyJGZvbGRlcktleXdvcmRDaGFuZ2VkIiwibmF2RGl2IiwiJDhmNjc1NjQ4MmRhMzcyNzYkdmFyJGhhbmRsZVJlc3BvbnNlIiwibWVzc2FnZSIsInJlc3BvbnNlIiwiJDhmNjc1NjQ4MmRhMzcyNzYkdmFyJHJlc3RvcmVPcHRpb25zUGFnZSIsIiQ4ZjY3NTY0ODJkYTM3Mjc2JHZhciRoYW5kbGVFcnJvciIsInZpc2libGUiLCJtZXRhS2V5IiwiY3RybEtleSIsImlucHV0IiwibW9kaWZpZXIiLCJpbmNsdWRlcyIsIm11bHRpVGFiIiwicXVlcnlTdHJpbmciLCJyZWdleFN0cmluZyIsImxhc3RTbGFzaCIsImxhc3RJbmRleE9mIiwicG9wIiwib2xkU2VhcmNoRW5naW5lcyIsImxpbmVJdGVtcyIsImxhYmVsIiwic3RyUmVnZXgiLCJiYXNlNjQiLCIkOGY2NzU2NDgyZGEzNzI3NiR2YXIkcmVhZERhdGEiLCIkOGY2NzU2NDgyZGEzNzI3NiR2YXIkY2xlYXJBZGRTZWFyY2hFbmdpbmUiLCIkOGY2NzU2NDgyZGEzNzI3NiR2YXIkc2V0T3B0aW9ucyIsImV4YWN0TWF0Y2giLCJ0YWJNb2RlIiwidmlzaWJpbGl0eSIsInRhYkFjdGl2ZSIsImxhc3RUYWIiLCJwcml2YXRlTW9kZSIsIm9wdGlvbnNNZW51TG9jYXRpb24iLCJkaXNwbGF5RmF2aWNvbnMiLCJkaXNwbGF5RXhpZlN1bW1hcnkiLCJkaXNhYmxlQWx0Q2xpY2siLCJyZXNldFByZWZlcmVuY2VzIiwiZm9yY2VTZWFyY2hFbmdpbmVzUmVsb2FkIiwiZm9yY2VGYXZpY29uc1JlbG9hZCIsInVzZVJlZ2V4IiwibXVsdGlNb2RlIiwic2l0ZVNlYXJjaCIsInN0b3JhZ2UiLCJzeW5jIiwibG9jYWwiLCIkOGY2NzU2NDgyZGEzNzI3NiR2YXIkdXBkYXRlVGFiTW9kZSIsIiQ4ZjY3NTY0ODJkYTM3Mjc2JHZhciR1cGRhdGVSZXNldE9wdGlvbnMiLCJyZXNldE9wdGlvbnMiLCIkOGY2NzU2NDgyZGEzNzI3NiR2YXIkY29tcGFyZU51bWJlcnMiLCIkOGY2NzU2NDgyZGEzNzI3NiR2YXIkY29tcGFyZVN0cmluZ3MiLCJsb2NhbGVDb21wYXJlIiwiJDhmNjc1NjQ4MmRhMzcyNzYkdmFyJHRyYW5zbGF0ZUNvbnRlbnQiLCJhdHRyaWJ1dGUiLCJpMThuRWxlbWVudHMiLCJpMThuX2F0dHJpYiIsInBsYWNlaG9sZGVyIiwidGl0bGUiLCJleCIsImlzQXJyYXkiLCJvbkNoYW5nZWQiLCJhZGRMaXN0ZW5lciIsImNoYW5nZXMiLCJhcmVhIiwiaWRzIiwibmV3VmFsdWUiLCJvcHRpb25LZXlzIiwib3B0aW9uS2V5Iiwic2l0ZVNlYXJjaFVybCIsInNlbGVjdGVkT3B0aW9ucyIsImRhdGFzZXQiLCJjb3VudGVyIiwiYXJyYXkiLCJudW1iZXJzIiwiYWxwaGEiLCJpc05hTiIsIiQ4ZjY3NTY0ODJkYTM3Mjc2JHZhciRzb3J0QWxwaGFiZXRpY2FsbHkiLCJ0aGVuIiwic3RyVXJsIiwidGVzdFVybCIsInZhbGlkaXR5IiwidHlwZU1pc21hdGNoIiwiVVJMIiwiJDhmNjc1NjQ4MmRhMzcyNzYkdmFyJGlzVmFsaWRVcmwiLCJwYXJlbnRGb2xkZXIiLCJmaWxlVG9Eb3dubG9hZCIsIkJsb2IiLCJjcmVhdGVPYmplY3RVUkwiLCJqc29uRmlsZSIsImZpbGVzIiwicmVhZGVyIiwiRmlsZVJlYWRlciIsIm9ubG9hZCIsInJlc3VsdCIsInJlYWRBc1RleHQiXSwidmVyc2lvbiI6MywiZmlsZSI6Im9wdGlvbnMuSEFTSF9SRUZfMmIwYWM5YzMwNjVjYmI2MS5qcy5tYXAifQ==
