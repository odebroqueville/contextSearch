/* eslint-disable no-case-declarations */
/* eslint-disable no-control-regex */

// Global Constants
const mycroftUrl = 'https://mycroftproject.com/installos.php/';
const bingUrl = 'https://www.bing.com/visualsearch';
const googleReverseImageSearchUrl = 'https://www.google.com/searchbyimage?sbisrc=1&safe=off&image_url=';
const googleLensUrl = 'https://lens.google.com/uploadbyurl?url=';
const tineyeUrl = 'https://www.tineye.com';
const chatGPTUrl = 'https://chatgpt.com';
const googleAIStudioUrl = 'https://aistudio.google.com/app/prompts/new_chat';
const grokUrl = 'https://grok.com';
const perplexityAIUrl = 'https://www.perplexity.ai';
const poeUrl = 'https://poe.com';
const claudeUrl = 'https://claude.ai';
const youUrl = 'https://you.com';
const andiUrl = 'https://andisearch.com';
const aiUrls = [chatGPTUrl, googleAIStudioUrl, grokUrl, perplexityAIUrl, poeUrl, claudeUrl, youUrl, andiUrl];

const base64MultiSearchIcon = '';

const base64BackIcon =
    'iVBORw0KGgoAAAANSUhEUgAAADAAAAAwCAYAAABXAvmHAAAACXBIWXMAAAsTAAALEwEAmpwYAAAC+ElEQVR4nO1ZTWsUQRAd/DjoTaMXP36FGBIQFrqXECGHxOp2k3jyEjyIR6NByEWNIHgIJhr8AcKY6o1rVATx4ywqagzEg6LmoMluPEmyRhmp3Rg364ad6amZMbAPCgYGpt7rru6ufuM4DTTQQGhoV2+WRrcKhAGBCiXCW4mwIA38KEXpWU2V3hl1No1dLYODg5ucpNGWzeyXRl2SBmalUV7A+CwQhlLYtS924u2u3i0QxoSBogXxNSEMFAXCqDSdTbGQT4/rXmGgEJb4P0JQ5eW4zkRG/MBY31Zp4AY3cVkdqK6lHqe2sJLvyHVsl6juRU7erJbVJOXkG/kYycsKESwzEUvZmPXWBYyGI4/qWFLk5UqkDRy1HPnOJokwn7QAgSqfyvXsCiyA9vmkycu/cTUQeTodOQ4pxllYEq7eG6B8qD0Il/Ty8xFmEXDRF3lqsqhPsU3Uls14N2eyHoF3JmCWmkYfo69bbZMcmTzuvZx7UyLPL0B5wujmugKoJbb5+IlHp70v3+dWyUchIG30GR8zACboh4eeDXtLP4tryEchQBq45UOAmrKp91pgLyGE1/VLyGerXF3vtTC98C5QyHp5Eeb9CCja1DsHZN0ZUEssAnLvH7CT5xTgq4SuvLjuLf9a9jghOUooyCI+9fScV1j8ti6hk08GAoVkWcRl68P3zpC53+dNF2bsRtQEDjeSg6x9ose7++Fh5AIEQn9dAWQ62SaoXhfsM4BdB301cwLhk22SynXBOvoGPvp288gxC5Psz7pgnoELTpwXmsO3e5K70BDKdh9zDduXz7ATFG2u3ikMzCVOHlXe2jcVqLqTF6CVEwbkVW6o0qn98yL4JYehdO6wmbxktJJXGZsAVLkWV29zOEGjEcfOJAwMs9vrlSCvMgrLURj1NfSCDbLFkt1HB0x48rBIo35osneHEzfodCTHzKZ3ot5GIpxPT3TvcZJGqQE0upl8G7I+6OJBN7vSD7xy0C3v1cq7fuoq/4vfrA004Gx8/AaA9k9iqAR7zQAAAABJRU5ErkJggg==';

const base64ContextSearchIcon =
    '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';

const notifySearchEngineNotFound = browser.i18n.getMessage('notifySearchEngineNotFound');
const ICON32 = '32px'; // icon width is 32px

// Global variables
let logToConsole = false; // Debug (default)
let os = null;
let meta = ''; // meta key: cmd for macOS, win for Windows, super for Linux
let tabUrl = '';
let domain = '';
let pn = '';
let keysPressed = {};
let textSelection = '';
let navEntered = false;
let xPos;
let yPos;
let options;
let searchEngines;

// Track selection state
let selectionActive = false;

// Current state
console.log(`Document ready state: ${document.readyState}`);

if (document.readyState === "complete") {
    (async () => {
        console.log('Document ready state: complete');
        await init();
    })();
} else {
    document.onreadystatechange = async () => {
        if (document.readyState === "complete") {
            console.log('Document ready state: complete');
            await init();
        }
    };
}

// Mouseover event listener
document.addEventListener('mouseover', handleMouseOver);

// Right-click event listener
document.addEventListener('contextmenu', handleRightClickWithoutGrid);

// Mouse down event listener
document.addEventListener('mousedown', startSelection);

// Mouse up event listener
document.addEventListener('mouseup', handleAltClickWithGrid);

// Key down event listener
document.addEventListener('keydown', (event) => {
    const key = event.key;
    if (event.target.nodeName === 'INPUT' || !isKeyAllowed(event)) return;
    keysPressed[key] = event.code;
    if (logToConsole) console.log(keysPressed);
});

// Key up event listener
document.addEventListener('keyup', handleKeyUp);

/// Handle Incoming Messages
// Listen for messages from the background script
browser.runtime.onMessage.addListener(async (message, sender, sendResponse) => {
    const action = message.action;
    const data = message.data;
    if (logToConsole) console.log(message.action);
    if (message && message.type === "NEW_CONTEXT_READY") {
        if (logToConsole) console.log("Received NEW_CONTEXT_READY message. Starting re-synchronization.");
        await init();
    }
    switch (action) {
        case 'updateOptions':
            options = data.options;
            if (logToConsole) console.log('Options updated:', options);
            break;
        case 'updateSearchEngines':
            searchEngines = data.searchEngines;
            if (logToConsole) console.log('Search engines updated:', searchEngines);
            break;
        case 'launchIconsGrid':
            handleAltClickWithGrid(null);
            break;
        case 'getSearchEngine':
            getOpenSearchEngine().then((result) => {
                if (result) {
                    sendMessage('addNewSearchEngine', result);
                } else {
                    sendMessage('notify', notifySearchEngineNotFound);
                }
            }).catch((error) => {
                if (logToConsole) console.error(error);
                sendResponse({ success: false });
                return false;
            });
            return true;
        case 'getPosition':
            {
                const width = data.width;
                const height = data.height;
                const { left, top } = calculatePosition(width, height);
                sendResponse({ left, top });
                return true;
            }
        default:
            if (logToConsole) console.error("Unexpected action:", action);
            sendResponse({ success: false });
            return false;
    }
    sendResponse({ success: true });
    return true;
});

// Detect the underlying OS
async function getOS() {
    try {
        // Try modern userAgentData first (supported in modern browsers)
        if (navigator.userAgentData) {
            const platform = (await navigator.userAgentData.getHighEntropyValues(['platform'])).platform.toLowerCase();
            if (platform.includes('macos')) return 'macOS';
            if (platform.includes('windows')) return 'Windows';
            if (platform.includes('linux')) return 'Linux';
        }

        // Fallback to user agent if background script detection fails
        const ua = navigator.userAgent.toLowerCase();

        if (ua.includes('mac os x')) return 'macOS';
        if (ua.includes('windows')) return 'Windows';
        if (ua.includes('linux')) return 'Linux';
        if (ua.includes('android')) return 'Android';
        if (ua.includes('iphone') || ua.includes('ipad') || ua.includes('ipod')) return 'iOS';
        return 'Windows'; // Safe default
    } catch (error) {
        console.error('Error detecting OS:', error);
        return 'Windows';
    }
}

// Function that determines if the browser being used is Chromium-based (e.g. Chrome) or is Gecko-based (e.g. Firefox)
function getBrowserType() {
    const userAgent = navigator.userAgent.toLowerCase();
    return userAgent.includes("chrome") ? "chrome" : "firefox";
}

// Function that determines the meta key based on the OS
function initMetaKey() {
    if (os === 'macOS') {
        meta = 'Cmd';
    } else if (os === 'Windows') {
        meta = 'Win';
    } else if (os === 'Linux') {
        meta = 'Super';
    } else {
        meta = 'Meta';
    }
}

function calculatePosition(width, height) {
    const left = Math.round((screen.width - width) / 2);
    const top = Math.round((screen.height - height) / 2) - 200;
    return { left, top };
}

async function getOpenSearchEngine() {
    try {
        const url = document.querySelector('link[type="application/opensearchdescription+xml"]').href;
        if (logToConsole) console.log(url);
        // Fetch search engine data
        const result = await getNewSearchEngine(url);
        // Send msg to background script to get the new search engine added
        if (result) {
            return result;
        } else {
            return null;
        }
    } catch (err) {
        if (logToConsole) console.log(err);
        return null;
    }
}

async function ask(url, promptText) {
    if (logToConsole) console.log(`Prompt is: ${promptText}`);
    if (logToConsole) console.log(`URL is: ${url}`);
    if (logToConsole) console.log(`Ready state is: ${document.readyState}`);

    // Check if we're on the login page by looking for login-specific elements
    const loginButton = document.querySelector('button[data-testid="login-button"]');
    const loginForm = document.querySelector('form[data-testid="login-form"]');
    if (loginButton || loginForm) {
        if (logToConsole) console.log("Login page detected, cannot proceed.");
        return;
    }

    let submissionMade = false;

    // Wait for the main chat interface to load
    await new Promise(resolve => setTimeout(resolve, 1000));

    const handleChatInput = async () => {
        if (submissionMade) return; // Prevent multiple submissions

        const enterEvent = new KeyboardEvent('keydown', {
            bubbles: true,
            cancelable: true,
            key: 'Enter',
            code: 'Enter',
            keyCode: 13,
            which: 13
        });

        let textarea, submit;

        // Get the text area and submit button based on the AI chat engine
        if (url.includes('aistudio.google.com')) {
            if (logToConsole) console.log("AI Studio detected.");
            textarea = document.querySelector('textarea[placeholder="Type something"]');
            submit = document.querySelector("button[class*='run-button']");
        } else if (url.includes('www.perplexity.ai')) {
            textarea = document.querySelector('textarea[placeholder="Ask anything..."]');
            submit = document.querySelector('button[aria-label="Submit"]');
        } else if (url.includes('poe.com')) {
            textarea = document.querySelector('textarea[placeholder="Start a new chat"]');
            //submit = document.querySelector("button[class*='ChatMessageSendButton']");
            submit = false;
        } else if (url.includes('chatgpt.com')) {
            textarea = document.querySelector('[data-testid="text-area-input"]') ||
                document.querySelector('div.ProseMirror[contenteditable="true"]');
            submit = document.querySelector('button[data-testid="send-button"]') ||
                document.querySelector('button[aria-label="Send message"]');
        } else if (url.includes('claude.ai')) {
            textarea = document.querySelector('div[contenteditable="true"]');
        } else if (url.includes('you.com')) {
            textarea = document.getElementById('search-input-textarea');
            submit = document.querySelector('button[data-testid="qb_submit_button"]');
        } else if (url.includes('andisearch.com')) {
            textarea = document.querySelector('div[placeholder="Ask Andi..."]');
            submit = document.querySelector('button.rcw-send[type="submit"]');
        } else if (url.includes('grok.com')) {
            while (!textarea) {
                await new Promise(resolve => setTimeout(resolve, 500));
                textarea = document.querySelector('textarea[aria-label="Ask Grok anything"]');
            }
            submit = document.querySelector('button[aria-label="Submit"]');
        } else {
            const textareas = document.getElementsByTagName("textarea");
            textarea = textareas[textareas.length - 1];
            const buttons = document.getElementsByTagName("button");
            submit = buttons[buttons.length - 1];
        }

        if (logToConsole) console.log(`Text area:`);
        if (logToConsole) console.log(textarea);
        if (logToConsole) console.log(`Submit button:`);
        if (logToConsole) console.log(submit);

        if (textarea) {
            // Focus the textarea first
            textarea.focus();

            if (logToConsole) console.log("Text area found.");

            if (url.includes('claude.ai')) {
                textarea.textContent = promptText;
                await new Promise(resolve => setTimeout(resolve, 1000));
                submit = document.querySelector('button[aria-label="Send Message"]');
            } else {
                // Set text content
                if (textarea.tagName === 'DIV') {
                    // For contenteditable divs
                    textarea.textContent = promptText;
                    if (logToConsole) console.log(`Textarea (content): ${textarea.textContent}`);
                } else {
                    // For other input types
                    textarea.value = promptText;
                    if (logToConsole) console.log(`Textarea (value): ${textarea.value}`);
                }
            }

            // Dispatch input event to ensure React recognizes the change
            textarea.dispatchEvent(new Event('input', {
                bubbles: true,
                cancelable: true
            }));

            // Wait for React to process the input
            await new Promise(resolve => setTimeout(resolve, 500));

            textarea.dispatchEvent(enterEvent);

            // Wait to see if that worked
            await new Promise(resolve => setTimeout(resolve, 500));
        }

        if (submit && !submit.disabled) {
            let submissionSuccessful = false;
            try {
                submit.focus();
                submit.click();
                submissionSuccessful = textarea.textContent === '' || textarea.value === '' || submit.disabled;
                if (submissionSuccessful && logToConsole) console.log("Standard submission successful.");
            } catch (error) {
                if (logToConsole) console.log("Submission failed:", error);
            }

            // Fallback if the standard click() method didn't work
            if (!submissionSuccessful) {
                // Try with PointerEvent
                try {
                    const clickEvent = new PointerEvent('click', {
                        view: window,
                        bubbles: true,
                        cancelable: true,
                        pointerType: 'mouse',
                        isPrimary: true
                    });

                    submit.dispatchEvent(clickEvent);
                    submissionSuccessful = true;
                    if (logToConsole) console.log("Submission clicked with PointerEvent.");
                } catch (error) {
                    if (logToConsole) console.log("PointerEvent failed:", error);
                }
            }

            submissionMade = submissionSuccessful;

            if (!submissionSuccessful) {
                if (logToConsole) console.log("All submission attempts failed.");
            }
        } else {
            if (logToConsole) console.log("Submit button not found or disabled.");
        }
    };

    // Run the handler directly if the page is already loaded and doesn't need waiting for mutations
    if (document.readyState === 'complete' && !submissionMade && !window.location.href.includes('#_sidebar')) {
        if (logToConsole) console.log("Page is ready, handling it directly...");
        await handleChatInput();
    } else if (document.readyState === 'complete' && !submissionMade && window.location.href.includes('#_sidebar')) {
        // Wait for the page to load and then handle the input
        new MutationObserver(() => {
            if (logToConsole) console.log("Sidebar content script loaded, handling it...");
            handleChatInput();
            //browser.runtime.sendMessage({ action: "sidebarContentUpdated", url: window.location.href });
        }).observe(document.documentElement, { childList: true, subtree: true });
    }
}

async function init() {
    tabUrl = window.location.href;
    pn = window.location.pathname;
    domain = window.location.hostname;
    let postRequest = false;
    let trimmedUrl;

    // Get OS
    os = await getOS();

    // Initialize meta key depending on OS
    initMetaKey();

    if (tabUrl.endsWith('/')) {
        trimmedUrl = tabUrl.slice(0, -1);
    } else {
        trimmedUrl = tabUrl;
    }

    try {
        const response = await sendMessage('getStoredData', null);
        if (response.success) {
            const storedData = response.data;
            logToConsole = storedData.logToConsole;
            options = storedData.options;
            searchEngines = storedData.searchEngines;
            textSelection = storedData.selection;
        } else if (logToConsole) {
            console.log('No stored data found');
        }
    } catch (error) {
        if (logToConsole) console.warn('Failed to get stored data:', error);
    }

    // If debugging mode is enabled, log the tab url and domain
    if (logToConsole) {
        console.log(`OS: ${os}`);
        console.log(`Meta key: ${meta}`);
        console.log(`Tab url: ${tabUrl}`);
        console.log(`Path name: ${pn}`);
        console.log(`Domain: ${domain}`);
        console.log(`Text selection: ${textSelection}`);
        console.log('Options: ', options);
        console.log('Search engines: ', searchEngines);
    }

    // If the web page contains selected text, then send it to the background script
    const hasSelection = window.getSelection()?.rangeCount > 0;
    if (hasSelection) {
        await handleSelectionEnd();
    }

    if (tineyeUrl.startsWith(trimmedUrl)) {
        // Handle reverse image searches from Tineye
        const response = await sendMessage('getImageUrl', null);
        if (response.action === 'fillFormWithImageUrl' && response.data) {
            const { imageUrl } = response.data;
            const urlBox = document.getElementById('url_box');
            const submitButton = document.getElementById('url_submit');

            if (urlBox && submitButton) {
                if (logToConsole) console.log(`Tineye detected and image url is: ${imageUrl}`);
                // Set the value
                urlBox.value = imageUrl;

                // Trigger input event to ensure form validation
                urlBox.dispatchEvent(new Event('input', {
                    bubbles: true,
                    cancelable: true
                }));

                // Trigger change event
                urlBox.dispatchEvent(new Event('change', {
                    bubbles: true,
                    cancelable: true
                }));

                // Trigger click event on submit button
                submitButton.dispatchEvent(new MouseEvent('click', {
                    view: window,
                    bubbles: true,
                    cancelable: true
                }));

                // As a fallback, if the button is within a form
                const form = submitButton.closest('form');
                if (form) {
                    form.dispatchEvent(new Event('submit', {
                        bubbles: true,
                        cancelable: true
                    }));
                }
            }
        }
    } else if (trimmedUrl.startsWith(bingUrl)) {
        // Handle reverse image searches from Bing
        const response = await sendMessage('getImageUrl', null);
        if (response.action === 'fillFormWithImageUrl' && response.data) {
            const { imageUrl } = response.data;
            // Find the input element
            const inputField = document.getElementById('vsk_imgpst');
            inputField.focus();
            inputField.value = imageUrl;

            // Create an input event to trigger any listeners
            const event = new InputEvent('input', {
                bubbles: true,
                cancelable: true,
            });
            inputField.dispatchEvent(event);

            // Simulate Enter key press
            const enterEvent = new KeyboardEvent('keypress', {
                bubbles: true,
                cancelable: true,
                key: 'Enter',
                keyCode: 13,
                which: 13
            });
            inputField.dispatchEvent(enterEvent);
        }
    } else if (!googleReverseImageSearchUrl.startsWith(trimmedUrl) && !googleLensUrl.startsWith(trimmedUrl)) {
        // Identify the search engine corresponding to the domain and determine if it uses an HTTP POST request
        for (let id in searchEngines) {
            if (id.startsWith('separator-') || id.startsWith('link-') || id.startsWith('chatgpt-') || searchEngines[id].isFolder) continue;
            const url = searchEngines[id].url;
            const post = (searchEngines[id].formData) ? true : false;
            if (url.startsWith('https://' + domain) && post) {
                postRequest = true;
                break;
            }
        }
    }

    // If the web page is for an AI search or a HTTP POST request, then send a message to the background script and wait for a response
    if (aiUrls.includes(trimmedUrl) || postRequest) {
        if (logToConsole && !postRequest) console.log(`AI search engine detected: ${domain}`);
        const response = await sendMessage('contentScriptLoaded', { domain, tabUrl });
        if (response.action === 'askPrompt') {
            try {
                const { url, prompt } = response.data;
                await ask(url, prompt);
            } catch (err) {
                if (logToConsole) console.log(err);
                await sendMessage('notify', notifySearchEngineNotFound);
            }
        } else if (response.action === 'displaySearchResults') {
            try {
                const results = response.data;
                const html = document.getElementsByTagName('html')[0];
                const parser = new DOMParser();
                const doc = parser.parseFromString(results, 'text/html');
                if (logToConsole) console.log(results);
                if (logToConsole) console.log(doc.head);
                if (logToConsole) console.log(doc.body);
                html.removeChild(document.head);
                html.removeChild(document.body);
                html.appendChild(doc.head);
                html.appendChild(doc.body);
            } catch (err) {
                if (logToConsole) console.log(err);
                await sendMessage('notify', notifySearchEngineNotFound);
            }
        } else if (response && response.action === "noAction") {
            // No action needed, this is a valid response
            if (logToConsole) console.log('No action needed for this page');
        } else {
            if (logToConsole) console.error("Received undefined response or unexpected action from background script.");
            if (logToConsole) console.log('Response: ', response);
        }
    }

    // If the website doesn't contain an opensearch description, then hide the Page action
    // Check if the current page supports OpenSearch
    let hasOpenSearch = !!document.querySelector('link[type="application/opensearchdescription+xml"]');

    // If there exists a search engine with a query string that includes the domain of the visited web page, then hide the Page action
    for (let id in searchEngines) {
        if (id.startsWith("separator-") || id.startsWith("chatgpt-") || searchEngines[id].isFolder) continue;
        if (searchEngines[id].url.includes(domain)) {
            if (logToConsole) console.log('This web page has already been added to your list of search engines.');
            hasOpenSearch = false;
            break;
        }
    }

    // Notify the background script
    sendMessage("updateOpenSearchSupport", { supportsOpenSearch: hasOpenSearch });

    // Display clickable icons (buttons) for mycroftproject.com
    if (!hasContextSearchImage) showButtons();

    // For all input elements on the page that are descendants of a form element, except for input elements with the type "hidden" or without any type, add a double click event listener
    document.querySelectorAll('form input:not([type="hidden"])').forEach(inputTextField => {
        inputTextField.addEventListener('dblclick', handleInputDblclick);
    });
}

// Check if the current web page contains a 'Context Search' icon
function hasContextSearchImage() {
    // Get all img elements on the page
    const images = document.getElementsByTagName('img');

    // Convert the HTMLCollection to an array and use some() to check
    return Array.from(images).some(img =>
        img.src.includes('context-search.svg')
    );
}

// Handle double click event on input elements for websites that use HTTP POST method
async function handleInputDblclick(e) {
    if (logToConsole) console.log(e);
    const inputElement = e.target;
    if (logToConsole) console.log(e.target.tagName);
    if (logToConsole) console.log(textSelection);
    if (inputElement.tagName !== 'INPUT' || textSelection) return;
    const form = getClosestForm(inputElement);
    const action = form?.action;
    let url;
    if (logToConsole) console.log(action);
    if (action) {
        url = action;
    } else return;
    if (logToConsole) console.log(url);

    // Fetch all input elements within the form
    const inputs = form.querySelectorAll('input');
    let formData = {};

    // Loop through each input element to gather key-value pairs
    inputs.forEach(input => {
        if (logToConsole) console.log(input);
        const name = input.name;
        let value;
        if (input === inputElement) {
            value = '%s';
        } else {
            value = input.value;
        }

        // Check if the input has a name attribute and add to formData
        if (name) {
            formData[name] = value;
        }
    });

    // Open modal dialog to input new search engine data
    await openModal(url, formData);

}

// This function opens a new window with your modal form
async function openModal(url, formData) {
    await browser.runtime.sendMessage({
        action: 'openModal',
        data: { url: url, formData: formData }
    });
}

// Traverse up the DOM tree from the given element until a form element is found, or until the root of the document is reached. If a form element is found, return the form element, otherwise return null.
function getClosestForm(element) {
    while (element) {
        if (element.tagName === 'FORM') {
            return element;
        }
        element = element.parentElement;
    }
    return null;
}

// Check if there is a selection and handle it
async function checkForSelection(e) {
    const hasSelection = window.getSelection()?.rangeCount > 0;
    let element;
    if (e !== null) {
        element = e.target;
    } else if (hasSelection) {
        element = document.activeElement;
    } else {
        return;
    }

    if (logToConsole) console.log(element);
    if (logToConsole) console.log(hasSelection);

    if ((e === null ||
        (e !== null && (e.key === 'Shift' || (e.type === 'mouseup' && e.button === 0)))) &&
        (
            element.tagName === "TEXTAREA" ||
            (element.tagName === "INPUT" && element.type === "text")
        )
    ) {
        // If the active element is a textarea or input and the selection is not empty, handle selection end
        if (logToConsole) console.log('Active element is a textarea or input');
        if (element.selectionStart !== element.selectionEnd) {
            const selection = element.value.substring(element.selectionStart, element.selectionEnd);
            await handleSelectionEnd(selection);
        }
    } else if (hasSelection && !selectionActive && (e !== null && (e.ctrlKey || e.key === 'Shift' || (e.type === 'mouseup' && e.button === 0)))) {
        // On keyup, if the control key is released and there's a text selection, handle selection end
        await handleSelectionEnd();
    }
}

// Handle keyboard shortcuts
async function handleKeyUp(e) {
    if (logToConsole) console.log(e);

    const modifiers = ['Meta', 'Control', 'Shift', 'Alt'];

    await checkForSelection(e);

    // If no key has been pressed or if text is being typed in an INPUT field then discontinue
    if (!Object.keys(keysPressed).length > 0 || e.target.nodeName === 'INPUT' || !isKeyAllowed(e)) return;

    if (logToConsole) console.log(keysPressed);

    // Store all modifier keys pressesd in var input
    let input = "";
    for (let modifier of modifiers) {
        if (logToConsole) console.log(modifier);
        if (!(modifier in keysPressed)) continue;
        switch (modifier) {
            case 'Meta':
                input = input + meta + '+';
                break;
            case 'Control':
                input = input + 'Control+';
                break;
            case 'Shift':
                input = input + 'Shift+';
                break;
            case 'Alt':
                input = input + 'Alt+';
                break;
            default:
        }
        delete keysPressed[modifier];
    }
    if (logToConsole) console.log(`Modifier key(s) pressed: ${input}`);
    if (logToConsole) console.log(`Remaining key pressed: ${keysPressed}`);

    // If only modifier keys were pressed, then discontinue
    if (Object.keys(keysPressed).length === 0) {
        // Reset keys pressed
        keysPressed = {};
        return;
    }

    // If more than one non-modifier key was pressed, then only the first key is used
    const key = Object.keys(keysPressed)[0];

    if (os === 'macOS' && keysPressed[key]) {
        input += keysPressed[key].substring(3);
    } else if (key) {
        input += key;
    }

    if (logToConsole) console.log(`Keys pressed: ${input}`);

    // --- Add this check to ignore manifest commands ---
    const browserType = getBrowserType();
    let manifestCommandShortcuts = ["Alt+J", "Alt+K"]; // Define the shortcuts from the Chrome manifest
    if (browserType === 'firefox') {
        // Define the shortcuts from the Firefox manifest
        manifestCommandShortcuts = ["Control+Shift+J", "Control+Shift+K"];
    }
    // Use case-insensitive comparison, similar to how search engine shortcuts are checked
    if (manifestCommandShortcuts.some(cmd => cmd.toLowerCase() === input.toLowerCase())) {
        if (logToConsole) console.log(`Ignoring manifest command shortcut: ${input}`);
        keysPressed = {}; // Reset keys pressed state
        return; // Exit the function early, let the browser handle the command
    }
    // --- End check ---

    // Reset keys pressed
    keysPressed = {};

    // Check if the input text matches any search engine keyboard shortcut
    for (let id in searchEngines) {
        if (logToConsole) console.log(id);
        const keyboardShortcut = searchEngines[id].keyboardShortcut.toLowerCase().replace('ctrl', 'control');
        if (keyboardShortcut && keyboardShortcut === input.toLowerCase()) {
            if (logToConsole) console.log(`Matched keyboard shortcut: ${keyboardShortcut}`);
            await sendMessage('doSearch', { id: id });
            break;
        }
    }
}

// Use mouse down to store selected text
function startSelection(event) {
    if (event.button === 0) { // 0 indicates the left mouse button
        selectionActive = true;
    }
}

async function handleRightClickWithoutGrid(e) {
    if (logToConsole) console.log(e);
    const elementClicked = e.target;
    const tag = elementClicked.tagName;

    // If right click is on image then remove selection
    if (tag === 'IMG') {
        if (window.getSelection) {
            window.getSelection().removeAllRanges();
        }
    }
}

// Triggered by mouse up event
async function handleAltClickWithGrid(e) {
    if (logToConsole) console.log('Event triggered:', e);
    if (logToConsole) console.log('Options:', options);

    if (e !== null && e.button === 0) { // 0 indicates the left mouse button
        selectionActive = false;
    } else if (e !== null && e.button !== 0) {
        return;
    }

    if (!options || options.disableAltClick) return;

    await checkForSelection(e);
    if (!textSelection) return;

    // If the grid of icons is already displayed, then close the grid and empty the text selection
    const nav = document.getElementById('context-search-icon-grid');
    if (nav !== undefined && nav !== null) {
        closeGrid();
    }

    // IF the content script received the message to launch the Icons Grid (e === null)
    // OR the Quick Icons Grid is activated on mouse up (options.quickIconGrid)
    // OR the option (alt) key is pressed on mouse up (e.altKey)
    if (e === null || options.quickIconGrid || e.altKey) {
        // THEN display the Icons Grid
        let x, y;
        if (logToConsole) console.log('Displaying Icons Grid...');
        if (e !== null) {
            x = e.clientX;
            y = e.clientY;
        } else {
            ({ x, y } = getSelectionEndPosition());
        }
        xPos = x + parseInt(options.offsetX);
        yPos = y + parseInt(options.offsetY);
        if (logToConsole) console.log(xPos, yPos);
        if (xPos > 0 && yPos > 0) await createIconsGrid('root');
    }
}

function getSelectionEndPosition() {
    const sel = window.getSelection();
    if (sel.rangeCount > 0) {
        // Get the last range in the selection.
        const range = sel.getRangeAt(sel.rangeCount - 1);
        const rect = range.getBoundingClientRect();
        return { x: rect.left + rect.width, y: rect.top + rect.height };
    }
    return { x: 0, y: 0 };
}

async function handleMouseOver(e) {
    const elementOver = e.target;
    const tag = elementOver.tagName;

    // Traverse up the DOM tree to check if a parent has the ID 'context-search-icon-grid'
    let target = elementOver;
    let level = 0;
    while (target && level < 3) {
        if (target.id === 'context-search-icon-grid') {
            return; // Exit the function if a parent has the ID
        }
        target = target.parentElement;
        level++;
    }

    // If right click is on image or a div with class 'iris-annotation-layer' then send the target url
    if (tag === 'IMG' || (tag === 'DIV' && [...elementOver.classList].includes('iris-annotation-layer'))) {
        if (logToConsole) console.log(e);
        if (elementOver.parentId === 'context-search-icon-grid') return;
        if (domain.includes('youtube.com') || domain.includes('youtu.be') || domain.includes('youtube-nocookie.com') || domain.includes('vimeo.com')) {
            // Get the video url
            const videoUrl = absoluteUrl(getClosestAnchorHref(elementOver));
            //const videoId = new URL(videoUrl).searchParams.get('v');
            //const downloadUrl = ytDownloadUrl + videoId;
            await sendMessage('storeTargetUrl', videoUrl);
            if (logToConsole) console.log(`Video url: ${videoUrl}`);
        } else {
            // Get the image url
            const imgUrl = absoluteUrl(elementOver.getAttribute('src'));
            await sendMessage('storeTargetUrl', imgUrl);
            if (logToConsole) console.log(`Image url: ${imgUrl}`);
        }
    }
}

/* async function handleRightClickWithoutGrid(e) {
    if (logToConsole) console.log(e);

    const elementClicked = e.target;
    const tag = elementClicked.tagName;

    // If right click is NOT on image or a div with class 'iris-annotation-layer' then send the target url
    if (!(tag === 'IMG' || (tag === 'DIV' && [...elementClicked.classList].includes('iris-annotation-layer')))) {
        const selectedText = getSelectedText();
        if (logToConsole) console.log(selectedText);

        // Send the selected text to background.js
        try {
            // Send the selected text to background.js
            await sendMessage('setSelection', { selection: selectedText });
        } catch (error) {
            // Just log the error and continue - this is a non-critical operation
            if (logToConsole) console.warn('Failed to send selection:', error);
        }
    } else {
        if (window.getSelection) {
            window.getSelection().removeAllRanges();
        }
    }
} */

function getClosestAnchorHref(imgElement) {
    if (!imgElement || imgElement.tagName !== 'IMG') {
        throw new Error('Provided element is not an img tag');
    }

    const anchorElement = imgElement.closest('a');
    return anchorElement ? anchorElement.href : null;
}

// Display clickable buttons/icons on mycroftproject.com
async function showButtons() {
    if (domain !== 'mycroftproject.com') return;
    const installLinks = document.querySelectorAll('a[href^="/install.html"]');
    const links = Array.from(installLinks);
    if (logToConsole) console.log(links);

    links.forEach(link => {
        let img = new Image();
        img.src = browser.runtime.getURL('/icons/context-search.svg');
        img.className = 'icon';
        img.height = '16px';
        img.style.marginRight = '5px';
        img.style.cursor = 'pointer';
        img.title = browser.i18n.getMessage("AddSearchEngine");

        img.onclick = async function () {
            const href = link.getAttribute('href');
            const pid = getPidAndName(href).pid;
            const name = getPidAndName(href).name;
            const url = mycroftUrl + pid + '/' + name + '.xml';
            const result = await getNewSearchEngine(url);
            // Send msg to background script to get the new search engine added
            if (result !== null) {
                await sendMessage('addNewSearchEngine', result);
            }
        }

        link.parentNode.insertBefore(img, link);
    });
}

async function handleSelectionEnd(selection = '') {
    const controlCharactersRegex = /[\x00-\x1f\x7f-\x9f]/g;
    let plaintext = selection;

    if (plaintext === '') {
        // Get the Selection object
        const sel = window.getSelection();

        // Check if the Selection object has any ranges
        if (sel && !sel.isCollapsed) {
            const selectionCount = sel.rangeCount;
            if (selectionCount > 0) {
                for (let i = 0; i < selectionCount; i++) {
                    const range = sel.getRangeAt(i);
                    plaintext += range.toString();
                }
            }
        }
    }

    // Replace control characters with a space and escape single and double quotes
    plaintext = plaintext.replace(controlCharactersRegex, ' ').replace(/['"]+/g, "\\$&").trim();

    if (plaintext) {
        if (logToConsole) console.log(`Selected text: ${plaintext}`);

        // Store locally in memory regardless of storage success
        textSelection = plaintext;

        // Try to store data via the service worker (more reliable than direct storage)
        try {
            await sendMessage('storeSelection', plaintext);

            if (logToConsole) {
                console.log("Selection data successfully stored via service worker");
            }
        } catch (error) {
            // Fallback to direct storage if messaging fails
            console.warn("Error sending data to service worker", error);
        }
    }
}

function getPidAndName(string) {
    const queryString = string.substring(string.indexOf('?'));
    if (logToConsole) console.log(`query string: ${queryString}`);
    const urlParams = new URLSearchParams(queryString);
    const pid = urlParams.get('id');
    const name = urlParams.get('name');
    return { pid: pid, name: name };
}

async function createIconsGrid(folderId) {
    let icons = [];

    // If the parent folder is not the root folder, then add an icon for backwards navigation
    if (folderId !== 'root') {
        icons.push({
            id: 'back',
            src: 'data:image/png;base64,' + base64BackIcon,
            title: 'back',
        });
    }

    // Only include the multi-search icon in the Icons Grid if required
    for (const id in searchEngines) {
        if (searchEngines[id].isFolder) continue;
        if (folderId === 'root' && searchEngines[id].multitab) {
            icons.push({
                id: 'multisearch',
                src: 'data:image/svg+xml;base64,' + base64MultiSearchIcon,
                title: 'multi-search',
            });
            break;
        }
    }

    // Add an icon for each search engine and folder
    for (const id of searchEngines[folderId].children) {
        const searchEngine = searchEngines[id];
        if (!id.startsWith("separator-") && searchEngine && (searchEngine.show || searchEngine.isFolder)) {
            const imageFormat = searchEngine.imageFormat || 'image/png';
            const title = searchEngine.name;
            let src = `data:${imageFormat};base64,`;
            if (isEmpty(searchEngine) || isEmpty(searchEngine.base64)) {
                // Default icon when no favicon could be found
                src += base64ContextSearchIcon;
            } else {
                const base64String = searchEngine.base64;
                src += base64String;
            }
            icons.push({ id: id, src: src, title: title });
        }
    }

    // Grid dimensions
    const n = icons.length;
    const m = Math.ceil(Math.sqrt(n)); // Grid dimension: m x m matrix
    const navMaxWidth = m * 38 + 16;

    // Cleanup
    closeGrid();

    const nav = document.createElement('div');
    nav.setAttribute('id', 'context-search-icon-grid');
    nav.style.maxWidth = navMaxWidth + 'px';
    nav.style.transition = 'none';
    nav.style.backgroundColor = '#ccc';
    nav.style.border = '3px solid #999';
    nav.style.padding = '5px';
    nav.style.borderRadius = '20px';
    nav.style.zIndex = 9999;
    nav.style.position = 'fixed';
    nav.style.setProperty('top', yPos.toString() + 'px');
    nav.style.setProperty('left', xPos.toString() + 'px');
    nav.style.gridTemplateColumns = `repeat(${m}, 1fr)`;
    nav.style.display = 'grid';
    nav.style.gap = '4px';


    for (const icon of icons) {
        if (logToConsole) console.log(icon);
        const iconElement = document.createElement("img");
        iconElement.style.width = ICON32;
        iconElement.style.height = ICON32;
        iconElement.style.display = 'inline-block !important';
        iconElement.style.border = '3px solid #ccc';
        iconElement.style.borderRadius = '10px';
        iconElement.setAttribute('id', icon.id);
        iconElement.setAttribute('src', icon.src);
        iconElement.setAttribute('title', icon.title);
        iconElement.addEventListener('mouseover', addBorder);
        iconElement.addEventListener('mouseleave', removeBorder);
        nav.appendChild(iconElement);
    }

    const body = document.getElementsByTagName('body')[0];
    body.appendChild(nav);

    // Define event listeners for the icon grid
    nav.addEventListener('mouseup', e => onGridClick(e, folderId));
    nav.addEventListener('mouseenter', onHover);
    nav.addEventListener('mouseleave', onLeave);

    // Position icon grid contained in nav element
    nav.style.left = 0;
    nav.style.top = 0;
    let viewportWidth = document.documentElement.clientWidth;
    let viewportHeight = window.innerHeight;
    let navWidth = nav.offsetWidth + 16;
    let navHeight = nav.offsetHeight;
    if (xPos > viewportWidth - navWidth) {
        nav.style.left = viewportWidth - navWidth + 'px';
    } else {
        nav.style.left = xPos + 'px';
    }
    if (yPos > viewportHeight - navHeight) {
        nav.style.top = viewportHeight - navHeight + 'px';
    } else {
        nav.style.top = yPos + 'px';
    }
}

async function onGridClick(e, folderId) {
    e.preventDefault();
    e.stopPropagation();
    if (!navEntered) return;
    if (logToConsole) console.log('Icons Grid got clicked:' + e.type);
    const id = e.target.id;
    if (logToConsole) console.log('Search engine clicked:' + id);
    closeGrid();

    if (id === 'back') {
        const parentId = getParentFolderOf(folderId, 'root');
        if (logToConsole) console.log('Parent folder of ' + folderId + ' is ' + parentId);
        await createIconsGrid(parentId);
        return;
    }

    if (id === 'multisearch' || !searchEngines[id].isFolder) {
        await sendMessage('doSearch', { id: id });
    } else {
        await createIconsGrid(id);
    }
}

function getParentFolderOf(folderId, startFolder) {
    for (const id of searchEngines[startFolder].children) {
        if (id === folderId) {
            return startFolder;
        } else if (searchEngines[id].isFolder) {
            const result = getParentFolderOf(folderId, id);
            if (result) {
                return result;
            }
        }
    }
    return null;
}

function onHover() {
    navEntered = true;
}

async function onLeave() {
    if (!options.closeGridOnMouseOut) return;
    if (logToConsole) console.log('Closing Icons Grid...');
    closeGrid();
}

function closeGrid() {
    let nav = document.getElementById('context-search-icon-grid');
    if (nav) {
        nav.parentElement.removeChild(nav);
        nav.removeEventListener('mouseup', onGridClick);
        nav.removeEventListener('mouseenter', onHover);
        nav.removeEventListener('mouseleave', onLeave);
        nav = null;
        navEntered = false;
    }
}

function addBorder(e) {
    if (logToConsole) console.log(e);
    if (logToConsole) console.log(e.target.tagName);
    if (e.target.tagName === 'IMG') {
        e.target.style.border = '3px solid #999';
    }
}

function removeBorder(e) {
    if (logToConsole) console.log(e);
    if (logToConsole) console.log(e.target.tagName);
    if (e.target.tagName === 'IMG') {
        e.target.style.border = '3px solid #ccc';
    }
}

/// Encode a url
function encodeUrl(url) {
    if (isEncoded(url)) {
        return url;
    }
    return encodeURIComponent(url);
}

/// Verify is uri is encoded
function isEncoded(uri) {
    uri = uri || '';
    return uri !== decodeURIComponent(uri);
}

async function sendMessage(action, data) {
    try {
        // Check if browser/chrome API is available
        if (!browser.runtime?.sendMessage) {
            throw new Error('Browser API not available');
        }
        if (logToConsole) console.log(`Sending message: action=${action}, data=${JSON.stringify(data)}`);
        const response = await browser.runtime.sendMessage({ action: action, data: data });
        if (logToConsole) console.log(`Received response: ${JSON.stringify(response)}`);
        return response;  // Return the response received from the background script
    } catch (error) {
        if (logToConsole) {
            if (!(error && error.message && error.message.includes("Extension context invalidated"))) {
                console.error(`Error sending message: ${error}`);
            }
        }
        return { success: false };
    }
}

function absoluteUrl(url) {
    // Create an anchor element (it automatically resolves relative URLs)
    const anchor = document.createElement('a');

    // Set the provided URL as the href of the anchor
    anchor.href = url;

    // The browser will automatically resolve it to the absolute URL
    return anchor.href;
}

async function getNewSearchEngine(url) {
    const xml = await fetchXML(url);
    const { shortName, queryString } = getNameAndQueryString(xml);

    // Prevent duplicates
    for (let id in searchEngines) {
        if (queryString === searchEngines[id].url) return null;
    }

    let id = shortName.replace(/\s/g, '-').toLowerCase();
    while (!isIdUnique(id)) {
        id = defineNewId(shortName);
    }
    id = id.trim();
    if (logToConsole) {
        console.log(id);
        console.log(shortName);
        console.log(queryString);
    }
    const numberOfSearchEngines = Object.keys(searchEngines).length;

    // Define new search engine to be added along with its default values
    searchEngines[id] = {
        index: numberOfSearchEngines,
        name: shortName,
        keyword: '',
        keyboardShortcut: '',
        multitab: false,
        url: queryString,
        show: true,
        base64: '',
    };

    if (logToConsole) console.log(searchEngines[id]);
    return { id: id, searchEngine: searchEngines[id] };
}

function fetchXML(url) {
    return new Promise((resolve, reject) => {
        let reqHeader = new Headers();
        reqHeader.append('Content-Type', 'text/xml');

        let initObject = {
            method: 'GET',
            headers: reqHeader
        };

        let userRequest = new Request(url, initObject);

        fetch(userRequest)
            .then((response) => response.text())
            .then((str) => new window.DOMParser().parseFromString(str, 'text/xml'))
            .then((xml) => {
                if (logToConsole) console.log(xml);
                resolve(xml);
            })
            .catch((err) => {
                if (logToConsole) console.log('Something went wrong!', err);
                reject(err);
            });
    });
}

// Retrieve the short name and query string from an xml document with the open search specifications
function getNameAndQueryString(xml) {
    let shortName, url;
    const x = xml.documentElement.childNodes;
    if (logToConsole) console.log(x);
    for (let node of x) {
        const key = node.nodeName;
        if (key === 'ShortName') shortName = node.textContent;
        if (key === 'Url') {
            let type = node.getAttribute('type');
            if (type === 'text/html') url = node.getAttribute('template');
        }
    }
    return { shortName: shortName, queryString: url };
}

// Define a random ID for the new search engine
function defineNewId(shortName) {
    let newId = shortName.replace(/\s/g, '-').toLowerCase();
    let randomNumber = Math.floor(Math.random() * 1000000);
    newId = newId + '-' + randomNumber.toString();
    if (logToConsole) console.log(newId);
    return newId;
}

// Ensure the ID generated is unique
function isIdUnique(testId) {
    for (let id in searchEngines) {
        if (id === testId) {
            return false;
        }
    }
    return true;
}

// Test if an object is empty
function isEmpty(value) {
    if (typeof value === 'number') return false;
    else if (typeof value === 'string') return value.trim().length === 0;
    else if (Array.isArray(value)) return value.length === 0;
    else if (typeof value === 'object') {
        return value === null || Object.keys(value).length === 0;
    } else if (typeof value === 'boolean') return false;
    else return !value;
}

function isKeyAllowed(event) {
    const disallowedKeys = [
        'Tab', 'Enter', 'ArrowUp', 'ArrowDown', 'ArrowLeft', 'ArrowRight',
        'Escape', ' ', 'Delete', 'Backspace', 'Home', 'End',
        'F1', 'F2', 'F3', 'F4', 'F5', 'F6', 'F7', 'F8', 'F9', 'F10', 'F11', 'F12',
    ];

    return !disallowedKeys.includes(event.key);
}